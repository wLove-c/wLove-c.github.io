{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/custom.css","path":"libs/valine/custom.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1551152268671},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a59bd7f914c41deee3aed87276309a0c755e76ac","modified":1551152268672},{"_id":"themes/hexo-theme-matery/README.md","hash":"9a63ad948c0db34aa4789a82c8f843c8bd9f8fa5","modified":1551152268671},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"5496ac534ba345523c73470811635f91195a5ec1","modified":1558946649727},{"_id":"source/_posts/coding-1.md","hash":"c86ffd4048917fe20c96d34e00f4952b8574ad16","modified":1551152268667},{"_id":"source/_posts/coding-20190329.md","hash":"6ada9d4912a15d79e27617873b3788f68dd6d8db","modified":1554714238001},{"_id":"source/_posts/coding-2.md","hash":"45a809c3165d24c57d9c8d78332c34ba8da67e9a","modified":1551152268668},{"_id":"source/_posts/coding-3.md","hash":"99f243077957b02abb98b16edc98acf92b92adaa","modified":1551173290710},{"_id":"source/_posts/cosing-4.md","hash":"992948d63068996a660a238b71bee1b96c069eb3","modified":1553824721636},{"_id":"source/_posts/hello-world.md","hash":"da522e680280ec80ad22e7441cff24dbb9f4b286","modified":1551152874923},{"_id":"source/about/index.md","hash":"9fc3bd9f39f35a58f67bccc1283e2af2ea7e6299","modified":1551152268669},{"_id":"source/_posts/coding-5.md","hash":"96a22285bc19749bef62a97449f4e1765fa1d212","modified":1553852601354},{"_id":"source/tags/index.md","hash":"ec5895e154834c4bfb19e497706075c8db0edac7","modified":1551152268670},{"_id":"source/coding/index.md","hash":"ef71f3c0a5aecb8f3feaa12bd2fc013283cfa241","modified":1551152268670},{"_id":"source/categories/index.md","hash":"a60190a718314320f55b90f90318d1db9032ff48","modified":1551152268669},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9d8609d0213ca88c48b0a4dbcbc4ca2effdda1d7","modified":1551152268673},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"978718ecafe858d5a2357e72e12daea3326c26fa","modified":1551152268674},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"a5a1cbfefb44243027df242e46d1e55184e2fdc6","modified":1551165523464},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"c8459660e87a0a07a6e007a99a2303b142bb7744","modified":1551152268692},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1551152268692},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"95176564ea32e65ddc9fdbe9074332239d6a1305","modified":1551152268693},{"_id":"themes/hexo-theme-matery/layout/coding.ejs","hash":"6ccd10c996c291521c53296ab1894f162c02f7e9","modified":1551152268693},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"05730420fbbac114ac581b650707e7abc4bb247c","modified":1551152268694},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"89c47cf1eb2cf1feb8a8d06f4eb7c76b713f79c0","modified":1551152268694},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"7a9b00c764d1fde3139bed3a631bd49bdee6db6e","modified":1551152268694},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"7e34bd9811d8ea2f8f2ff8a477cb50ad813e88b8","modified":1558949074280},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"9b794f8c3ab5925353162a92f3f74db4d57d640d","modified":1551160525520},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"ad1cc11ac2b99bd803276b28ae57340cdd5810c8","modified":1551354076468},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"03602fcd3293db28e0d12cdf3948d854048e99dd","modified":1551152268697},{"_id":"themes/hexo-theme-matery/layout/_partial/about-cover.ejs","hash":"ff02fc607b21e25df12e9d89927b72dd1a533047","modified":1551152268674},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-auto-push.ejs","hash":"7df46b0931bea16086c77edfdba6e8b60bad3297","modified":1551152268675},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1551152268675},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"ba3425ca1c119afe4fd98711dcc6ea339a9f4a0b","modified":1551152268676},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1551152268676},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"e4c5bf28ddc29519eee8debe79cce45bf279adeb","modified":1551152268677},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"72f79c8c97bf6b8bad116be218579aca96397112","modified":1551259762690},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"e66e119f57bb9230395c70d67cd0f615927d3334","modified":1551153486967},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"744f1cbdc9cb1af09bc320d4d47e5955c894f651","modified":1551153429400},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1551164225446},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"c219688593f2c5771533ea8988ea1360227f6920","modified":1551161331186},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1551152268680},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1551152268681},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"f1c87edb91b595a978a1d1f4e26f3f06dc48ccec","modified":1558946803144},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"07420e6ecfd40048707d007bf465206eeff9d2a4","modified":1551161331189},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"b7320ccb822f9969c58401a0bc946a8a7a1fea9c","modified":1551152268682},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1551152268683},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"202dfebd4ce1e2e647e0fcbf275b30820d16507c","modified":1551152268682},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"df803e3fef3ddac2dcaa866b35aae4513923cb1a","modified":1551163800019},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"3f73f077b05b6bf41150b00f43870a41d3fa390f","modified":1551152268683},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"d545c74f26ec321ba7e942d469f354eadd57e407","modified":1551152268684},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c948aa82afc65f08f1c894b049d6899577536306","modified":1551152268684},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1551152268684},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"e913042aab1cd0a93d1ca49ea536dee1a9b9fc41","modified":1551165471571},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"6ac7b8ecea324ff49b06bf5c0c88fcb5f51a21b7","modified":1551163804086},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1551152268686},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1551152268687},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1551152268686},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"c2f04b67721c36384e575994f3e66072843fc2bc","modified":1551152268687},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1551152268687},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1551152268688},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1551152268688},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1551152268689},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1551152268690},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1551152268689},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1551152268690},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1551152268691},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1551152268691},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1551152268696},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1551152268697},{"_id":"themes/hexo-theme-matery/source/css/custom.css","hash":"8cf75bac824791d1d40e873c688b8b0973eab49f","modified":1551153709801},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"469c737b9da2240b771857abafb43e5328bfda61","modified":1551353561324},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"8f4da1e5e6223f3e4a693ba46797f3c570627d24","modified":1558949008671},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"150437c526520b8243d25a6fff635f9921939acc","modified":1551356591371},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"53a4fef6d21d6941bb2136d689a618044aadfabf","modified":1551152268739},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1551152268699},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1551152268698},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1551152268698},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1551152268699},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1551152268699},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1551152268707},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1551152268707},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1551152268712},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1551152268714},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1551152268713},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1551152268714},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1551152268717},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1551152268737},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1551152268737},{"_id":"themes/hexo-theme-matery/source/libs/valine/custom.css","hash":"c8a1aa79ec633d90d019e3e52eca76e24e3935a3","modified":1550824848000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"3219ce162c29f3849a24c0a329a3e0e303bbec26","modified":1551152268744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1551152268746},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1551152268747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1551152268747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1551152268749},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1551152268750},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1551152268744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1551152268750},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1551152268752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1551152268751},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1551152268707},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1551152268713},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1551152268714},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1551152268738},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1551152268740},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1551152268741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1551152268745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1551152268745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1551152268745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1551152268746},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1551152268748},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1551152268746},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1551152268747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1551152268748},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1551152268749},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1551152268750},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1551152268751},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1551152268752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1551152268752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551152268700},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1551152268713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1551152268717},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1551152268737},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1551152268739},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1551152268741},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1551152268742},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1551152268743},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"c5d06c3e1deef980eb2821c7abff94bb15226f0e","modified":1551159835000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"7fdfb6c13e2c19f1f9e97904270bcdae9e61d334","modified":1551159890000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551152268706},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551152268706},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1551152268734},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551152268701},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551152268702},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551152268705},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"540e43aea993ada0c9b4b50ae5843494d8b7cc28","modified":1551152268718},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1551152268718},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1551152268722},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1551152268723},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1551152268724},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1551152268725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1551152268725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1551152268728},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1551152268727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1551152268727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1551152268729},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1551152268730},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1551152268730},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1551152268731},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1551152268732},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1551152268732},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1551152268734},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1551152268733},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1551152268743},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1551152268719},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1551152268721},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1551152268722},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1551152268724},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1551152268726},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1551152268729},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1551152268731},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1551152268733},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551152268704},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"757d54367f0df16a783769eec0ba974f42bd7dce","modified":1551152268720},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1551152268711}],"Category":[{"name":"编程","_id":"cjw66480u0002chc5lh87kzoo"}],"Data":[],"Page":[{"title":"首页","date":"2019-02-22T07:09:35.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 首页\ndate: 2019-02-22 15:09:35\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-02-26T03:37:48.669Z","path":"about/index.html","comments":1,"_id":"cjw66482k000hchc5bvs6v7h8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-22T07:07:17.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-22 15:07:17\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-02-26T03:37:48.670Z","path":"tags/index.html","comments":1,"_id":"cjw66482m000jchc5r84w7up1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-02-22T07:01:57.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-22 15:01:57\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-02-26T03:37:48.669Z","path":"categories/index.html","comments":1,"_id":"cjw66482o000mchc5eed7so0l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"coding","date":"2019-02-22T09:35:49.000Z","type":"coding","layout":"coding","_content":"","source":"coding/index.md","raw":"---\ntitle: coding\ndate: 2019-02-22 17:35:49\ntype: \"coding\"\nlayout: \"coding\"\n---\n","updated":"2019-02-26T03:37:48.670Z","path":"coding/index.html","comments":1,"_id":"cjw66482p000ochc5es6cktz5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS垂直居中的几种方法","_content":"CSS垂直居中的几种方法\n\n\n\n\n\n\n@[TOC](CSS垂直居中的几种方法)\n\n### 假设HTML如下:\n```html\n<body>\n    <div id=\"box\">\n        <div id=\"content\"></div>\n    </div>\n</body>\n\n```\n### 1. 兼容性最好的方法 IE7以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\t width:100%;\n\t height:100%;\n\t background:rgba(0,0,0,0.7);\n\t position:relative;\n }\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:pink;\n\tposition:absolute;\n\ttop:0;\n\tright:0;\n\tbottom:0;\n\tleft:0;\n\tmargin:auto;\n}\n```\n\n### 2. transform进行元素偏移 IE8以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tposition:relative;\n}\n#content{\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n\tleft:50%;\n\ttop:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\t-webkit-transform:translateX(-50%) translateY(-50%);\n}\n```\n\n### 3. 弹性盒模型进行布局 IE兼容性差\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:box;\n\tbox-pack:center;\n\tbox-align:center;\n\tdisplay:-webkit-flexbox;\n\t-webkit-box-pack:center;\n\t-webkit-box-align:center;\n}\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n}\n```\n\n\n### 4. flex布局 不兼容IE9以下\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:flex;\n\tdisplay:-webkit-flex;\n\t justify-content:center;\n\t align-items:center;\n  }\n#content {\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n  }\n```\n\n\n##### 言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\n","source":"_posts/coding-1.md","raw":"---\ntitle: CSS垂直居中的几种方法\ntags: CSS\ncategories: 编程\n---\nCSS垂直居中的几种方法\n\n\n\n\n\n\n@[TOC](CSS垂直居中的几种方法)\n\n### 假设HTML如下:\n```html\n<body>\n    <div id=\"box\">\n        <div id=\"content\"></div>\n    </div>\n</body>\n\n```\n### 1. 兼容性最好的方法 IE7以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\t width:100%;\n\t height:100%;\n\t background:rgba(0,0,0,0.7);\n\t position:relative;\n }\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:pink;\n\tposition:absolute;\n\ttop:0;\n\tright:0;\n\tbottom:0;\n\tleft:0;\n\tmargin:auto;\n}\n```\n\n### 2. transform进行元素偏移 IE8以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tposition:relative;\n}\n#content{\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n\tleft:50%;\n\ttop:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\t-webkit-transform:translateX(-50%) translateY(-50%);\n}\n```\n\n### 3. 弹性盒模型进行布局 IE兼容性差\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:box;\n\tbox-pack:center;\n\tbox-align:center;\n\tdisplay:-webkit-flexbox;\n\t-webkit-box-pack:center;\n\t-webkit-box-align:center;\n}\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n}\n```\n\n\n### 4. flex布局 不兼容IE9以下\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:flex;\n\tdisplay:-webkit-flex;\n\t justify-content:center;\n\t align-items:center;\n  }\n#content {\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n  }\n```\n\n\n##### 言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\n","slug":"coding-1","published":1,"date":"2019-02-26T03:37:48.667Z","updated":"2019-02-26T03:37:48.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66480o0000chc58rtdjqft","content":"<p>CSS垂直居中的几种方法</p>\n<p>@<a href=\"CSS垂直居中的几种方法\">TOC</a></p>\n<h3 id=\"假设HTML如下\"><a href=\"#假设HTML如下\" class=\"headerlink\" title=\"假设HTML如下:\"></a>假设HTML如下:</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n</code></pre>\n<h3 id=\"1-兼容性最好的方法-IE7以上\"><a href=\"#1-兼容性最好的方法-IE7以上\" class=\"headerlink\" title=\"1. 兼容性最好的方法 IE7以上\"></a>1. 兼容性最好的方法 IE7以上</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n     width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n     height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n     background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     position<span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n#content <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>pink<span class=\"token punctuation\">;</span>\n    position<span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    top<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    right<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    bottom<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    left<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    margin<span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"2-transform进行元素偏移-IE8以上\"><a href=\"#2-transform进行元素偏移-IE8以上\" class=\"headerlink\" title=\"2. transform进行元素偏移 IE8以上\"></a>2. transform进行元素偏移 IE8以上</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    position<span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n#content<span class=\"token punctuation\">{</span>\n    position<span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n    left<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    top<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    transform<span class=\"token punctuation\">:</span><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>transform<span class=\"token punctuation\">:</span><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"3-弹性盒模型进行布局-IE兼容性差\"><a href=\"#3-弹性盒模型进行布局-IE兼容性差\" class=\"headerlink\" title=\"3. 弹性盒模型进行布局 IE兼容性差\"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span>box<span class=\"token punctuation\">;</span>\n    box<span class=\"token operator\">-</span>pack<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    box<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>flexbox<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>box<span class=\"token operator\">-</span>pack<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>box<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n#content <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"4-flex布局-不兼容IE9以下\"><a href=\"#4-flex布局-不兼容IE9以下\" class=\"headerlink\" title=\"4. flex布局 不兼容IE9以下\"></a>4. flex布局 不兼容IE9以下</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span>flex<span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>flex<span class=\"token punctuation\">;</span>\n     justify<span class=\"token operator\">-</span>content<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n     align<span class=\"token operator\">-</span>items<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n#content <span class=\"token punctuation\">{</span>\n    position<span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"><a href=\"#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\" class=\"headerlink\" title=\"言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>","site":{"data":{}},"excerpt":"","more":"<p>CSS垂直居中的几种方法</p>\n<p>@<a href=\"CSS垂直居中的几种方法\">TOC</a></p>\n<h3 id=\"假设HTML如下\"><a href=\"#假设HTML如下\" class=\"headerlink\" title=\"假设HTML如下:\"></a>假设HTML如下:</h3><pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;box&quot;&gt;\n        &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n</code></pre>\n<h3 id=\"1-兼容性最好的方法-IE7以上\"><a href=\"#1-兼容性最好的方法-IE7以上\" class=\"headerlink\" title=\"1. 兼容性最好的方法 IE7以上\"></a>1. 兼容性最好的方法 IE7以上</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n     width:100%;\n     height:100%;\n     background:rgba(0,0,0,0.7);\n     position:relative;\n }\n#content {\n    width:50%;\n    height:50%;\n    background:pink;\n    position:absolute;\n    top:0;\n    right:0;\n    bottom:0;\n    left:0;\n    margin:auto;\n}\n</code></pre>\n<h3 id=\"2-transform进行元素偏移-IE8以上\"><a href=\"#2-transform进行元素偏移-IE8以上\" class=\"headerlink\" title=\"2. transform进行元素偏移 IE8以上\"></a>2. transform进行元素偏移 IE8以上</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,0.7);\n    position:relative;\n}\n#content{\n    position:absolute;\n    width:50%;\n    height:50%;\n    background:blue;\n    left:50%;\n    top:50%;\n    transform:translateX(-50%) translateY(-50%);\n    -webkit-transform:translateX(-50%) translateY(-50%);\n}\n</code></pre>\n<h3 id=\"3-弹性盒模型进行布局-IE兼容性差\"><a href=\"#3-弹性盒模型进行布局-IE兼容性差\" class=\"headerlink\" title=\"3. 弹性盒模型进行布局 IE兼容性差\"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,0.7);\n    display:box;\n    box-pack:center;\n    box-align:center;\n    display:-webkit-flexbox;\n    -webkit-box-pack:center;\n    -webkit-box-align:center;\n}\n#content {\n    width:50%;\n    height:50%;\n    background:blue;\n}\n</code></pre>\n<h3 id=\"4-flex布局-不兼容IE9以下\"><a href=\"#4-flex布局-不兼容IE9以下\" class=\"headerlink\" title=\"4. flex布局 不兼容IE9以下\"></a>4. flex布局 不兼容IE9以下</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,0.7);\n    display:flex;\n    display:-webkit-flex;\n     justify-content:center;\n     align-items:center;\n  }\n#content {\n    position:absolute;\n    width:50%;\n    height:50%;\n    background:blue;\n  }\n</code></pre>\n<h5 id=\"言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"><a href=\"#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\" class=\"headerlink\" title=\"言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>"},{"title":"IDEA、 JetBrains、webstorm、 pycharm 破解教程","_content":"\n\n@[TOC](IDEA、 JetBrains、webstorm、 pycharm 破解教程)\n### 第一步 [下载IDEA 2018年2月前版本](https://www.jetbrains.com/)\n)\n       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用\n\n### 第二步 打开[破解包网址](http://idea.lanyus.com/) 下图所示 点击下载\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击下载\n\n### 第三步 把下载好的jar包放到IDEA安装目录的/bin里面\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 第四步\n打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n### 最后打开IDEA\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！\n\n如果破解失败\n则把下面这串编码替换掉第四步的编码\n\n```txt\n\n\nBIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n\n\n```\n","source":"_posts/coding-20190329.md","raw":"---\ntitle: IDEA、 JetBrains、webstorm、 pycharm 破解教程\ntags: 工具类\ncategories: 编程\n---\n\n\n@[TOC](IDEA、 JetBrains、webstorm、 pycharm 破解教程)\n### 第一步 [下载IDEA 2018年2月前版本](https://www.jetbrains.com/)\n)\n       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用\n\n### 第二步 打开[破解包网址](http://idea.lanyus.com/) 下图所示 点击下载\n\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n点击下载\n\n### 第三步 把下载好的jar包放到IDEA安装目录的/bin里面\n\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 第四步\n打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n### 最后打开IDEA\n![image.png](https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar\n\n则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！\n\n如果破解失败\n则把下面这串编码替换掉第四步的编码\n\n```txt\n\n\nBIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n\n\n```\n","slug":"coding-20190329","published":1,"date":"2019-04-08T09:03:58.001Z","updated":"2019-04-08T09:03:58.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66480s0001chc5kjkopt6t","content":"<p>@<a href=\"IDEA、 JetBrains、webstorm、 pycharm 破解教程\">TOC</a></p>\n<h3 id=\"第一步-下载IDEA-2018年2月前版本\"><a href=\"#第一步-下载IDEA-2018年2月前版本\" class=\"headerlink\" title=\"第一步 下载IDEA 2018年2月前版本\"></a>第一步 <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"noopener\">下载IDEA 2018年2月前版本</a></h3><p>)<br>       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用</p>\n<h3 id=\"第二步-打开破解包网址-下图所示-点击下载\"><a href=\"#第二步-打开破解包网址-下图所示-点击下载\" class=\"headerlink\" title=\"第二步 打开破解包网址 下图所示 点击下载\"></a>第二步 打开<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">破解包网址</a> 下图所示 点击下载</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击下载</p>\n<h3 id=\"第三步-把下载好的jar包放到IDEA安装目录的-bin里面\"><a href=\"#第三步-把下载好的jar包放到IDEA安装目录的-bin里面\" class=\"headerlink\" title=\"第三步 把下载好的jar包放到IDEA安装目录的/bin里面\"></a>第三步 把下载好的jar包放到IDEA安装目录的/bin里面</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<h3 id=\"最后打开IDEA\"><a href=\"#最后打开IDEA\" class=\"headerlink\" title=\"最后打开IDEA\"></a>最后打开IDEA</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<p>则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！</p>\n<p>如果破解失败<br>则把下面这串编码替换掉第四步的编码</p>\n<pre class=\" language-txt\"><code class=\"language-txt\">\n\nBIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>@<a href=\"IDEA、 JetBrains、webstorm、 pycharm 破解教程\">TOC</a></p>\n<h3 id=\"第一步-下载IDEA-2018年2月前版本\"><a href=\"#第一步-下载IDEA-2018年2月前版本\" class=\"headerlink\" title=\"第一步 下载IDEA 2018年2月前版本\"></a>第一步 <a href=\"https://www.jetbrains.com/\" target=\"_blank\" rel=\"noopener\">下载IDEA 2018年2月前版本</a></h3><p>)<br>       ！！！注意 一定要2018年2月前的版本 最新版本不确定能否使用</p>\n<h3 id=\"第二步-打开破解包网址-下图所示-点击下载\"><a href=\"#第二步-打开破解包网址-下图所示-点击下载\" class=\"headerlink\" title=\"第二步 打开破解包网址 下图所示 点击下载\"></a>第二步 打开<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">破解包网址</a> 下图所示 点击下载</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/11447772-30e74cb642a75c3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>点击下载</p>\n<h3 id=\"第三步-把下载好的jar包放到IDEA安装目录的-bin里面\"><a href=\"#第三步-把下载好的jar包放到IDEA安装目录的-bin里面\" class=\"headerlink\" title=\"第三步 把下载好的jar包放到IDEA安装目录的/bin里面\"></a>第三步 把下载好的jar包放到IDEA安装目录的/bin里面</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/11447772-1bcedeb249c0f56a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h3><p>打开上图的圈中的文件 在两个文件的最后一行加上下面的这句话-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<h3 id=\"最后打开IDEA\"><a href=\"#最后打开IDEA\" class=\"headerlink\" title=\"最后打开IDEA\"></a>最后打开IDEA</h3><p><img src=\"https://upload-images.jianshu.io/upload_images/11447772-16ff5bbcefb5560f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>选择中间这个 如果下面的输入框显示的是-javaagent:加上你jar包的位置 如: -javaagent:C:\\Downloads\\Tool\\idea\\ideaIU-2018.3.3\\bin\\JetbrainsIdesCrack-2.7-release-sha1-3323d5d0b82e716609808090d3dc7cb3198b8c4b.jar</p>\n<p>则破解成功；希望可以帮助到你，别忘记点赞分享给更多的人哦！！</p>\n<p>如果破解失败<br>则把下面这串编码替换掉第四步的编码</p>\n<pre><code class=\"txt\">\n\nBIG3CLIK6F-eyJsaWNlbnNlSWQiOiJCSUczQ0xJSzZGIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiQUMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEUE4iLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDE3LTExLTIzIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMTctMTEtMjMifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxNy0xMS0yMyJ9XSwiaGFzaCI6IjQ3NzU1MTcvMCIsImdyYWNlUGVyaW9kRGF5cyI6MCwiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-iygsIMXTVeSyYkUxAqpHmymrgwN5InkOfeRhhPIPa88FO9FRuZosIBTY18tflChACznk3qferT7iMGKm7pumDTR4FbVVlK/3n1ER0eMKu2NcaXb7m10xT6kLW1Xb3LtuZEnuis5pYuEwT1zR7GskeNWdYZ0dAJpNDLFrqPyAPo5s1KLDHKpw+VfVd4uf7RMjOIzuJhAAYAG+amyivQt61I9aYiwpHQvUphvTwi0X0qL/oDJHAQbIv4Qwscyo4aYZJBKutYioZH9rgOP6Yw/sCltpoPWlJtDOcw/iEWYiCVG1pH9AWjCYXZ9AbbEBOWV71IQr5VWrsqFZ7cg7hLEJ3A==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==\n\n\n</code></pre>\n"},{"title":"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法","_content":"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\n@[TOC](vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法)\n\n## 遇到的问题\n 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；\n watch代码如下：\n```javascript\n  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n      \tthis.moreList = newVal.moreList\n      \t}\n  \t}\n  },\n```\n\nvue-devToola数据传递结果如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n#### 方案解决过程一\n考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:\n```javascript\n watch: {\n\t 'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true\n\t    }\n  \t},\n```\n\n结果显而易见 还是不行；\n\n#### 方案解决过程二\n查阅: [vue官方文档](https://cn.vuejs.org/v2/api/#watch).得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,\n```javascript\nwatch: {\n\t    'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true,\n\t      immediate: true,\n\t    }\n    }\n```\n最后博主问题终于得到解决了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n\n## 总结:\n出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~\n## 感谢~\n谢谢大家 麻烦给个关注 ^ _ ^\n","source":"_posts/coding-2.md","raw":"---\ntitle: vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\ntags: Vue\ncategories: 编程\n---\nvue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\n@[TOC](vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法)\n\n## 遇到的问题\n 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；\n watch代码如下：\n```javascript\n  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n      \tthis.moreList = newVal.moreList\n      \t}\n  \t}\n  },\n```\n\nvue-devToola数据传递结果如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n#### 方案解决过程一\n考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:\n```javascript\n watch: {\n\t 'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true\n\t    }\n  \t},\n```\n\n结果显而易见 还是不行；\n\n#### 方案解决过程二\n查阅: [vue官方文档](https://cn.vuejs.org/v2/api/#watch).得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,\n```javascript\nwatch: {\n\t    'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true,\n\t      immediate: true,\n\t    }\n    }\n```\n最后博主问题终于得到解决了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n\n## 总结:\n出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~\n## 感谢~\n谢谢大家 麻烦给个关注 ^ _ ^\n","slug":"coding-2","published":1,"date":"2019-02-26T03:37:48.667Z","updated":"2019-02-26T03:37:48.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66480w0004chc54u36n0z0","content":"<p>vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法<br>@<a href=\"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\">TOC</a></p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">uploaConfig</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span>oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">.</span>moreList\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>vue-devToola数据传递结果如下<br><img src=\"https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方案解决过程一\"><a href=\"#方案解决过程一\" class=\"headerlink\" title=\"方案解决过程一\"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"> watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">'uploaConfig.moreList'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          handler <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">.</span>moreList\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>结果显而易见 还是不行；</p>\n<h4 id=\"方案解决过程二\"><a href=\"#方案解决过程二\" class=\"headerlink\" title=\"方案解决过程二\"></a>方案解决过程二</h4><p>查阅: <a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'uploaConfig.moreList'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          handler <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">.</span>moreList\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          immediate<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后博主问题终于得到解决了<br><img src=\"https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢~\"></a>感谢~</h2><p>谢谢大家 麻烦给个关注 ^ _ ^</p>\n","site":{"data":{}},"excerpt":"","more":"<p>vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法<br>@<a href=\"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\">TOC</a></p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：</p>\n<pre><code class=\"javascript\">  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList &amp;&amp; this.uploadConfig.moreList.length &gt; 0) {\n          this.moreList = newVal.moreList\n          }\n      }\n  },\n</code></pre>\n<p>vue-devToola数据传递结果如下<br><img src=\"https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方案解决过程一\"><a href=\"#方案解决过程一\" class=\"headerlink\" title=\"方案解决过程一\"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:</p>\n<pre><code class=\"javascript\"> watch: {\n     &#39;uploaConfig.moreList&#39;: {\n          handler (newVal) {\n          if (this.uploadConfig.moreList &amp;&amp; this.uploadConfig.moreList.length &gt; 0) {\n              this.moreList = newVal.moreList\n              }\n          },\n          deep: true\n        }\n      },\n</code></pre>\n<p>结果显而易见 还是不行；</p>\n<h4 id=\"方案解决过程二\"><a href=\"#方案解决过程二\" class=\"headerlink\" title=\"方案解决过程二\"></a>方案解决过程二</h4><p>查阅: <a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,</p>\n<pre><code class=\"javascript\">watch: {\n        &#39;uploaConfig.moreList&#39;: {\n          handler (newVal) {\n          if (this.uploadConfig.moreList &amp;&amp; this.uploadConfig.moreList.length &gt; 0) {\n              this.moreList = newVal.moreList\n              }\n          },\n          deep: true,\n          immediate: true,\n        }\n    }\n</code></pre>\n<p>最后博主问题终于得到解决了<br><img src=\"https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢~\"></a>感谢~</h2><p>谢谢大家 麻烦给个关注 ^ _ ^</p>\n"},{"title":"vue前端代码规范","_content":"\n使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；\n持续更新\n<section class=\"post-content\">\n            <p><strong>一、JavaScript命名规范</strong></p>\n\n<pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义\n</code></pre>\n\n<p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p>\n\n<p><strong>二、CSS命名规范</strong></p>\n\n<pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。\n2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名\n     .fs {\n            font: italic bold 12px/24px \"Microsoft YaHei\";\n    }\n3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：\n      .pub-shopIcon {\n                   width:12px;\n                   height:12px;\n                   float:left;\n                   position:relative;\n                   left:0;\n                   top:0;\n   \t\t\t}\n</code></pre>\n\n<p><strong>三、 Vue 目录结构</strong></p>\n\n<p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br>\n2.static用来放没有npm包的第三方插件，字体文件。 <br>\n3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br>\n<code>\n├── README.md              // 用到的插件和其他项目注意点在这里标明\n├── buil\u001a\u001ad\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── index.html\n├── package.json\n├── src\n│   ├── App.vue\n│   ├── api               // 抽出的axios 接口请求配置\n│   ├── assets            //  图片和公用样式\n│   ├── components        //  公用组件\n│   ├── directives        //  vue 指令\n│   ├── filters           //  vue过滤器\n│   ├── main.js\n│   ├── router            //  路由\n│   ├── store\n│   ├── utils             // 工具\n│   └── views             // 业务页面\n└── static                // 没有npm包的第三方插件\n</code></p>\n        </section>\n","source":"_posts/coding-3.md","raw":"---\ntitle: vue前端代码规范\n---\n\n使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；\n持续更新\n<section class=\"post-content\">\n            <p><strong>一、JavaScript命名规范</strong></p>\n\n<pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义\n</code></pre>\n\n<p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p>\n\n<p><strong>二、CSS命名规范</strong></p>\n\n<pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。\n2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名\n     .fs {\n            font: italic bold 12px/24px \"Microsoft YaHei\";\n    }\n3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：\n      .pub-shopIcon {\n                   width:12px;\n                   height:12px;\n                   float:left;\n                   position:relative;\n                   left:0;\n                   top:0;\n   \t\t\t}\n</code></pre>\n\n<p><strong>三、 Vue 目录结构</strong></p>\n\n<p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br>\n2.static用来放没有npm包的第三方插件，字体文件。 <br>\n3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br>\n<code>\n├── README.md              // 用到的插件和其他项目注意点在这里标明\n├── buil\u001a\u001ad\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── index.html\n├── package.json\n├── src\n│   ├── App.vue\n│   ├── api               // 抽出的axios 接口请求配置\n│   ├── assets            //  图片和公用样式\n│   ├── components        //  公用组件\n│   ├── directives        //  vue 指令\n│   ├── filters           //  vue过滤器\n│   ├── main.js\n│   ├── router            //  路由\n│   ├── store\n│   ├── utils             // 工具\n│   └── views             // 业务页面\n└── static                // 没有npm包的第三方插件\n</code></p>\n        </section>\n","slug":"coding-3","published":1,"date":"2019-02-26T09:28:10.710Z","updated":"2019-02-26T09:28:10.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66480x0005chc5bj0a1i0b","content":"<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p>\n<section class=\"post-content\"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── buil\u001a\u001ad<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>\n","site":{"data":{}},"excerpt":"","more":"<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p>\n<section class=\"post-content\"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── buil\u001a\u001ad<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>\n"},{"title":"数组方法的扩展:array.every()和array.some()","_content":"\n从字面认知:every是每一个都，some是都有一些就~~\n即:\n1. every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；\n2. some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；\n\n## every()\n\n```javascript\n// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=>{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // false\n\n```\n\n## some()\n\n```javascript\n// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=>{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // true\n\n```\n","source":"_posts/cosing-4.md","raw":"---\ntitle: 数组方法的扩展:array.every()和array.some()\ntags: 数组\ncategories: 编程\n---\n\n从字面认知:every是每一个都，some是都有一些就~~\n即:\n1. every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；\n2. some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；\n\n## every()\n\n```javascript\n// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=>{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // false\n\n```\n\n## some()\n\n```javascript\n// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n```\n\n#### 例子:\n\n```javascript\n//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=>{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item > 22;\n \t})\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item > 22;\n// \t})\n \tconsole.log(result) // true\n\n```\n","slug":"cosing-4","published":1,"date":"2019-03-29T01:58:41.636Z","updated":"2019-03-29T01:58:41.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66482j000gchc5x9kgfafv","content":"<p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p>\n<ol>\n<li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li>\n<li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li>\n</ol>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array）<span class=\"token punctuation\">{</span>\n                 <span class=\"token comment\" spellcheck=\"true\">// item:当前元素的值；</span>\n\n                 <span class=\"token comment\" spellcheck=\"true\">// index:当前元素的索引；</span>\n\n                 <span class=\"token comment\" spellcheck=\"true\">// array:当前元素的数组对象；</span>\n\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//es6</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span>\n <span class=\"token comment\" spellcheck=\"true\">// 所有都满足才会返回true,否则返回false;</span>\n <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> age<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 10</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 0</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//[10,20,30,40,50,22,26]</span>\n\n     <span class=\"token keyword\">return</span> item <span class=\"token operator\">></span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// es5</span>\n<span class=\"token comment\" spellcheck=\"true\">// let result = age.every(function(item,index,array){</span>\n<span class=\"token comment\" spellcheck=\"true\">//     return item > 22;</span>\n<span class=\"token comment\" spellcheck=\"true\">//     })</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// false</span>\n\n</code></pre>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array）<span class=\"token punctuation\">{</span>\n                 <span class=\"token comment\" spellcheck=\"true\">// item:当前元素的值；</span>\n\n                 <span class=\"token comment\" spellcheck=\"true\">// index:当前元素的索引；</span>\n\n                 <span class=\"token comment\" spellcheck=\"true\">// array:当前元素的数组对象；</span>\n\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//es6</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span>\n <span class=\"token comment\" spellcheck=\"true\">// 所有都满足才会返回true,否则返回false;</span>\n <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> age<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 10 20 30</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 0 1 2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//[10,20,30,40,50,22,26]</span>\n\n\n     <span class=\"token keyword\">return</span> item <span class=\"token operator\">></span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// es5</span>\n<span class=\"token comment\" spellcheck=\"true\">// let result = age.some(function(item,index,array){</span>\n<span class=\"token comment\" spellcheck=\"true\">//     return item > 22;</span>\n<span class=\"token comment\" spellcheck=\"true\">//     })</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p>\n<ol>\n<li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li>\n<li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li>\n</ol>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><pre><code class=\"javascript\">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；\narray.every(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n</code></pre>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><pre><code class=\"javascript\">//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.every((item,index,array)=&gt;{\n console.log(item) // 10\n console.log(index) // 0\n console.log(array) //[10,20,30,40,50,22,26]\n\n     return item &gt; 22;\n     })\n\n// es5\n// let result = age.every(function(item,index,array){\n//     return item &gt; 22;\n//     })\n     console.log(result) // false\n\n</code></pre>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><pre><code class=\"javascript\">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；\narray.some(function(item,index,array）{\n                 // item:当前元素的值；\n\n                 // index:当前元素的索引；\n\n                 // array:当前元素的数组对象；\n\n         })\n\n</code></pre>\n<h4 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子:\"></a>例子:</h4><pre><code class=\"javascript\">//es6\nlet age = [10,20,30,40,50,22,26]\n // 所有都满足才会返回true,否则返回false;\n let result = age.some((item,index,array)=&gt;{\n\n  console.log(item) // 10 20 30\n  console.log(index) // 0 1 2\n  console.log(array) //[10,20,30,40,50,22,26]\n\n\n     return item &gt; 22;\n     })\n\n// es5\n// let result = age.some(function(item,index,array){\n//     return item &gt; 22;\n//     })\n     console.log(result) // true\n\n</code></pre>\n"},{"title":"hexo 的介绍和使用","_content":"欢迎来到 [Hexo](https://hexo.io/)! 这是我的第一个发布. 通过观看 [hexo文档](https://hexo.io/docs/) 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 [问题解决](https://hexo.io/docs/troubleshooting.html) 或者你也可以在github寻求帮助 [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post （创建新文章）\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server （运行）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files （生成静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites （部署到远程站点）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo 的介绍和使用\n---\n欢迎来到 [Hexo](https://hexo.io/)! 这是我的第一个发布. 通过观看 [hexo文档](https://hexo.io/docs/) 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 [问题解决](https://hexo.io/docs/troubleshooting.html) 或者你也可以在github寻求帮助 [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post （创建新文章）\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server （运行）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files （生成静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites （部署到远程站点）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-02-26T03:47:54.923Z","updated":"2019-02-26T03:47:54.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66482l000ichc5bu05nzug","content":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! 这是我的第一个发布. 通过观看 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">问题解决</a> 或者你也可以在github寻求帮助 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-（创建新文章）\"><a href=\"#Create-a-new-post-（创建新文章）\" class=\"headerlink\" title=\"Create a new post （创建新文章）\"></a>Create a new post （创建新文章）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-（运行）\"><a href=\"#Run-server-（运行）\" class=\"headerlink\" title=\"Run server （运行）\"></a>Run server （运行）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-（生成静态文件）\"><a href=\"#Generate-static-files-（生成静态文件）\" class=\"headerlink\" title=\"Generate static files （生成静态文件）\"></a>Generate static files （生成静态文件）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-（部署到远程站点）\"><a href=\"#Deploy-to-remote-sites-（部署到远程站点）\" class=\"headerlink\" title=\"Deploy to remote sites （部署到远程站点）\"></a>Deploy to remote sites （部署到远程站点）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! 这是我的第一个发布. 通过观看 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">问题解决</a> 或者你也可以在github寻求帮助 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-（创建新文章）\"><a href=\"#Create-a-new-post-（创建新文章）\" class=\"headerlink\" title=\"Create a new post （创建新文章）\"></a>Create a new post （创建新文章）</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-（运行）\"><a href=\"#Run-server-（运行）\" class=\"headerlink\" title=\"Run server （运行）\"></a>Run server （运行）</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-（生成静态文件）\"><a href=\"#Generate-static-files-（生成静态文件）\" class=\"headerlink\" title=\"Generate static files （生成静态文件）\"></a>Generate static files （生成静态文件）</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-（部署到远程站点）\"><a href=\"#Deploy-to-remote-sites-（部署到远程站点）\" class=\"headerlink\" title=\"Deploy to remote sites （部署到远程站点）\"></a>Deploy to remote sites （部署到远程站点）</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"干货学习","_content":"websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种\n\n\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license=\"\">\n\n<h1 id=\"articleHeader0\">websocket</h1>\n<p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p>\n<h3 id=\"articleHeader1\">websocket 和http区别？</h3>\n<ul>\n<li>\n<p>相同点</p>\n<ul>\n<li>都是应用层的协议</li>\n<li>都是基于tcp,可靠的协议</li>\n</ul>\n</li>\n<li>\n<p>不同点</p>\n<ul>\n<li>websocket是持久化的协议.</li>\n<li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li>\n<li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3>\n<ul>\n<li>相同点：都存储在客户端</li>\n<li>\n<p>不同点</p>\n<ol>\n<li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>\n<li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li>\n<li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"articleHeader3\">JS的类型？</h3>\n<ul>\n<li>\n<p>基本类型</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n</ul>\n</li>\n<li>\n<p>复杂类型</p>\n<ul><li>Object</li></ul>\n</li>\n</ul>\n<h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3>\n<ul>\n<li>\n<p>值类型：</p>\n<ul>\n<li>undefined string number Boolean</li>\n<li>拷贝形式,</li>\n</ul>\n</li>\n<li>\n<p>引用类型：</p>\n<ul>\n<li>array , function</li>\n<li>指针指向，共用空间</li>\n<li>可无限扩展属性，极大节省命名空间。</li>\n</ul>\n</li>\n<li>\n<p>特殊引用类型：function</p>\n<ul>\n<li>同引用类型↑</li>\n<li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>undefined</li>\n<li>object :  null和数组 都是object</li>\n<li>function</li>\n<li>boolean</li>\n</ul>\n<p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre>\n<p>function是一个比较特殊的类型，所以typeof能够区分</p>\n<h3 id=\"articleHeader6\">何时使用===何时使用==？</h3>\n<ul>\n<li>\n<p>尽可能使用 === 原因如下</p>\n<ul>\n<li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li>\n<li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li>\n<li>== 会进行类型转换，很容易懵逼</li>\n</ul>\n</li>\n<li>\n<p>== 的使用情况,可参考</p>\n<ul><li>判断对象的属性是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};\n    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){\n        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span>\n    }</code></pre>\n<ul><li>判断函数的参数是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{\n        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){\n            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span>\n        }\n    }</code></pre>\n</li>\n</ul>\n<h3 id=\"articleHeader7\">如何理解JSON？</h3>\n<ul>\n<li>\n<p>从纯JS的角度看，JSON就是对象，并且只有两个API</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span>\n   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">'{\"a\":10,\"b\":30}'</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre>\n</li>\n<li>JSON也是一种轻量级的文本数据交换格式.</li>\n</ul>\n<h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Function</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n<h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3>\n<ul>\n<li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li>\n<li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li>\n</ul>\n<h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3>\n<p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/...</a></p>\n<h3 id=\"articleHeader12\">实现数组的随机排序</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {\n      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;\n   });\n</code></pre>\n<p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>\n    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span>\n   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;\n    <span class=\"hljs-keyword\">while</span> (i)\n    {\n        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre>\n<h1 id=\"articleHeader13\">原型和原型链</h1>\n<h3 id=\"articleHeader14\">什么叫原型链</h3>\n<p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p>\n<h3 id=\"articleHeader15\">原型规则</h3>\n<ol>\n<li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li>\n<li>所有的引用类型（数组，对象，函数），都有一个__proto__属性，也可以称为隐式原型，属性值是一个普通的对象</li>\n<li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li>\n<li>所有的引用类型（数组，对象，函数），__proto__属性值指向它的构造函数的prototype属性值</li>\n<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__中去找。</li>\n</ol>\n<p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p>\n<h3 id=\"articleHeader16\">构造函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.age = age;\n}\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">25</span>);\n<span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">250</span>);\n<span class=\"hljs-built_in\">console</span>.log(foo,foo2);\n\n<span class=\"hljs-comment\">//循环对象自身的属性</span>\n<span class=\"hljs-keyword\">var</span> item;\n<span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)\n{\n    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span>\n    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))\n    {\n        <span class=\"hljs-built_in\">console</span>.log(item)\n    }\n\n}\n</code></pre>\n<h3 id=\"articleHeader17\">描述new一个对象的过程</h3>\n<ol>\n<li>创建一个对象</li>\n<li>this指向这个新对象</li>\n<li>执行代码，即对this赋值</li>\n<li>return this。 默认有return，不用写</li>\n</ol>\n<h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span>\n<span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader19\">写一个原型继承的例子</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);\n}\n\nElem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    <span class=\"hljs-keyword\">if</span>(val){\n        dom.innerHTML = val;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span>\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    dom.addEventListener( type , fn);\n\n}\n<span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">'h1'</span>);\nh1.html(<span class=\"hljs-string\">\"你被修改了\"</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)\n})\n</code></pre>\n<h1 id=\"articleHeader20\">作用域和闭包</h1>\n<h3 id=\"articleHeader21\">什么叫作用域？</h3>\n<p>`作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域<br>全局作用域》函数作用域》内层函数的作用域<br>作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。<br>`</p>\n<h3 id=\"articleHeader22\">变量提升的理解</h3>\n<ul>\n<li>变量定义</li>\n<li>函数声明（注意和函数表达式的区别）</li>\n<li>预解析</li>\n</ul>\n<h3 id=\"articleHeader23\">this的使用场景</h3>\n<p>注意：this要在执行时才能确认值，定义时无法确认</p>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li>call apply bind</li>\n</ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n }\n\nf1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, [<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>]);\nf1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, <span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>);\n\n\n<span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span>\n<span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n}.bind(<span class=\"hljs-string\">'我是被绑定的this'</span>)\n\nf1(<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>)\n</code></pre>\n<h3 id=\"articleHeader24\">闭包</h3>\n<p>`当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，<br>如果返回的这个函数在外部被执行，就产生了闭包。<br>表现形式：使函数外部能够调用函数内部定义的变量。`</p>\n<ul><li>\n<p>闭包的使用场景</p>\n<ol>\n<li>\n<p>函数作为返回值</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span>\n    }\n}\n<span class=\"hljs-keyword\">var</span> f1 =  fn();\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;\nf1(); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n<li>\n<p>函数作为参数来传递</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a);\n        }\n}\n<span class=\"hljs-keyword\">var</span> fn1 = fn();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;\n    fn();\n}\nfn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n</ol>\n</li></ul>\n<h3 id=\"articleHeader25\">如何理解作用域？</h3>\n<ul>\n<li>自由变量</li>\n<li>作用域链，即自由变量的查找</li>\n<li>闭包的两个场景</li>\n</ul>\n<h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;\n<span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){\n    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"a\"</span>);\n    str.innerHTML = a + <span class=\"hljs-string\">\"点我\"</span> + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>;\n\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);\n\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{\n        str.addEventListener(<span class=\"hljs-string\">\"click\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n            e.preventDefault();\n            <span class=\"hljs-built_in\">console</span>.log(a)\n        })\n    })(a)\n}</code></pre>\n<h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3>\n<p>同步是阻塞模式，异步是非阻塞模式。</p>\n<ul>\n<li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li>\n<li>同步：必须等待操作做完，才返回结果.</li>\n</ul>\n<h3 id=\"articleHeader28\">数组API</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre>\n<ul><li>forEach 遍历所有元素</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span>\n        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span>\n\n    })</code></pre>\n<ul><li>every 判断所有元素是否都符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    })\n  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre>\n<ul><li>some 判断是否有至少一个元素符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre>\n<ul><li>sort 排序</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n          <span class=\"hljs-comment\">// return a-b; //正序</span>\n          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span>\n        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span>\n\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre>\n<ul><li>map 对元素重新组装，生成新数组</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考\n var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;h1&gt;'</span> + item + <span class=\"hljs-string\">'&lt;/h1&gt;'</span>;\n      })\nconsole.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">\"&lt;h1&gt;2&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;3&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;9&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;0&lt;/h1&gt;\"</span>]</code></pre>\n<ul><li>filter 过滤符合条件的元素,较为常用</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre>\n<h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (!dt) {\n            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span>\n            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n        }\n\n        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();\n        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> day = dt.getDate();\n\n        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {\n            month = <span class=\"hljs-string\">'0'</span> + month;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {\n            day = <span class=\"hljs-string\">'0'</span> + day;\n        }\n\n        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">'-'</span> + month + <span class=\"hljs-string\">'-'</span> + day;\n    }\n\n    <span class=\"hljs-keyword\">var</span> date = formatDate();\n    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span>\n</code></pre>\n<h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">'0'</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre>\n<h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)\n</span>{\n        <span class=\"hljs-comment\">//数组处理</span>\n        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)\n        {\n          info.forEach(fn)\n        }<span class=\"hljs-keyword\">else</span>{\n           <span class=\"hljs-comment\">//对象处理</span>\n           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n<span class=\"hljs-comment\">//使用方法</span>\n  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'我是x'</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'我是y'</span>};\n   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span>\n  })\n\n\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];\n  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span>\n  })\n</code></pre>\n<h1 id=\"articleHeader32\">Web_API</h1>\n<h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{\n           elem.addEventListener( type ,fn)\n }\n <span class=\"hljs-comment\">//使用方法</span>\n bindEvent(id,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(e)\n })\n\n bindEvent(a,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span>\n })</code></pre>\n<h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//使用代理，由父级帮忙去做\n\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == &quot;A&quot;){\n        alert(e.target.innerHTML)\n    }\n})\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div1\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 动态加载更多 --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == \"A\"){\n        alert(e.target.innerHTML)\n    }\n})</code></pre>\n<h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//HTML结构\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\n<div id=&quot;div2&quot;>不使用代理</div>\n\n//\nfunction bindEvent(elem,type,selector, fn){\n    if(fn == null){\n        fn=selector;\n        selector =null;\n    }\n    elem.addEventListener( type ,function(e){\n        var target;\n        if(selector){\n            target = e.target;\n            //matches() 方法用于检测字符串是否匹配给定的正则表达式。\n            if(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }else{\n            fn.call(e);\n        }\n    })\n}\n\n//使用代理\nbindEvent(div1,'click','a',function(e){\n    console.log(this)\n})\n//不使用代理\nbindEvent(div2,'click',function(e){\n    //call改变了this指向为e\n    console.log(this.toElement.innerHTML)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span>\n &lt;div id=<span class=\"hljs-string\">\"div1\"</span>&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a1&lt;/a&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a2&lt;/a&gt;\n    &lt;span&gt;ddd&lt;/span&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a5&lt;/a&gt;\n    &lt;!-- 动态加载更多 --&gt;\n&lt;/div&gt;\n\n&lt;div id=<span class=\"hljs-string\">\"div2\"</span>&gt;不使用代理&lt;/div&gt;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){\n        fn=selector;\n        selector =<span class=\"hljs-literal\">null</span>;\n    }\n    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n        <span class=\"hljs-keyword\">var</span> target;\n        <span class=\"hljs-keyword\">if</span>(selector){\n            target = e.target;\n            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span>\n            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }<span class=\"hljs-keyword\">else</span>{\n            fn.call(e);\n        }\n    })\n}\n\n<span class=\"hljs-comment\">//使用代理</span>\nbindEvent(div1,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    console.log(<span class=\"hljs-keyword\">this</span>)\n})\n<span class=\"hljs-comment\">//不使用代理</span>\nbindEvent(div2,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    <span class=\"hljs-comment\">//call改变了this指向为e</span>\n    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)\n})\n</code></pre>\n<h3 id=\"articleHeader36\">可以跨域的三个标签</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //用于打点统计\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //使用CDN\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre>\n<h1 id=\"articleHeader37\">3月10日面试</h1>\n<h3 id=\"articleHeader38\">闭包的优缺点</h3>\n<p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p>\n<ul>\n<li>\n<p>优点：</p>\n<ol>\n<li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li>\n<li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol>\n</li>\n</ul>\n<h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3>\n<h3 id=\"articleHeader40\">http请求缓存头详解</h3>\n<ol>\n<li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li>\n<li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li>\n<li>\n<p>Cache-Control: http1.1推出，指文件缓存的有效期。</p>\n<ul>\n<li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li>\n<li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li>\n<li>private:仅单用户私有，不被多用户共享</li>\n<li>no-cache:不会被缓存。</li>\n<li>no-store:不允许被存储</li>\n</ul>\n</li>\n<li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li>\n</ol>\n\n</div>\n\n\n尊重原著:文章转载于@[史燕斌](https://segmentfault.com/a/1190000018628100).\n","source":"_posts/coding-5.md","raw":"---\ntitle: 干货学习\ntags: js\ncategories: 编程\n---\nwebsocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种\n\n\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license=\"\">\n\n<h1 id=\"articleHeader0\">websocket</h1>\n<p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p>\n<h3 id=\"articleHeader1\">websocket 和http区别？</h3>\n<ul>\n<li>\n<p>相同点</p>\n<ul>\n<li>都是应用层的协议</li>\n<li>都是基于tcp,可靠的协议</li>\n</ul>\n</li>\n<li>\n<p>不同点</p>\n<ul>\n<li>websocket是持久化的协议.</li>\n<li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li>\n<li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3>\n<ul>\n<li>相同点：都存储在客户端</li>\n<li>\n<p>不同点</p>\n<ol>\n<li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li>\n<li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li>\n<li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"articleHeader3\">JS的类型？</h3>\n<ul>\n<li>\n<p>基本类型</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n</ul>\n</li>\n<li>\n<p>复杂类型</p>\n<ul><li>Object</li></ul>\n</li>\n</ul>\n<h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3>\n<ul>\n<li>\n<p>值类型：</p>\n<ul>\n<li>undefined string number Boolean</li>\n<li>拷贝形式,</li>\n</ul>\n</li>\n<li>\n<p>引用类型：</p>\n<ul>\n<li>array , function</li>\n<li>指针指向，共用空间</li>\n<li>可无限扩展属性，极大节省命名空间。</li>\n</ul>\n</li>\n<li>\n<p>特殊引用类型：function</p>\n<ul>\n<li>同引用类型↑</li>\n<li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3>\n<ul>\n<li>number</li>\n<li>string</li>\n<li>undefined</li>\n<li>object :  null和数组 都是object</li>\n<li>function</li>\n<li>boolean</li>\n</ul>\n<p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span>\n <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre>\n<p>function是一个比较特殊的类型，所以typeof能够区分</p>\n<h3 id=\"articleHeader6\">何时使用===何时使用==？</h3>\n<ul>\n<li>\n<p>尽可能使用 === 原因如下</p>\n<ul>\n<li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li>\n<li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li>\n<li>== 会进行类型转换，很容易懵逼</li>\n</ul>\n</li>\n<li>\n<p>== 的使用情况,可参考</p>\n<ul><li>判断对象的属性是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};\n    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){\n        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span>\n    }</code></pre>\n<ul><li>判断函数的参数是否存在</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{\n        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){\n            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span>\n        }\n    }</code></pre>\n</li>\n</ul>\n<h3 id=\"articleHeader7\">如何理解JSON？</h3>\n<ul>\n<li>\n<p>从纯JS的角度看，JSON就是对象，并且只有两个API</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span>\n   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">'{\"a\":10,\"b\":30}'</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre>\n</li>\n<li>JSON也是一种轻量级的文本数据交换格式.</li>\n</ul>\n<h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3>\n<ul>\n<li>Object</li>\n<li>Array</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>Function</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n<h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3>\n<ul>\n<li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li>\n<li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li>\n</ul>\n<h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3>\n<p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/...</a></p>\n<h3 id=\"articleHeader12\">实现数组的随机排序</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {\n      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;\n   });\n</code></pre>\n<p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>\n    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span>\n   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;\n    <span class=\"hljs-keyword\">while</span> (i)\n    {\n        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre>\n<h1 id=\"articleHeader13\">原型和原型链</h1>\n<h3 id=\"articleHeader14\">什么叫原型链</h3>\n<p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p>\n<h3 id=\"articleHeader15\">原型规则</h3>\n<ol>\n<li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li>\n<li>所有的引用类型（数组，对象，函数），都有一个__proto__属性，也可以称为隐式原型，属性值是一个普通的对象</li>\n<li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li>\n<li>所有的引用类型（数组，对象，函数），__proto__属性值指向它的构造函数的prototype属性值</li>\n<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的__proto__中去找。</li>\n</ol>\n<p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p>\n<h3 id=\"articleHeader16\">构造函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.age = age;\n}\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">25</span>);\n<span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'h1'</span>,<span class=\"hljs-number\">250</span>);\n<span class=\"hljs-built_in\">console</span>.log(foo,foo2);\n\n<span class=\"hljs-comment\">//循环对象自身的属性</span>\n<span class=\"hljs-keyword\">var</span> item;\n<span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)\n{\n    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span>\n    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))\n    {\n        <span class=\"hljs-built_in\">console</span>.log(item)\n    }\n\n}\n</code></pre>\n<h3 id=\"articleHeader17\">描述new一个对象的过程</h3>\n<ol>\n<li>创建一个对象</li>\n<li>this指向这个新对象</li>\n<li>执行代码，即对this赋值</li>\n<li>return this。 默认有return，不用写</li>\n</ol>\n<h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span>\n<span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre>\n<h3 id=\"articleHeader19\">写一个原型继承的例子</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{\n    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);\n}\n\nElem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    <span class=\"hljs-keyword\">if</span>(val){\n        dom.innerHTML = val;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span>\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">return</span> dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;\n    dom.addEventListener( type , fn);\n\n}\n<span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">'h1'</span>);\nh1.html(<span class=\"hljs-string\">\"你被修改了\"</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)\n})\n</code></pre>\n<h1 id=\"articleHeader20\">作用域和闭包</h1>\n<h3 id=\"articleHeader21\">什么叫作用域？</h3>\n<p>`作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域<br>全局作用域》函数作用域》内层函数的作用域<br>作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。<br>`</p>\n<h3 id=\"articleHeader22\">变量提升的理解</h3>\n<ul>\n<li>变量定义</li>\n<li>函数声明（注意和函数表达式的区别）</li>\n<li>预解析</li>\n</ul>\n<h3 id=\"articleHeader23\">this的使用场景</h3>\n<p>注意：this要在执行时才能确认值，定义时无法确认</p>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li>call apply bind</li>\n</ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n }\n\nf1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, [<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>]);\nf1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">'我是this'</span>}, <span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>);\n\n\n<span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span>\n<span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(name,age)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span>\n}.bind(<span class=\"hljs-string\">'我是被绑定的this'</span>)\n\nf1(<span class=\"hljs-string\">\"seek\"</span>,<span class=\"hljs-number\">20</span>)\n</code></pre>\n<h3 id=\"articleHeader24\">闭包</h3>\n<p>`当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，<br>如果返回的这个函数在外部被执行，就产生了闭包。<br>表现形式：使函数外部能够调用函数内部定义的变量。`</p>\n<ul><li>\n<p>闭包的使用场景</p>\n<ol>\n<li>\n<p>函数作为返回值</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span>\n    }\n}\n<span class=\"hljs-keyword\">var</span> f1 =  fn();\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;\nf1(); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n<li>\n<p>函数作为参数来传递</p>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(a);\n        }\n}\n<span class=\"hljs-keyword\">var</span> fn1 = fn();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;\n    fn();\n}\nfn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre>\n</li>\n</ol>\n</li></ul>\n<h3 id=\"articleHeader25\">如何理解作用域？</h3>\n<ul>\n<li>自由变量</li>\n<li>作用域链，即自由变量的查找</li>\n<li>闭包的两个场景</li>\n</ul>\n<h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;\n<span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){\n    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"a\"</span>);\n    str.innerHTML = a + <span class=\"hljs-string\">\"点我\"</span> + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>;\n\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);\n\n    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{\n        str.addEventListener(<span class=\"hljs-string\">\"click\"</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n            e.preventDefault();\n            <span class=\"hljs-built_in\">console</span>.log(a)\n        })\n    })(a)\n}</code></pre>\n<h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3>\n<p>同步是阻塞模式，异步是非阻塞模式。</p>\n<ul>\n<li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li>\n<li>同步：必须等待操作做完，才返回结果.</li>\n</ul>\n<h3 id=\"articleHeader28\">数组API</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre>\n<ul><li>forEach 遍历所有元素</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span>\n        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span>\n\n    })</code></pre>\n<ul><li>every 判断所有元素是否都符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    })\n  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre>\n<ul><li>some 判断是否有至少一个元素符合条件</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)\n        {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre>\n<ul><li>sort 排序</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{\n          <span class=\"hljs-comment\">// return a-b; //正序</span>\n          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span>\n        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span>\n\n      })\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre>\n<ul><li>map 对元素重新组装，生成新数组</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考\n var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;h1&gt;'</span> + item + <span class=\"hljs-string\">'&lt;/h1&gt;'</span>;\n      })\nconsole.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">\"&lt;h1&gt;2&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;3&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;9&lt;/h1&gt;\"</span>, <span class=\"hljs-string\">\"&lt;h1&gt;0&lt;/h1&gt;\"</span>]</code></pre>\n<ul><li>filter 过滤符合条件的元素,较为常用</li></ul>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n      })\n<span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre>\n<h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (!dt) {\n            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span>\n            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n        }\n\n        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();\n        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> day = dt.getDate();\n\n        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {\n            month = <span class=\"hljs-string\">'0'</span> + month;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {\n            day = <span class=\"hljs-string\">'0'</span> + day;\n        }\n\n        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">'-'</span> + month + <span class=\"hljs-string\">'-'</span> + day;\n    }\n\n    <span class=\"hljs-keyword\">var</span> date = formatDate();\n    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span>\n</code></pre>\n<h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">'0'</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况\n    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre>\n<h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)\n</span>{\n        <span class=\"hljs-comment\">//数组处理</span>\n        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)\n        {\n          info.forEach(fn)\n        }<span class=\"hljs-keyword\">else</span>{\n           <span class=\"hljs-comment\">//对象处理</span>\n           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n<span class=\"hljs-comment\">//使用方法</span>\n  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">'我是x'</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">'我是y'</span>};\n   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span>\n  })\n\n\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];\n  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span>\n  })\n</code></pre>\n<h1 id=\"articleHeader32\">Web_API</h1>\n<h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3>\n<div class=\"widget-codetool\" style=\"display: none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{\n           elem.addEventListener( type ,fn)\n }\n <span class=\"hljs-comment\">//使用方法</span>\n bindEvent(id,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(e)\n })\n\n bindEvent(a,<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span>\n })</code></pre>\n<h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//使用代理，由父级帮忙去做\n\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == &quot;A&quot;){\n        alert(e.target.innerHTML)\n    }\n})\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做\n\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div1\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 动态加载更多 --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\ndiv1.addEventListener('click', function(e){\n    if (e.target.nodeName == \"A\"){\n        alert(e.target.innerHTML)\n    }\n})</code></pre>\n<h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//HTML结构\n <div id=&quot;div1&quot;>\n    <a href=&quot;#&quot;>a1</a>\n    <a href=&quot;#&quot;>a2</a>\n    <span>ddd</span>\n    <a href=&quot;#&quot;>a5</a>\n    <!-- 动态加载更多 -->\n</div>\n\n<div id=&quot;div2&quot;>不使用代理</div>\n\n//\nfunction bindEvent(elem,type,selector, fn){\n    if(fn == null){\n        fn=selector;\n        selector =null;\n    }\n    elem.addEventListener( type ,function(e){\n        var target;\n        if(selector){\n            target = e.target;\n            //matches() 方法用于检测字符串是否匹配给定的正则表达式。\n            if(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }else{\n            fn.call(e);\n        }\n    })\n}\n\n//使用代理\nbindEvent(div1,'click','a',function(e){\n    console.log(this)\n})\n//不使用代理\nbindEvent(div2,'click',function(e){\n    //call改变了this指向为e\n    console.log(this.toElement.innerHTML)\n})\n\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span>\n &lt;div id=<span class=\"hljs-string\">\"div1\"</span>&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a1&lt;/a&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a2&lt;/a&gt;\n    &lt;span&gt;ddd&lt;/span&gt;\n    &lt;a href=<span class=\"hljs-string\">\"#\"</span>&gt;a5&lt;/a&gt;\n    &lt;!-- 动态加载更多 --&gt;\n&lt;/div&gt;\n\n&lt;div id=<span class=\"hljs-string\">\"div2\"</span>&gt;不使用代理&lt;/div&gt;\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){\n        fn=selector;\n        selector =<span class=\"hljs-literal\">null</span>;\n    }\n    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n        <span class=\"hljs-keyword\">var</span> target;\n        <span class=\"hljs-keyword\">if</span>(selector){\n            target = e.target;\n            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span>\n            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){\n                fn.call(target,e);\n            }\n        }<span class=\"hljs-keyword\">else</span>{\n            fn.call(e);\n        }\n    })\n}\n\n<span class=\"hljs-comment\">//使用代理</span>\nbindEvent(div1,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    console.log(<span class=\"hljs-keyword\">this</span>)\n})\n<span class=\"hljs-comment\">//不使用代理</span>\nbindEvent(div2,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{\n    <span class=\"hljs-comment\">//call改变了this指向为e</span>\n    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)\n})\n</code></pre>\n<h3 id=\"articleHeader36\">可以跨域的三个标签</h3>\n<div class=\"widget-codetool\" style=\"display:none;\">\n      <div class=\"widget-codetool--inner\">\n      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"\" data-original-title=\"全选\"></span>\n      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title=\"\" data-original-title=\"复制\"></span>\n      </div>\n      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //用于打点统计\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"\"</span>&gt;</span> //使用CDN\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre>\n<h1 id=\"articleHeader37\">3月10日面试</h1>\n<h3 id=\"articleHeader38\">闭包的优缺点</h3>\n<p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p>\n<ul>\n<li>\n<p>优点：</p>\n<ol>\n<li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li>\n<li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol>\n</li>\n</ul>\n<h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3>\n<h3 id=\"articleHeader40\">http请求缓存头详解</h3>\n<ol>\n<li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li>\n<li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li>\n<li>\n<p>Cache-Control: http1.1推出，指文件缓存的有效期。</p>\n<ul>\n<li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li>\n<li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li>\n<li>private:仅单用户私有，不被多用户共享</li>\n<li>no-cache:不会被缓存。</li>\n<li>no-store:不允许被存储</li>\n</ul>\n</li>\n<li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li>\n</ol>\n\n</div>\n\n\n尊重原著:文章转载于@[史燕斌](https://segmentfault.com/a/1190000018628100).\n","slug":"coding-5","published":1,"date":"2019-03-29T09:43:21.353Z","updated":"2019-03-29T09:43:21.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw66482n000lchc5uk4mpluo","content":"<p>websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种</p>\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license><br><br><h1 id=\"articleHeader0\">websocket</h1><br><p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p><br><h3 id=\"articleHeader1\">websocket 和http区别？</h3><br><ul><br><li><br><p>相同点</p><br><ul><br><li>都是应用层的协议</li><br><li>都是基于tcp,可靠的协议</li><br></ul><br></li><br><li><br><p>不同点</p><br><ul><br><li>websocket是持久化的协议.</li><br><li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li><br><li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3><br><ul><br><li>相同点：都存储在客户端</li><br><li><br><p>不同点</p><br><ol><br><li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><br><li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li><br><li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li><br></ol><br></li><br></ul><br><h3 id=\"articleHeader3\">JS的类型？</h3><br><ul><br><li><br><p>基本类型</p><br><ul><br><li>undefined</li><br><li>null</li><br><li>Number</li><br><li>String</li><br><li>Boolean</li><br></ul><br></li><br><li><br><p>复杂类型</p><br><ul><li>Object</li></ul><br></li><br></ul><br><h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3><br><ul><br><li><br><p>值类型：</p><br><ul><br><li>undefined string number Boolean</li><br><li>拷贝形式,</li><br></ul><br></li><br><li><br><p>引用类型：</p><br><ul><br><li>array , function</li><br><li>指针指向，共用空间</li><br><li>可无限扩展属性，极大节省命名空间。</li><br></ul><br></li><br><li><br><p>特殊引用类型：function</p><br><ul><br><li>同引用类型↑</li><br><li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3><br><ul><br><li>number</li><br><li>string</li><br><li>undefined</li><br><li>object :  null和数组 都是object</li><br><li>function</li><br><li>boolean</li><br></ul><br><p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre><br><p>function是一个比较特殊的类型，所以typeof能够区分</p><br><h3 id=\"articleHeader6\">何时使用===何时使用==？</h3><br><ul><br><li><br><p>尽可能使用 === 原因如下</p><br><ul><br><li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li><br><li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li><br><li>== 会进行类型转换，很容易懵逼</li><br></ul><br></li><br><li><br><p>== 的使用情况,可参考</p><br><ul><li>判断对象的属性是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};<br>    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){<br>        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span><br>    }</code></pre><br><ul><li>判断函数的参数是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{<br>        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){<br>            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span><br>        }<br>    }</code></pre><br></li><br></ul><br><h3 id=\"articleHeader7\">如何理解JSON？</h3><br><ul><br><li><br><p>从纯JS的角度看，JSON就是对象，并且只有两个API</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span><br>   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">‘{“a”:10,”b”:30}’</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre><br></li><br><li>JSON也是一种轻量级的文本数据交换格式.</li><br></ul><br><h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3><br><ul><br><li>Object</li><br><li>Array</li><br><li>Boolean</li><br><li>Number</li><br><li>String</li><br><li>Function</li><br><li>Date</li><br><li>RegExp</li><br><li>Error</li><br></ul><br><h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3><br><ul><br><li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li><br><li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li><br></ul><br><h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3><br><p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/…</a></p><br><h3 id=\"articleHeader12\">实现数组的随机排序</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现<br> arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {<br>      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;<br>   });<br></code></pre><br><p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><br>    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span><br>   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;<br>    <span class=\"hljs-keyword\">while</span> (i)<br>    {<br>        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i–);<br>        t= arr[i];<br>        arr[i] = arr[j];<br>        arr[j]= t;<br>    }<br>}<br>shuffle(arr)<br><span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre><br><h1 id=\"articleHeader13\">原型和原型链</h1><br><h3 id=\"articleHeader14\">什么叫原型链</h3><br><p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p><br><h3 id=\"articleHeader15\">原型规则</h3><br><ol><br><li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li><br><li>所有的引用类型（数组，对象，函数），都有一个<strong>proto</strong>属性，也可以称为隐式原型，属性值是一个普通的对象</li><br><li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li><br><li>所有的引用类型（数组，对象，函数），<strong>proto</strong>属性值指向它的构造函数的prototype属性值</li><br><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>中去找。</li><br></ol><br><p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p><br><h3 id=\"articleHeader16\">构造函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>    <span class=\"hljs-keyword\">this</span>.age = age;<br>}<br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">25</span>);<br><span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">250</span>);<br><span class=\"hljs-built_in\">console</span>.log(foo,foo2);<br><br><span class=\"hljs-comment\">//循环对象自身的属性</span><br><span class=\"hljs-keyword\">var</span> item;<br><span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)<br>{<br>    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span><br>    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))<br>    {<br>        <span class=\"hljs-built_in\">console</span>.log(item)<br>    }<br><br>}<br></code></pre><br><h3 id=\"articleHeader17\">描述new一个对象的过程</h3><br><ol><br><li>创建一个对象</li><br><li>this指向这个新对象</li><br><li>执行代码，即对this赋值</li><br><li>return this。 默认有return，不用写</li><br></ol><br><h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span><br><br><span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span><br><span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader19\">写一个原型继承的例子</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);<br>}<br><br>Elem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    <span class=\"hljs-keyword\">if</span>(val){<br>        dom.innerHTML = val;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span><br>    }<span class=\"hljs-keyword\">else</span>{<br>        <span class=\"hljs-keyword\">return</span> dom.innerHTML;<br><br>    }<br>}<br><br>Elem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    dom.addEventListener( type , fn);<br><br>}<br><span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">‘h1’</span>);<br>h1.html(<span class=\"hljs-string\">“你被修改了”</span>).on(<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)<br>})<br></code></pre><br><h1 id=\"articleHeader20\">作用域和闭包</h1><br><h3 id=\"articleHeader21\">什么叫作用域？</h3><br><p><code>作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域&lt;br&gt;全局作用域》函数作用域》内层函数的作用域&lt;br&gt;作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。&lt;br&gt;</code></p><br><h3 id=\"articleHeader22\">变量提升的理解</h3><br><ul><br><li>变量定义</li><br><li>函数声明（注意和函数表达式的区别）</li><br><li>预解析</li><br></ul><br><h3 id=\"articleHeader23\">this的使用场景</h3><br><p>注意：this要在执行时才能确认值，定义时无法确认</p><br><ul><br><li>作为构造函数执行</li><br><li>作为对象属性执行</li><br><li>作为普通函数执行</li><br><li>call apply bind</li><br></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br> }<br><br>f1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, [<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>]);<br>f1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, <span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>);<br><br><br><span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span><br><span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br>}.bind(<span class=\"hljs-string\">‘我是被绑定的this’</span>)<br><br>f1(<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>)<br></code></pre><br><h3 id=\"articleHeader24\">闭包</h3><br><p><code>当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，&lt;br&gt;如果返回的这个函数在外部被执行，就产生了闭包。&lt;br&gt;表现形式：使函数外部能够调用函数内部定义的变量。</code></p><br><ul><li><br><p>闭包的使用场景</p><br><ol><br><li><br><p>函数作为返回值</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span><br>    }<br>}<br><span class=\"hljs-keyword\">var</span> f1 =  fn();<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;<br>f1(); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br><li><br><p>函数作为参数来传递</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a);<br>        }<br>}<br><span class=\"hljs-keyword\">var</span> fn1 = fn();<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;<br>    fn();<br>}<br>fn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br></ol><br></li></ul><br><h3 id=\"articleHeader25\">如何理解作用域？</h3><br><ul><br><li>自由变量</li><br><li>作用域链，即自由变量的查找</li><br><li>闭包的两个场景</li><br></ul><br><h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;<br><span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){<br>    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">“a”</span>);<br>    str.innerHTML = a + <span class=\"hljs-string\">“点我”</span> + <span class=\"hljs-string\">“&lt;br/&gt;”</span>;<br><br>    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);<br><br>    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{<br>        str.addEventListener(<span class=\"hljs-string\">“click”</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>            e.preventDefault();<br>            <span class=\"hljs-built_in\">console</span>.log(a)<br>        })<br>    })(a)<br>}</code></pre><br><h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3><br><p>同步是阻塞模式，异步是非阻塞模式。</p><br><ul><br><li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li><br><li>同步：必须等待操作做完，才返回结果.</li><br></ul><br><h3 id=\"articleHeader28\">数组API</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre><br><ul><li>forEach 遍历所有元素</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span><br>        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span><br><br>    })</code></pre><br><ul><li>every 判断所有元素是否都符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>    })<br>  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre><br><ul><li>some 判断是否有至少一个元素符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre><br><ul><li>sort 排序</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{<br>          <span class=\"hljs-comment\">// return a-b; //正序</span><br>          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span><br>        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span><br><br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre><br><ul><li>map 对元素重新组装，生成新数组</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考<br> var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">‘&lt;h1&gt;’</span> + item + <span class=\"hljs-string\">‘&lt;/h1&gt;’</span>;<br>      })<br>console.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">“&lt;h1&gt;2&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;3&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;9&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;0&lt;/h1&gt;”</span>]</code></pre><br><ul><li>filter 过滤符合条件的元素,较为常用</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre><br><h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{<br>        <span class=\"hljs-keyword\">if</span> (!dt) {<br>            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span><br>            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>        }<br><br>        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();<br>        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">var</span> day = dt.getDate();<br><br>        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {<br>            month = <span class=\"hljs-string\">‘0’</span> + month;<br>        }<br><br>        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {<br>            day = <span class=\"hljs-string\">‘0’</span> + day;<br>        }<br><br>        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">‘-‘</span> + month + <span class=\"hljs-string\">‘-‘</span> + day;<br>    }<br><br>    <span class=\"hljs-keyword\">var</span> date = formatDate();<br>    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span><br></code></pre><br><h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">‘0’</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)<br>    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre><br><h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)<br></span>{<br>        <span class=\"hljs-comment\">//数组处理</span><br>        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)<br>        {<br>          info.forEach(fn)<br>        }<span class=\"hljs-keyword\">else</span>{<br>           <span class=\"hljs-comment\">//对象处理</span><br>           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){<br>              fn(key, obj[key])<br>            }<br>        }<br><br>}<br><br><span class=\"hljs-comment\">//使用方法</span><br>  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">‘我是x’</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">‘我是y’</span>};<br>   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span><br>  })<br><br><br>  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];<br>  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span><br>  })<br></code></pre><br><h1 id=\"articleHeader32\">Web_API</h1><br><h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{<br>           elem.addEventListener( type ,fn)<br> }<br> <span class=\"hljs-comment\">//使用方法</span><br> bindEvent(id,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(e)<br> })<br><br> bindEvent(a,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span><br> })</code></pre><br><h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//使用代理，由父级帮忙去做<br><br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == &quot;A&quot;){<br>        alert(e.target.innerHTML)<br>    }<br>})” title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做<p></p>\n<p> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">“div1”</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!– 动态加载更多 –&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></p>\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == “A”){<br>        alert(e.target.innerHTML)<br>    }<br>})</p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//HTML结构<br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<div id=\"&quot;div2&quot;\">不使用代理</div>\n\n<p>//<br>function bindEvent(elem,type,selector, fn){<br>    if(fn == null){<br>        fn=selector;<br>        selector =null;<br>    }<br>    elem.addEventListener( type ,function(e){<br>        var target;<br>        if(selector){<br>            target = e.target;<br>            //matches() 方法用于检测字符串是否匹配给定的正则表达式。<br>            if(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }else{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p>//使用代理<br>bindEvent(div1,’click’,’a’,function(e){<br>    console.log(this)<br>})<br>//不使用代理<br>bindEvent(div2,’click’,function(e){<br>    //call改变了this指向为e<br>    console.log(this.toElement.innerHTML)<br>})<br>“ title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span><br> &lt;div id=<span class=\"hljs-string\">“div1”</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a1&lt;/a&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a2&lt;/a&gt;<br>    &lt;span&gt;ddd&lt;/span&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a5&lt;/a&gt;<br>    &lt;!– 动态加载更多 –&gt;<br>&lt;/div&gt;<p></p>\n<p>&lt;div id=<span class=\"hljs-string\">“div2”</span>&gt;不使用代理&lt;/div&gt;</p>\n<p><span class=\"hljs-comment\">//</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{<br>    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){<br>        fn=selector;<br>        selector =<span class=\"hljs-literal\">null</span>;<br>    }<br>    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>        <span class=\"hljs-keyword\">var</span> target;<br>        <span class=\"hljs-keyword\">if</span>(selector){<br>            target = e.target;<br>            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span><br>            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }<span class=\"hljs-keyword\">else</span>{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p><span class=\"hljs-comment\">//使用代理</span><br>bindEvent(div1,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-string\">‘a’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    console.log(<span class=\"hljs-keyword\">this</span>)<br>})<br><span class=\"hljs-comment\">//不使用代理</span><br>bindEvent(div2,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    <span class=\"hljs-comment\">//call改变了this指向为e</span><br>    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)<br>})<br></p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader36\">可以跨域的三个标签</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">“”</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //用于打点统计<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">“stylesheet”</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //使用CDN<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre><br><h1 id=\"articleHeader37\">3月10日面试</h1><br><h3 id=\"articleHeader38\">闭包的优缺点</h3><br><p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p><br><ul><br><li><br><p>优点：</p><br><ol><br><li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li><br><li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li><br></ol><br></li><br><li><br><p>缺点</p><br><ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol><br></li><br></ul><br><h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3><br><h3 id=\"articleHeader40\">http请求缓存头详解</h3><br><ol><br><li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li><br><li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li><br><li><br><p>Cache-Control: http1.1推出，指文件缓存的有效期。</p><br><ul><br><li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li><br><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li><br><li>private:仅单用户私有，不被多用户共享</li><br><li>no-cache:不会被缓存。</li><br><li>no-store:不允许被存储</li><br></ul><br></li><br><li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li><br></ol><br><br></div>\n\n\n<p>尊重原著:文章转载于@<a href=\"https://segmentfault.com/a/1190000018628100\" target=\"_blank\" rel=\"noopener\">史燕斌</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种</p>\n<div class=\"article fmt article__content\" data-id=\"1190000018628100\" data-license><br><br><h1 id=\"articleHeader0\">websocket</h1><br><p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p><br><h3 id=\"articleHeader1\">websocket 和http区别？</h3><br><ul><br><li><br><p>相同点</p><br><ul><br><li>都是应用层的协议</li><br><li>都是基于tcp,可靠的协议</li><br></ul><br></li><br><li><br><p>不同点</p><br><ul><br><li>websocket是持久化的协议.</li><br><li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li><br><li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader2\">请描述一下cookie、sessionStorage和localStorage的区别？</h3><br><ul><br><li>相同点：都存储在客户端</li><br><li><br><p>不同点</p><br><ol><br><li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><br><li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li><br><li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li><br></ol><br></li><br></ul><br><h3 id=\"articleHeader3\">JS的类型？</h3><br><ul><br><li><br><p>基本类型</p><br><ul><br><li>undefined</li><br><li>null</li><br><li>Number</li><br><li>String</li><br><li>Boolean</li><br></ul><br></li><br><li><br><p>复杂类型</p><br><ul><li>Object</li></ul><br></li><br></ul><br><h3 id=\"articleHeader4\">js变量按照存储方式区分，有哪些类型，并表述其特点</h3><br><ul><br><li><br><p>值类型：</p><br><ul><br><li>undefined string number Boolean</li><br><li>拷贝形式,</li><br></ul><br></li><br><li><br><p>引用类型：</p><br><ul><br><li>array , function</li><br><li>指针指向，共用空间</li><br><li>可无限扩展属性，极大节省命名空间。</li><br></ul><br></li><br><li><br><p>特殊引用类型：function</p><br><ul><br><li>同引用类型↑</li><br><li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li><br></ul><br></li><br></ul><br><h3 id=\"articleHeader5\">JS中的typeof能得到的那些类型？ 6种</h3><br><ul><br><li>number</li><br><li>string</li><br><li>undefined</li><br><li>object :  null和数组 都是object</li><br><li>function</li><br><li>boolean</li><br></ul><br><p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" typeof {} //object\n typeof [] //object\n typeof null //object\n typeof console.log // function \" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code> <span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">//object</span><br> <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// function </span></code></pre><br><p>function是一个比较特殊的类型，所以typeof能够区分</p><br><h3 id=\"articleHeader6\">何时使用===何时使用==？</h3><br><ul><br><li><br><p>尽可能使用 === 原因如下</p><br><ul><br><li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li><br><li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li><br><li>== 会进行类型转换，很容易懵逼</li><br></ul><br></li><br><li><br><p>== 的使用情况,可参考</p><br><ul><li>判断对象的属性是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    var obj = {};\n    if( obj.a == null ){\n        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code>    <span class=\"hljs-keyword\">var</span> obj = {};<br>    <span class=\"hljs-keyword\">if</span>( obj.a == <span class=\"hljs-literal\">null</span> ){<br>        <span class=\"hljs-comment\">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span><br>    }</code></pre><br><ul><li>判断函数的参数是否存在</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"    function fn( a, b){\n        if( b == null ){\n            //这里相当于 b===null || b === undefined 的简写\n        }\n    }\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs actionscript\"><code>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">( a, b)</span></span>{<br>        <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-literal\">null</span> ){<br>            <span class=\"hljs-comment\">//这里相当于 b===null || b === undefined 的简写</span><br>        }<br>    }</code></pre><br></li><br></ul><br><h3 id=\"articleHeader7\">如何理解JSON？</h3><br><ul><br><li><br><p>从纯JS的角度看，JSON就是对象，并且只有两个API</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   JSON.stringify({a:10,b:30}) //将对象转为字符串\n   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code>   <span class=\"hljs-built_in\">JSON</span>.stringify({a:<span class=\"hljs-number\">10</span>,b:<span class=\"hljs-number\">30</span>}) <span class=\"hljs-comment\">//将对象转为字符串</span><br>   <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-string\">‘{“a”:10,”b”:30}’</span>) <span class=\"hljs-comment\">//将JSON格式的字符串转为 对象</span></code></pre><br></li><br><li>JSON也是一种轻量级的文本数据交换格式.</li><br></ul><br><h3 id=\"articleHeader8\">js中有哪些内置函数 9 种</h3><br><ul><br><li>Object</li><br><li>Array</li><br><li>Boolean</li><br><li>Number</li><br><li>String</li><br><li>Function</li><br><li>Date</li><br><li>RegExp</li><br><li>Error</li><br></ul><br><h3 id=\"articleHeader9\">判断一个变量会被当做 true 还是 false</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var a = 100; console.log( !!a ); //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code style=\"word-break: break-word; white-space: initial;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-built_in\">console</span>.log( !!a ); <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader10\">window.onload和DOMContentLoaded的区别？</h3><br><ul><br><li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li><br><li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li><br></ul><br><h3 id=\"articleHeader11\">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3><br><p>可参看这篇博文：<a href=\"https://github.com/youngwind/blog/issues/98\" rel=\"nofollow noreferrer\" target=\"_blank\">https://github.com/youngwind/…</a></p><br><h3 id=\"articleHeader12\">实现数组的随机排序</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现\n arr.sort(function () {\n      return Math.random() - 0.5;\n   });\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现<br> arr.<span class=\"hljs-built_in\">sort</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span> {<br>      <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">random</span>() - <span class=\"hljs-number\">0.5</span>;<br>   });<br></code></pre><br><p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"\n    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。\n   var arr = [5,8,59,56];\n   function shuffle(arr) {\n    var i = arr.length, t, j;\n    while (i)\n    {\n        j = Math.floor(Math.random() * i--);\n        t= arr[i];\n        arr[i] = arr[j];\n        arr[j]= t;\n    }\n}\nshuffle(arr)\nconsole.log(arr);//[56, 8, 5, 59]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><br>    <span class=\"hljs-comment\">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span><br>   <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">59</span>,<span class=\"hljs-number\">56</span>];<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">arr</span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> i = arr.length, t, j;<br>    <span class=\"hljs-keyword\">while</span> (i)<br>    {<br>        j = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * i–);<br>        t= arr[i];<br>        arr[i] = arr[j];<br>        arr[j]= t;<br>    }<br>}<br>shuffle(arr)<br><span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[56, 8, 5, 59]</span></code></pre><br><h1 id=\"articleHeader13\">原型和原型链</h1><br><h3 id=\"articleHeader14\">什么叫原型链</h3><br><p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p><br><h3 id=\"articleHeader15\">原型规则</h3><br><ol><br><li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li><br><li>所有的引用类型（数组，对象，函数），都有一个<strong>proto</strong>属性，也可以称为隐式原型，属性值是一个普通的对象</li><br><li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li><br><li>所有的引用类型（数组，对象，函数），<strong>proto</strong>属性值指向它的构造函数的prototype属性值</li><br><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>中去找。</li><br></ol><br><p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p><br><h3 id=\"articleHeader16\">构造函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Foo(name,age){\n    this.name = name;\n    this.age = age;\n}\nvar foo = new Foo('h1',25);\nvar foo2 = new Foo('h1',250);\nconsole.log(foo,foo2);\n\n//循环对象自身的属性\nvar item;\nfor( item in foo)\n{\n    //只遍历对象自身的属性，过滤掉该对象的显式原型\n    if(foo.hasOwnProperty(item))\n    {\n        console.log(item)\n    }\n\n}\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>    <span class=\"hljs-keyword\">this</span>.age = age;<br>}<br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">25</span>);<br><span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">‘h1’</span>,<span class=\"hljs-number\">250</span>);<br><span class=\"hljs-built_in\">console</span>.log(foo,foo2);<br><br><span class=\"hljs-comment\">//循环对象自身的属性</span><br><span class=\"hljs-keyword\">var</span> item;<br><span class=\"hljs-keyword\">for</span>( item <span class=\"hljs-keyword\">in</span> foo)<br>{<br>    <span class=\"hljs-comment\">//只遍历对象自身的属性，过滤掉该对象的显式原型</span><br>    <span class=\"hljs-keyword\">if</span>(foo.hasOwnProperty(item))<br>    {<br>        <span class=\"hljs-built_in\">console</span>.log(item)<br>    }<br><br>}<br></code></pre><br><h3 id=\"articleHeader17\">描述new一个对象的过程</h3><br><ol><br><li>创建一个对象</li><br><li>this指向这个新对象</li><br><li>执行代码，即对this赋值</li><br><li>return this。 默认有return，不用写</li><br></ol><br><h3 id=\"articleHeader18\">如何判断一个变量是数组类型</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var arr = [1,2,3];\nconsole.log(Array.isArray(arr)); //true\n\n//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置\nconsole.log( arr instanceof Array) //true\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs typescript\"><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.isArray(arr)); <span class=\"hljs-comment\">//true</span><br><br><span class=\"hljs-comment\">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span><br><span class=\"hljs-built_in\">console</span>.log( arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) <span class=\"hljs-comment\">//true</span></code></pre><br><h3 id=\"articleHeader19\">写一个原型继承的例子</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function Elem(id){\n    this.dom = document.getElementById(id);\n}\n\nElem.prototype.html = function(val){\n    var dom = this.dom;\n    if(val){\n        dom.innerHTML = val;\n        return this; //用来链式调用\n    }else{\n        return dom.innerHTML;\n\n    }\n}\n\nElem.prototype.on = function(type ,fn){\n    var dom = this.dom;\n    dom.addEventListener( type , fn);\n\n}\nvar h1 = new Elem('h1');\nh1.html(&quot;你被修改了&quot;).on('click', function(){\n    console.log(this)\n})\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Elem</span>(<span class=\"hljs-params\">id</span>)</span>{<br>    <span class=\"hljs-keyword\">this</span>.dom = <span class=\"hljs-built_in\">document</span>.getElementById(id);<br>}<br><br>Elem.prototype.html = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    <span class=\"hljs-keyword\">if</span>(val){<br>        dom.innerHTML = val;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; <span class=\"hljs-comment\">//用来链式调用</span><br>    }<span class=\"hljs-keyword\">else</span>{<br>        <span class=\"hljs-keyword\">return</span> dom.innerHTML;<br><br>    }<br>}<br><br>Elem.prototype.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type ,fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-keyword\">this</span>.dom;<br>    dom.addEventListener( type , fn);<br><br>}<br><span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-keyword\">new</span> Elem(<span class=\"hljs-string\">‘h1’</span>);<br>h1.html(<span class=\"hljs-string\">“你被修改了”</span>).on(<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)<br>})<br></code></pre><br><h1 id=\"articleHeader20\">作用域和闭包</h1><br><h3 id=\"articleHeader21\">什么叫作用域？</h3><br><p><code>作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域&lt;br&gt;全局作用域》函数作用域》内层函数的作用域&lt;br&gt;作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。&lt;br&gt;</code></p><br><h3 id=\"articleHeader22\">变量提升的理解</h3><br><ul><br><li>变量定义</li><br><li>函数声明（注意和函数表达式的区别）</li><br><li>预解析</li><br></ul><br><h3 id=\"articleHeader23\">this的使用场景</h3><br><p>注意：this要在执行时才能确认值，定义时无法确认</p><br><ul><br><li>作为构造函数执行</li><br><li>作为对象属性执行</li><br><li>作为普通函数执行</li><br><li>call apply bind</li><br></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function f1(name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n }\n\nf1.apply({x:'我是this'}, [&quot;seek&quot;,20]);\nf1.call({x:'我是this'}, &quot;seek&quot;,20);\n\n\n//使用bind改变this时，需用函数表达式\nvar f1 = function (name,age){\n    console.log(name,age)\n    console.log(this); //this为x对象\n}.bind('我是被绑定的this')\n\nf1(&quot;seek&quot;,20)\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br> }<br><br>f1.apply({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, [<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>]);<br>f1.call({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-string\">‘我是this’</span>}, <span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>);<br><br><br><span class=\"hljs-comment\">//使用bind改变this时，需用函数表达式</span><br><span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name,age</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(name,age)<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>); <span class=\"hljs-comment\">//this为x对象</span><br>}.bind(<span class=\"hljs-string\">‘我是被绑定的this’</span>)<br><br>f1(<span class=\"hljs-string\">“seek”</span>,<span class=\"hljs-number\">20</span>)<br></code></pre><br><h3 id=\"articleHeader24\">闭包</h3><br><p><code>当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，&lt;br&gt;如果返回的这个函数在外部被执行，就产生了闭包。&lt;br&gt;表现形式：使函数外部能够调用函数内部定义的变量。</code></p><br><ul><li><br><p>闭包的使用场景</p><br><ol><br><li><br><p>函数作为返回值</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function fn(){\n    var a = 10;\n    return function(){\n        console.log(a); //a是自由变量，从父作用域开始找。\n    }\n}\nvar f1 =  fn();\nvar a = 20;\nf1(); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//a是自由变量，从父作用域开始找。</span><br>    }<br>}<br><span class=\"hljs-keyword\">var</span> f1 =  fn();<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">20</span>;<br>f1(); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br><li><br><p>函数作为参数来传递</p><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function fn(){\n    var a = 10;\n    return function(){\n        console.log(a);\n        }\n}\nvar fn1 = fn();\n\nfunction fn2(fn){\n    var a =20;\n    fn();\n}\nfn2(fn1); //10\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(a);<br>        }<br>}<br><span class=\"hljs-keyword\">var</span> fn1 = fn();<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">fn</span>)</span>{<br>    <span class=\"hljs-keyword\">var</span> a =<span class=\"hljs-number\">20</span>;<br>    fn();<br>}<br>fn2(fn1); <span class=\"hljs-comment\">//10</span></code></pre><br></li><br></ol><br></li></ul><br><h3 id=\"articleHeader25\">如何理解作用域？</h3><br><ul><br><li>自由变量</li><br><li>作用域链，即自由变量的查找</li><br><li>闭包的两个场景</li><br></ul><br><h3 id=\"articleHeader26\">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var str,a;\nfor( a=0; a<10;a++){\n    str = document.createElement(&quot;a&quot;);\n    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;\n\n    document.body.appendChild(str);\n\n    (function(a){\n        str.addEventListener(&quot;click&quot;,function(e){\n            e.preventDefault();\n            console.log(a)\n        })\n    })(a)\n}\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> str,a;<br><span class=\"hljs-keyword\">for</span>( a=<span class=\"hljs-number\">0</span>; a&lt;<span class=\"hljs-number\">10</span>;a++){<br>    str = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">“a”</span>);<br>    str.innerHTML = a + <span class=\"hljs-string\">“点我”</span> + <span class=\"hljs-string\">“&lt;br/&gt;”</span>;<br><br>    <span class=\"hljs-built_in\">document</span>.body.appendChild(str);<br><br>    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{<br>        str.addEventListener(<span class=\"hljs-string\">“click”</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>            e.preventDefault();<br>            <span class=\"hljs-built_in\">console</span>.log(a)<br>        })<br>    })(a)<br>}</code></pre><br><h3 id=\"articleHeader27\">什么叫异步,什么叫同步？</h3><br><p>同步是阻塞模式，异步是非阻塞模式。</p><br><ul><br><li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li><br><li>同步：必须等待操作做完，才返回结果.</li><br></ul><br><h3 id=\"articleHeader28\">数组API</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var arr= [2,3,9,0];\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs scala\"><code style=\"word-break: break-word; white-space: initial;\"> <span class=\"hljs-keyword\">var</span> arr= [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>];</code></pre><br><ul><li>forEach 遍历所有元素</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  arr.forEach(function(item,index){\n        console.log(item) // 2390\n        console.log(index) //0123\n\n    })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// 2390</span><br>        <span class=\"hljs-built_in\">console</span>.log(index) <span class=\"hljs-comment\">//0123</span><br><br>    })</code></pre><br><ul><li>every 判断所有元素是否都符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"  var result = arr.every(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n    })\n  console.log(result); //false， 因为9并不小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>  <span class=\"hljs-keyword\">var</span> result = arr.every(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>    })<br>  <span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//false， 因为9并不小于4</span></code></pre><br><ul><li>some 判断是否有至少一个元素符合条件</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.some(function(item,index){\n        if(item < 4)\n        {\n          return true;\n        }\n      })\nconsole.log(result); //true 因为2,3,0小于4\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>        <span class=\"hljs-keyword\">if</span>(item &lt; <span class=\"hljs-number\">4</span>)<br>        {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">//true 因为2,3,0小于4</span></code></pre><br><ul><li>sort 排序</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var result =  arr.sort(function(a,b){\n          // return a-b; //正序\n          return b-a; // 倒序\n        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐\n\n      })\nconsole.log(result); // &nbsp;[9, 3, 2, 0]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> result =  arr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a,b</span>)</span>{<br>          <span class=\"hljs-comment\">// return a-b; //正序</span><br>          <span class=\"hljs-keyword\">return</span> b-a; <span class=\"hljs-comment\">// 倒序</span><br>        <span class=\"hljs-comment\">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span><br><br>      })<br><span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// &nbsp;[9, 3, 2, 0]</span></code></pre><br><ul><li>map 对元素重新组装，生成新数组</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"//map适用范围还是较广的，学会思考\n var result =  arr.map(function(item,index){\n            return '<h1>' + item + '</h1>';\n      })\nconsole.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code>//map适用范围还是较广的，学会思考<br> var result =  arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item,index)</span></span>{<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">‘&lt;h1&gt;’</span> + item + <span class=\"hljs-string\">‘&lt;/h1&gt;’</span>;<br>      })<br>console.<span class=\"hljs-built_in\">log</span>(result);   //  [<span class=\"hljs-string\">“&lt;h1&gt;2&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;3&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;9&lt;/h1&gt;”</span>, <span class=\"hljs-string\">“&lt;h1&gt;0&lt;/h1&gt;”</span>]</code></pre><br><ul><li>filter 过滤符合条件的元素,较为常用</li></ul><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"var result =  arr.filter(function(item,index){\n            if(item >=3){\n              return true;\n            }\n      })\nconsole.log(result);   // [3, 9]\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result =  arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item,index</span>)</span>{<br>            <span class=\"hljs-keyword\">if</span>(item &gt;=<span class=\"hljs-number\">3</span>){<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            }<br>      })<br><span class=\"hljs-built_in\">console</span>.log(result);   <span class=\"hljs-comment\">// [3, 9]</span></code></pre><br><h3 id=\"articleHeader29\">获取 2019-03-23格式的日期</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"   function formatDate(dt) {\n        if (!dt) {\n            //如果不传参数，则默认为当前时间\n            dt = new Date();\n        }\n\n        var year = dt.getFullYear();\n        var month = dt.getMonth() + 1;\n        var day = dt.getDate();\n\n        if (month <= 10) {\n            month = '0' + month;\n        }\n\n        if (day <= 10) {\n            day = '0' + day;\n        }\n\n        return year + '-' + month + '-' + day;\n    }\n\n    var date = formatDate();\n    console.log(date); //2019-03-23\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">formatDate</span>(<span class=\"hljs-params\">dt</span>) </span>{<br>        <span class=\"hljs-keyword\">if</span> (!dt) {<br>            <span class=\"hljs-comment\">//如果不传参数，则默认为当前时间</span><br>            dt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>        }<br><br>        <span class=\"hljs-keyword\">var</span> year = dt.getFullYear();<br>        <span class=\"hljs-keyword\">var</span> month = dt.getMonth() + <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">var</span> day = dt.getDate();<br><br>        <span class=\"hljs-keyword\">if</span> (month &lt;= <span class=\"hljs-number\">10</span>) {<br>            month = <span class=\"hljs-string\">‘0’</span> + month;<br>        }<br><br>        <span class=\"hljs-keyword\">if</span> (day &lt;= <span class=\"hljs-number\">10</span>) {<br>            day = <span class=\"hljs-string\">‘0’</span> + day;<br>        }<br><br>        <span class=\"hljs-keyword\">return</span> year + <span class=\"hljs-string\">‘-‘</span> + month + <span class=\"hljs-string\">‘-‘</span> + day;<br>    }<br><br>    <span class=\"hljs-keyword\">var</span> date = formatDate();<br>    <span class=\"hljs-built_in\">console</span>.log(date); <span class=\"hljs-comment\">//2019-03-23</span><br></code></pre><br><h3 id=\"articleHeader30\">获取随机数，要求长度一致的字符串格式</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" var random = Math.random();\n    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况\n    random = random.slice(0,10)\n    console.log(random); //0.70728618  每次返回的只有10位数的字符串\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs lua\"><code> var <span class=\"hljs-built_in\">random</span> = Math.<span class=\"hljs-built_in\">random</span>();<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span> + <span class=\"hljs-string\">‘0’</span>.<span class=\"hljs-keyword\">repeat</span>(<span class=\"hljs-number\">10</span>); //<span class=\"hljs-keyword\">repeat</span> 重复<span class=\"hljs-number\">10</span>个<span class=\"hljs-number\">0</span>, 防止随机数出现少于<span class=\"hljs-number\">10</span>位数的情况<br>    <span class=\"hljs-built_in\">random</span> = <span class=\"hljs-built_in\">random</span>.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>)<br>    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">random</span>); //<span class=\"hljs-number\">0.70728618</span>  每次返回的只有<span class=\"hljs-number\">10</span>位数的字符串</code></pre><br><h3 id=\"articleHeader31\">写一个能遍历对象和数组的foreach函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"function foreach(info, fn)\n{\n        //数组处理\n        if(info instanceof Array)\n        {\n          info.forEach(fn)\n        }else{\n           //对象处理\n           for( key in obj){\n              fn(key, obj[key])\n            }\n        }\n\n}\n\n//使用方法\n  var obj = {x: '我是x',y: '我是y'};\n   foreach(obj, function(key,value){\n    console.log(value); //我是x,我是y\n  })\n\n\n  var arr = [5,8,9];\n  foreach(arr, function(elem,index){\n    console.log(elem);//5,8,9\n  })\n\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foreach</span>(<span class=\"hljs-params\">info, fn</span>)<br></span>{<br>        <span class=\"hljs-comment\">//数组处理</span><br>        <span class=\"hljs-keyword\">if</span>(info <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>)<br>        {<br>          info.forEach(fn)<br>        }<span class=\"hljs-keyword\">else</span>{<br>           <span class=\"hljs-comment\">//对象处理</span><br>           <span class=\"hljs-keyword\">for</span>( key <span class=\"hljs-keyword\">in</span> obj){<br>              fn(key, obj[key])<br>            }<br>        }<br><br>}<br><br><span class=\"hljs-comment\">//使用方法</span><br>  <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">‘我是x’</span>,<span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">‘我是y’</span>};<br>   foreach(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key,value</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">//我是x,我是y</span><br>  })<br><br><br>  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>];<br>  foreach(arr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">elem,index</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(elem);<span class=\"hljs-comment\">//5,8,9</span><br>  })<br></code></pre><br><h1 id=\"articleHeader32\">Web_API</h1><br><h3 id=\"articleHeader33\">编写一个通用的事件监听函数</h3><br><div class=\"widget-codetool\" style=\"display: none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\" function bindEvent(elem,type,fn){\n           elem.addEventListener( type ,fn)\n }\n //使用方法\n bindEvent(id,'click', function(e){\n    console.log(e)\n })\n\n bindEvent(a,'click', function(e){\n    e.preventDefault(); //阻止默认事件\n })\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem,type,fn</span>)</span>{<br>           elem.addEventListener( type ,fn)<br> }<br> <span class=\"hljs-comment\">//使用方法</span><br> bindEvent(id,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    <span class=\"hljs-built_in\">console</span>.log(e)<br> })<br><br> bindEvent(a,<span class=\"hljs-string\">‘click’</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{<br>    e.preventDefault(); <span class=\"hljs-comment\">//阻止默认事件</span><br> })</code></pre><br><h3 id=\"articleHeader34\">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3><br><div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//使用代理，由父级帮忙去做<br><br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == &quot;A&quot;){<br>        alert(e.target.innerHTML)<br>    }<br>})” title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs xml\"><code>//使用代理，由父级帮忙去做<p></p>\n<p> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">“div1”</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“#”</span>&gt;</span>a5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!– 动态加载更多 –&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></p>\n<p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == “A”){<br>        alert(e.target.innerHTML)<br>    }<br>})</p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader35\">完善通用绑定事件的函数，包括代理</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//HTML结构<br> <div id=\"&quot;div1&quot;\"><br>    <a href=\"&quot;#&quot;\">a1</a><br>    <a href=\"&quot;#&quot;\">a2</a><br>    <span>ddd</span><br>    <a href=\"&quot;#&quot;\">a5</a><br>    <!-- 动态加载更多 --><br></div>\n\n<div id=\"&quot;div2&quot;\">不使用代理</div>\n\n<p>//<br>function bindEvent(elem,type,selector, fn){<br>    if(fn == null){<br>        fn=selector;<br>        selector =null;<br>    }<br>    elem.addEventListener( type ,function(e){<br>        var target;<br>        if(selector){<br>            target = e.target;<br>            //matches() 方法用于检测字符串是否匹配给定的正则表达式。<br>            if(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }else{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p>//使用代理<br>bindEvent(div1,’click’,’a’,function(e){<br>    console.log(this)<br>})<br>//不使用代理<br>bindEvent(div2,’click’,function(e){<br>    //call改变了this指向为e<br>    console.log(this.toElement.innerHTML)<br>})<br>“ title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class=\"hljs actionscript\"><code><span class=\"hljs-comment\">//HTML结构</span><br> &lt;div id=<span class=\"hljs-string\">“div1”</span>&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a1&lt;/a&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a2&lt;/a&gt;<br>    &lt;span&gt;ddd&lt;/span&gt;<br>    &lt;a href=<span class=\"hljs-string\">“#”</span>&gt;a5&lt;/a&gt;<br>    &lt;!– 动态加载更多 –&gt;<br>&lt;/div&gt;<p></p>\n<p>&lt;div id=<span class=\"hljs-string\">“div2”</span>&gt;不使用代理&lt;/div&gt;</p>\n<p><span class=\"hljs-comment\">//</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span><span class=\"hljs-params\">(elem,type,selector, fn)</span></span>{<br>    <span class=\"hljs-keyword\">if</span>(fn == <span class=\"hljs-literal\">null</span>){<br>        fn=selector;<br>        selector =<span class=\"hljs-literal\">null</span>;<br>    }<br>    elem.addEventListener( type ,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>        <span class=\"hljs-keyword\">var</span> target;<br>        <span class=\"hljs-keyword\">if</span>(selector){<br>            target = e.target;<br>            <span class=\"hljs-comment\">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span><br>            <span class=\"hljs-keyword\">if</span>(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }<span class=\"hljs-keyword\">else</span>{<br>            fn.call(e);<br>        }<br>    })<br>}</p>\n<p><span class=\"hljs-comment\">//使用代理</span><br>bindEvent(div1,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-string\">‘a’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    console.log(<span class=\"hljs-keyword\">this</span>)<br>})<br><span class=\"hljs-comment\">//不使用代理</span><br>bindEvent(div2,<span class=\"hljs-string\">‘click’</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{<br>    <span class=\"hljs-comment\">//call改变了this指向为e</span><br>    console.log(<span class=\"hljs-keyword\">this</span>.toElement.innerHTML)<br>})<br></p></code></pre><p></p>\n<p></p><h3 id=\"articleHeader36\">可以跨域的三个标签</h3><p></p>\n<div class=\"widget-codetool\" style=\"display:none;\"><br>      <div class=\"widget-codetool--inner\"><br>      <span class=\"selectCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" title data-original-title=\"全选\"></span><br>      <span type=\"button\" class=\"copyCode code-tool\" data-toggle=\"tooltip\" data-placement=\"top\" data-clipboard-text=\"<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计\n<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN\n<script></script> // 使用JSONP\" title data-original-title=\"复制\"></span><br>      </div><br>      </div><pre class=\"hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">“”</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //用于打点统计<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">“stylesheet”</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">“”</span>&gt;</span> //使用CDN<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> // 使用JSONP</code></pre><br><h1 id=\"articleHeader37\">3月10日面试</h1><br><h3 id=\"articleHeader38\">闭包的优缺点</h3><br><p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p><br><ul><br><li><br><p>优点：</p><br><ol><br><li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li><br><li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li><br></ol><br></li><br><li><br><p>缺点</p><br><ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol><br></li><br></ul><br><h3 id=\"articleHeader39\">按需引入，模块引入的实现？</h3><br><h3 id=\"articleHeader40\">http请求缓存头详解</h3><br><ol><br><li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li><br><li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li><br><li><br><p>Cache-Control: http1.1推出，指文件缓存的有效期。</p><br><ul><br><li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li><br><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li><br><li>private:仅单用户私有，不被多用户共享</li><br><li>no-cache:不会被缓存。</li><br><li>no-store:不允许被存储</li><br></ul><br></li><br><li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li><br></ol><br><br></div>\n\n\n<p>尊重原著:文章转载于@<a href=\"https://segmentfault.com/a/1190000018628100\" target=\"_blank\" rel=\"noopener\">史燕斌</a>.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjw66480o0000chc58rtdjqft","category_id":"cjw66480u0002chc5lh87kzoo","_id":"cjw664810000achc5p996c1xu"},{"post_id":"cjw66480s0001chc5kjkopt6t","category_id":"cjw66480u0002chc5lh87kzoo","_id":"cjw664811000dchc5vsjjlirk"},{"post_id":"cjw66480w0004chc54u36n0z0","category_id":"cjw66480u0002chc5lh87kzoo","_id":"cjw664812000fchc5a3w7cj91"},{"post_id":"cjw66482j000gchc5x9kgfafv","category_id":"cjw66480u0002chc5lh87kzoo","_id":"cjw66482p000nchc5dspmm56s"},{"post_id":"cjw66482n000lchc5uk4mpluo","category_id":"cjw66480u0002chc5lh87kzoo","_id":"cjw66482r000rchc5sbyq644b"}],"PostTag":[{"post_id":"cjw66480o0000chc58rtdjqft","tag_id":"cjw66480w0003chc58kzotulb","_id":"cjw6648100008chc5psph2n23"},{"post_id":"cjw66480s0001chc5kjkopt6t","tag_id":"cjw66480y0007chc53oir7jcn","_id":"cjw664811000cchc5ia6bv738"},{"post_id":"cjw66480w0004chc54u36n0z0","tag_id":"cjw664811000bchc5jashv5r3","_id":"cjw664811000echc5cwh2s674"},{"post_id":"cjw66482j000gchc5x9kgfafv","tag_id":"cjw66482n000kchc5t1bqdvb6","_id":"cjw66482r000qchc5f0diaat9"},{"post_id":"cjw66482n000lchc5uk4mpluo","tag_id":"cjw66482q000pchc5w5lrp0nv","_id":"cjw66482s000schc54hm3qaa6"}],"Tag":[{"name":"CSS","_id":"cjw66480w0003chc58kzotulb"},{"name":"工具类","_id":"cjw66480y0007chc53oir7jcn"},{"name":"Vue","_id":"cjw664811000bchc5jashv5r3"},{"name":"数组","_id":"cjw66482n000kchc5t1bqdvb6"},{"name":"js","_id":"cjw66482q000pchc5w5lrp0nv"}]}}