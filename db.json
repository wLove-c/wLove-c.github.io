{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/custom.css","path":"libs/valine/custom.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1551152268671},{"_id":"themes/hexo-theme-matery/README.md","hash":"9a63ad948c0db34aa4789a82c8f843c8bd9f8fa5","modified":1551152268671},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a59bd7f914c41deee3aed87276309a0c755e76ac","modified":1551152268672},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"5496ac534ba345523c73470811635f91195a5ec1","modified":1551165171393},{"_id":"source/_posts/coding-1.md","hash":"c86ffd4048917fe20c96d34e00f4952b8574ad16","modified":1551152268667},{"_id":"source/_posts/coding-2.md","hash":"45a809c3165d24c57d9c8d78332c34ba8da67e9a","modified":1551152268668},{"_id":"source/_posts/coding-3.md","hash":"99f243077957b02abb98b16edc98acf92b92adaa","modified":1551173290710},{"_id":"source/_posts/hello-world.md","hash":"da522e680280ec80ad22e7441cff24dbb9f4b286","modified":1551152874923},{"_id":"source/_posts/coding-node.md","hash":"971bd581d7f7831479a60632849eb15078054d13","modified":1551258754652},{"_id":"source/about/index.md","hash":"9fc3bd9f39f35a58f67bccc1283e2af2ea7e6299","modified":1551152268669},{"_id":"source/categories/index.md","hash":"a60190a718314320f55b90f90318d1db9032ff48","modified":1551152268669},{"_id":"source/coding/index.md","hash":"ef71f3c0a5aecb8f3feaa12bd2fc013283cfa241","modified":1551152268670},{"_id":"source/tags/index.md","hash":"ec5895e154834c4bfb19e497706075c8db0edac7","modified":1551152268670},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9d8609d0213ca88c48b0a4dbcbc4ca2effdda1d7","modified":1551152268673},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"978718ecafe858d5a2357e72e12daea3326c26fa","modified":1551152268674},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"a5a1cbfefb44243027df242e46d1e55184e2fdc6","modified":1551165523464},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"c8459660e87a0a07a6e007a99a2303b142bb7744","modified":1551152268692},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1551152268692},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"95176564ea32e65ddc9fdbe9074332239d6a1305","modified":1551152268693},{"_id":"themes/hexo-theme-matery/layout/coding.ejs","hash":"6ccd10c996c291521c53296ab1894f162c02f7e9","modified":1551152268693},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"89c47cf1eb2cf1feb8a8d06f4eb7c76b713f79c0","modified":1551152268694},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"05730420fbbac114ac581b650707e7abc4bb247c","modified":1551152268694},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"7a9b00c764d1fde3139bed3a631bd49bdee6db6e","modified":1551152268694},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"9b794f8c3ab5925353162a92f3f74db4d57d640d","modified":1551160525520},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"ad1cc11ac2b99bd803276b28ae57340cdd5810c8","modified":1551152268695},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"7e34bd9811d8ea2f8f2ff8a477cb50ad813e88b8","modified":1551152268696},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"03602fcd3293db28e0d12cdf3948d854048e99dd","modified":1551152268697},{"_id":"themes/hexo-theme-matery/layout/_partial/about-cover.ejs","hash":"ff02fc607b21e25df12e9d89927b72dd1a533047","modified":1551152268674},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1551152268675},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-auto-push.ejs","hash":"7df46b0931bea16086c77edfdba6e8b60bad3297","modified":1551152268675},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"ba3425ca1c119afe4fd98711dcc6ea339a9f4a0b","modified":1551152268676},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1551152268676},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"83dec72dc54dbfc0ff86be73346d3e49eac2370e","modified":1551152268676},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"e4c5bf28ddc29519eee8debe79cce45bf279adeb","modified":1551152268677},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"e66e119f57bb9230395c70d67cd0f615927d3334","modified":1551153486967},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1551164225446},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"744f1cbdc9cb1af09bc320d4d47e5955c894f651","modified":1551153429400},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"c219688593f2c5771533ea8988ea1360227f6920","modified":1551161331186},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1551152268680},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"07420e6ecfd40048707d007bf465206eeff9d2a4","modified":1551161331189},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"f1c87edb91b595a978a1d1f4e26f3f06dc48ccec","modified":1551152268681},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1551152268681},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"202dfebd4ce1e2e647e0fcbf275b30820d16507c","modified":1551152268682},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"b7320ccb822f9969c58401a0bc946a8a7a1fea9c","modified":1551152268682},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"df803e3fef3ddac2dcaa866b35aae4513923cb1a","modified":1551163800019},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1551152268683},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"3f73f077b05b6bf41150b00f43870a41d3fa390f","modified":1551152268683},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"d545c74f26ec321ba7e942d469f354eadd57e407","modified":1551152268684},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c948aa82afc65f08f1c894b049d6899577536306","modified":1551152268684},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1551152268684},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"e913042aab1cd0a93d1ca49ea536dee1a9b9fc41","modified":1551165471571},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"6ac7b8ecea324ff49b06bf5c0c88fcb5f51a21b7","modified":1551163804086},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1551152268686},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1551152268686},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"c2f04b67721c36384e575994f3e66072843fc2bc","modified":1551152268687},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1551152268687},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1551152268687},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1551152268688},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1551152268688},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1551152268689},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1551152268689},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1551152268690},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1551152268690},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1551152268691},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1551152268691},{"_id":"themes/hexo-theme-matery/source/css/custom.css","hash":"8cf75bac824791d1d40e873c688b8b0973eab49f","modified":1551153709801},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1551152268696},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"8649839c43f71cf9b598a3728e14e229a955acbe","modified":1551164822300},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1551152268697},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"3eedb26fa1295f463aee179d4945eb650a1f441c","modified":1551152268698},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1551152268698},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"53a4fef6d21d6941bb2136d689a618044aadfabf","modified":1551152268739},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1551152268698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1551152268698},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1551152268699},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1551152268699},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1551152268699},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1551152268707},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1551152268707},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1551152268712},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1551152268713},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1551152268714},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1551152268714},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1551152268717},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1551152268737},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1551152268737},{"_id":"themes/hexo-theme-matery/source/libs/valine/custom.css","hash":"c8a1aa79ec633d90d019e3e52eca76e24e3935a3","modified":1550824848000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"3219ce162c29f3849a24c0a329a3e0e303bbec26","modified":1551152268744},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1551152268744},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1551152268746},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1551152268747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1551152268747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1551152268749},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1551152268750},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1551152268750},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1551152268751},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1551152268752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1551152268707},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1551152268713},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1551152268714},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1551152268738},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1551152268740},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1551152268741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1551152268745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1551152268745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1551152268745},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1551152268746},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1551152268746},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1551152268747},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1551152268748},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1551152268748},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1551152268749},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1551152268750},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1551152268751},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1551152268752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1551152268752},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1551152268753},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551152268700},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1551152268713},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1551152268715},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1551152268716},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1551152268717},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1551152268735},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1551152268736},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1551152268737},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1551152268739},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1551152268741},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1551152268742},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1551152268743},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"7fdfb6c13e2c19f1f9e97904270bcdae9e61d334","modified":1551159890000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"c5d06c3e1deef980eb2821c7abff94bb15226f0e","modified":1551159835000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551152268706},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551152268706},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1551152268734},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551152268701},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551152268702},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551152268705},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1551152268718},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"540e43aea993ada0c9b4b50ae5843494d8b7cc28","modified":1551152268718},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1551152268722},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1551152268723},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1551152268724},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1551152268725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1551152268725},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1551152268727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1551152268727},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1551152268728},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1551152268730},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1551152268729},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1551152268730},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1551152268731},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1551152268732},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1551152268732},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1551152268733},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1551152268734},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1551152268743},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1551152268719},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1551152268721},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1551152268722},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1551152268724},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1551152268726},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1551152268729},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1551152268731},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1551152268733},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551152268704},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"757d54367f0df16a783769eec0ba974f42bd7dce","modified":1551152268720},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1551152268711}],"Category":[{"name":"编程","_id":"cjsmzfl1m0004h2c5e2g86zbp"}],"Data":[],"Page":[{"title":"首页","date":"2019-02-22T07:09:35.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 首页\ndate: 2019-02-22 15:09:35\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-02-26T03:37:48.669Z","path":"about/index.html","comments":1,"_id":"cjsmzfl1j0001h2c5m99mj1ha","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-02-22T07:01:57.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-02-22 15:01:57\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-02-26T03:37:48.669Z","path":"categories/index.html","comments":1,"_id":"cjsmzfl1m0003h2c5awtb5z79","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"coding","date":"2019-02-22T09:35:49.000Z","type":"coding","layout":"coding","_content":"","source":"coding/index.md","raw":"---\ntitle: coding\ndate: 2019-02-22 17:35:49\ntype: \"coding\"\nlayout: \"coding\"\n---\n","updated":"2019-02-26T03:37:48.670Z","path":"coding/index.html","comments":1,"_id":"cjsmzfl1p0007h2c5x4ia08jd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-02-22T07:07:17.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-22 15:07:17\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-02-26T03:37:48.670Z","path":"tags/index.html","comments":1,"_id":"cjsmzfl37000jh2c5lwz3mlnu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS垂直居中的几种方法","_content":"CSS垂直居中的几种方法\n\n\n\n\n\n\n@[TOC](CSS垂直居中的几种方法)\n\n### 假设HTML如下:\n```html\n<body>\n    <div id=\"box\">\n        <div id=\"content\"></div>\n    </div>\n</body>\n\n```\n### 1. 兼容性最好的方法 IE7以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\t width:100%;\n\t height:100%;\n\t background:rgba(0,0,0,0.7);\n\t position:relative;\n }\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:pink;\n\tposition:absolute;\n\ttop:0;\n\tright:0;\n\tbottom:0;\n\tleft:0;\n\tmargin:auto;\n}\n```\n\n### 2. transform进行元素偏移 IE8以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tposition:relative;\n}\n#content{\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n\tleft:50%;\n\ttop:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\t-webkit-transform:translateX(-50%) translateY(-50%);\n}\n```\n\n### 3. 弹性盒模型进行布局 IE兼容性差\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:box;\n\tbox-pack:center;\n\tbox-align:center;\n\tdisplay:-webkit-flexbox;\n\t-webkit-box-pack:center;\n\t-webkit-box-align:center;\n}\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n}\n```\n\n\n### 4. flex布局 不兼容IE9以下\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:flex;\n\tdisplay:-webkit-flex;\n\t justify-content:center;\n\t align-items:center;\n  }\n#content {\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n  }\n```\n\n\n##### 言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\n","source":"_posts/coding-1.md","raw":"---\ntitle: CSS垂直居中的几种方法\ntags: CSS\ncategories: 编程\n---\nCSS垂直居中的几种方法\n\n\n\n\n\n\n@[TOC](CSS垂直居中的几种方法)\n\n### 假设HTML如下:\n```html\n<body>\n    <div id=\"box\">\n        <div id=\"content\"></div>\n    </div>\n</body>\n\n```\n### 1. 兼容性最好的方法 IE7以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\t width:100%;\n\t height:100%;\n\t background:rgba(0,0,0,0.7);\n\t position:relative;\n }\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:pink;\n\tposition:absolute;\n\ttop:0;\n\tright:0;\n\tbottom:0;\n\tleft:0;\n\tmargin:auto;\n}\n```\n\n### 2. transform进行元素偏移 IE8以上\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tposition:relative;\n}\n#content{\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n\tleft:50%;\n\ttop:50%;\n\ttransform:translateX(-50%) translateY(-50%);\n\t-webkit-transform:translateX(-50%) translateY(-50%);\n}\n```\n\n### 3. 弹性盒模型进行布局 IE兼容性差\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:box;\n\tbox-pack:center;\n\tbox-align:center;\n\tdisplay:-webkit-flexbox;\n\t-webkit-box-pack:center;\n\t-webkit-box-align:center;\n}\n#content {\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n}\n```\n\n\n### 4. flex布局 不兼容IE9以下\n\n```javascript\nbody,html { margin:0; width:100%; height:100%; }\n\n#box {\n\twidth:100%;\n\theight:100%;\n\tbackground:rgba(0,0,0,0.7);\n\tdisplay:flex;\n\tdisplay:-webkit-flex;\n\t justify-content:center;\n\t align-items:center;\n  }\n#content {\n\tposition:absolute;\n\twidth:50%;\n\theight:50%;\n\tbackground:blue;\n  }\n```\n\n\n##### 言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\n","slug":"coding-1","published":1,"date":"2019-02-26T03:37:48.667Z","updated":"2019-02-26T03:37:48.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmzfl1g0000h2c59hage4dz","content":"<p>CSS垂直居中的几种方法</p>\n<p>@<a href=\"CSS垂直居中的几种方法\">TOC</a></p>\n<h3 id=\"假设HTML如下\"><a href=\"#假设HTML如下\" class=\"headerlink\" title=\"假设HTML如下:\"></a>假设HTML如下:</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n</code></pre>\n<h3 id=\"1-兼容性最好的方法-IE7以上\"><a href=\"#1-兼容性最好的方法-IE7以上\" class=\"headerlink\" title=\"1. 兼容性最好的方法 IE7以上\"></a>1. 兼容性最好的方法 IE7以上</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n     width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n     height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n     background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     position<span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n#content <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>pink<span class=\"token punctuation\">;</span>\n    position<span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    top<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    right<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    bottom<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    left<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    margin<span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"2-transform进行元素偏移-IE8以上\"><a href=\"#2-transform进行元素偏移-IE8以上\" class=\"headerlink\" title=\"2. transform进行元素偏移 IE8以上\"></a>2. transform进行元素偏移 IE8以上</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    position<span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n#content<span class=\"token punctuation\">{</span>\n    position<span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n    left<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    top<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    transform<span class=\"token punctuation\">:</span><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>transform<span class=\"token punctuation\">:</span><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"3-弹性盒模型进行布局-IE兼容性差\"><a href=\"#3-弹性盒模型进行布局-IE兼容性差\" class=\"headerlink\" title=\"3. 弹性盒模型进行布局 IE兼容性差\"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span>box<span class=\"token punctuation\">;</span>\n    box<span class=\"token operator\">-</span>pack<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    box<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>flexbox<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>box<span class=\"token operator\">-</span>pack<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>box<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n#content <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"4-flex布局-不兼容IE9以下\"><a href=\"#4-flex布局-不兼容IE9以下\" class=\"headerlink\" title=\"4. flex布局 不兼容IE9以下\"></a>4. flex布局 不兼容IE9以下</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">body<span class=\"token punctuation\">,</span>html <span class=\"token punctuation\">{</span> margin<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n#box <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span><span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span>flex<span class=\"token punctuation\">;</span>\n    display<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>flex<span class=\"token punctuation\">;</span>\n     justify<span class=\"token operator\">-</span>content<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n     align<span class=\"token operator\">-</span>items<span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n#content <span class=\"token punctuation\">{</span>\n    position<span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n    width<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    height<span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n    background<span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"><a href=\"#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\" class=\"headerlink\" title=\"言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>","site":{"data":{}},"excerpt":"","more":"<p>CSS垂直居中的几种方法</p>\n<p>@<a href=\"CSS垂直居中的几种方法\">TOC</a></p>\n<h3 id=\"假设HTML如下\"><a href=\"#假设HTML如下\" class=\"headerlink\" title=\"假设HTML如下:\"></a>假设HTML如下:</h3><pre><code class=\"html\">&lt;body&gt;\n    &lt;div id=&quot;box&quot;&gt;\n        &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n</code></pre>\n<h3 id=\"1-兼容性最好的方法-IE7以上\"><a href=\"#1-兼容性最好的方法-IE7以上\" class=\"headerlink\" title=\"1. 兼容性最好的方法 IE7以上\"></a>1. 兼容性最好的方法 IE7以上</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n     width:100%;\n     height:100%;\n     background:rgba(0,0,0,0.7);\n     position:relative;\n }\n#content {\n    width:50%;\n    height:50%;\n    background:pink;\n    position:absolute;\n    top:0;\n    right:0;\n    bottom:0;\n    left:0;\n    margin:auto;\n}\n</code></pre>\n<h3 id=\"2-transform进行元素偏移-IE8以上\"><a href=\"#2-transform进行元素偏移-IE8以上\" class=\"headerlink\" title=\"2. transform进行元素偏移 IE8以上\"></a>2. transform进行元素偏移 IE8以上</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,0.7);\n    position:relative;\n}\n#content{\n    position:absolute;\n    width:50%;\n    height:50%;\n    background:blue;\n    left:50%;\n    top:50%;\n    transform:translateX(-50%) translateY(-50%);\n    -webkit-transform:translateX(-50%) translateY(-50%);\n}\n</code></pre>\n<h3 id=\"3-弹性盒模型进行布局-IE兼容性差\"><a href=\"#3-弹性盒模型进行布局-IE兼容性差\" class=\"headerlink\" title=\"3. 弹性盒模型进行布局 IE兼容性差\"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,0.7);\n    display:box;\n    box-pack:center;\n    box-align:center;\n    display:-webkit-flexbox;\n    -webkit-box-pack:center;\n    -webkit-box-align:center;\n}\n#content {\n    width:50%;\n    height:50%;\n    background:blue;\n}\n</code></pre>\n<h3 id=\"4-flex布局-不兼容IE9以下\"><a href=\"#4-flex布局-不兼容IE9以下\" class=\"headerlink\" title=\"4. flex布局 不兼容IE9以下\"></a>4. flex布局 不兼容IE9以下</h3><pre><code class=\"javascript\">body,html { margin:0; width:100%; height:100%; }\n\n#box {\n    width:100%;\n    height:100%;\n    background:rgba(0,0,0,0.7);\n    display:flex;\n    display:-webkit-flex;\n     justify-content:center;\n     align-items:center;\n  }\n#content {\n    position:absolute;\n    width:50%;\n    height:50%;\n    background:blue;\n  }\n</code></pre>\n<h5 id=\"言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"><a href=\"#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\" class=\"headerlink\" title=\"言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔\"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>"},{"title":"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法","_content":"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\n@[TOC](vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法)\n\n## 遇到的问题\n 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；\n watch代码如下：\n```javascript\n  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n      \tthis.moreList = newVal.moreList\n      \t}\n  \t}\n  },\n```\n\nvue-devToola数据传递结果如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n#### 方案解决过程一\n考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:\n```javascript\n watch: {\n\t 'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true\n\t    }\n  \t},\n```\n\n结果显而易见 还是不行；\n\n#### 方案解决过程二\n查阅: [vue官方文档](https://cn.vuejs.org/v2/api/#watch).得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,\n```javascript\nwatch: {\n\t    'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true,\n\t      immediate: true,\n\t    }\n    }\n```\n最后博主问题终于得到解决了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n\n## 总结:\n出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~\n## 感谢~\n谢谢大家 麻烦给个关注 ^ _ ^\n","source":"_posts/coding-2.md","raw":"---\ntitle: vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\ntags: Vue\ncategories: 编程\n---\nvue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\n@[TOC](vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法)\n\n## 遇到的问题\n 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；\n watch代码如下：\n```javascript\n  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n      \tthis.moreList = newVal.moreList\n      \t}\n  \t}\n  },\n```\n\nvue-devToola数据传递结果如下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n#### 方案解决过程一\n考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:\n```javascript\n watch: {\n\t 'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true\n\t    }\n  \t},\n```\n\n结果显而易见 还是不行；\n\n#### 方案解决过程二\n查阅: [vue官方文档](https://cn.vuejs.org/v2/api/#watch).得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,\n```javascript\nwatch: {\n\t    'uploaConfig.moreList': {\n\t      handler (newVal) {\n\t      if (this.uploadConfig.moreList && this.uploadConfig.moreList.length > 0) {\n\t      \tthis.moreList = newVal.moreList\n\t      \t}\n\t      },\n\t      deep: true,\n\t      immediate: true,\n\t    }\n    }\n```\n最后博主问题终于得到解决了\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70)\n\n## 总结:\n出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~\n## 感谢~\n谢谢大家 麻烦给个关注 ^ _ ^\n","slug":"coding-2","published":1,"date":"2019-02-26T03:37:48.667Z","updated":"2019-02-26T03:37:48.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmzfl1k0002h2c5e7vwmbil","content":"<p>vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法<br>@<a href=\"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\">TOC</a></p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">uploaConfig</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span>oldVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">.</span>moreList\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>vue-devToola数据传递结果如下<br><img src=\"https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方案解决过程一\"><a href=\"#方案解决过程一\" class=\"headerlink\" title=\"方案解决过程一\"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"> watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token string\">'uploaConfig.moreList'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          handler <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">.</span>moreList\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>结果显而易见 还是不行；</p>\n<h4 id=\"方案解决过程二\"><a href=\"#方案解决过程二\" class=\"headerlink\" title=\"方案解决过程二\"></a>方案解决过程二</h4><p>查阅: <a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">watch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'uploaConfig.moreList'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          handler <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadConfig<span class=\"token punctuation\">.</span>moreList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>moreList <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">.</span>moreList\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          deep<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          immediate<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>最后博主问题终于得到解决了<br><img src=\"https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢~\"></a>感谢~</h2><p>谢谢大家 麻烦给个关注 ^ _ ^</p>\n","site":{"data":{}},"excerpt":"","more":"<p>vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法<br>@<a href=\"vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法\">TOC</a></p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：</p>\n<pre><code class=\"javascript\">  watch: {\n  uploaConfig(newVal,oldVal){\n   if (this.uploadConfig.moreList &amp;&amp; this.uploadConfig.moreList.length &gt; 0) {\n          this.moreList = newVal.moreList\n          }\n      }\n  },\n</code></pre>\n<p>vue-devToola数据传递结果如下<br><img src=\"https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"方案解决过程一\"><a href=\"#方案解决过程一\" class=\"headerlink\" title=\"方案解决过程一\"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:</p>\n<pre><code class=\"javascript\"> watch: {\n     &#39;uploaConfig.moreList&#39;: {\n          handler (newVal) {\n          if (this.uploadConfig.moreList &amp;&amp; this.uploadConfig.moreList.length &gt; 0) {\n              this.moreList = newVal.moreList\n              }\n          },\n          deep: true\n        }\n      },\n</code></pre>\n<p>结果显而易见 还是不行；</p>\n<h4 id=\"方案解决过程二\"><a href=\"#方案解决过程二\" class=\"headerlink\" title=\"方案解决过程二\"></a>方案解决过程二</h4><p>查阅: <a href=\"https://cn.vuejs.org/v2/api/#watch\" target=\"_blank\" rel=\"noopener\">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,</p>\n<pre><code class=\"javascript\">watch: {\n        &#39;uploaConfig.moreList&#39;: {\n          handler (newVal) {\n          if (this.uploadConfig.moreList &amp;&amp; this.uploadConfig.moreList.length &gt; 0) {\n              this.moreList = newVal.moreList\n              }\n          },\n          deep: true,\n          immediate: true,\n        }\n    }\n</code></pre>\n<p>最后博主问题终于得到解决了<br><img src=\"https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢~\"></a>感谢~</h2><p>谢谢大家 麻烦给个关注 ^ _ ^</p>\n"},{"title":"vue前端代码规范","_content":"\n使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；\n持续更新\n<section class=\"post-content\">\n            <p><strong>一、JavaScript命名规范</strong></p>\n\n<pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义\n</code></pre>\n\n<p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p>\n\n<p><strong>二、CSS命名规范</strong></p>\n\n<pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。\n2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名\n     .fs {\n            font: italic bold 12px/24px \"Microsoft YaHei\";\n    }\n3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：\n      .pub-shopIcon {\n                   width:12px;\n                   height:12px;\n                   float:left;\n                   position:relative;\n                   left:0;\n                   top:0;\n   \t\t\t}\n</code></pre>\n\n<p><strong>三、 Vue 目录结构</strong></p>\n\n<p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br>\n2.static用来放没有npm包的第三方插件，字体文件。 <br>\n3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br>\n<code>\n├── README.md              // 用到的插件和其他项目注意点在这里标明\n├── buil\u001a\u001ad\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── index.html\n├── package.json\n├── src\n│   ├── App.vue\n│   ├── api               // 抽出的axios 接口请求配置\n│   ├── assets            //  图片和公用样式\n│   ├── components        //  公用组件\n│   ├── directives        //  vue 指令\n│   ├── filters           //  vue过滤器\n│   ├── main.js\n│   ├── router            //  路由\n│   ├── store\n│   ├── utils             // 工具\n│   └── views             // 业务页面\n└── static                // 没有npm包的第三方插件\n</code></p>\n        </section>\n","source":"_posts/coding-3.md","raw":"---\ntitle: vue前端代码规范\n---\n\n使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；\n持续更新\n<section class=\"post-content\">\n            <p><strong>一、JavaScript命名规范</strong></p>\n\n<pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义\n</code></pre>\n\n<p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p>\n\n<p><strong>二、CSS命名规范</strong></p>\n\n<pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。\n2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名\n     .fs {\n            font: italic bold 12px/24px \"Microsoft YaHei\";\n    }\n3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：\n      .pub-shopIcon {\n                   width:12px;\n                   height:12px;\n                   float:left;\n                   position:relative;\n                   left:0;\n                   top:0;\n   \t\t\t}\n</code></pre>\n\n<p><strong>三、 Vue 目录结构</strong></p>\n\n<p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br>\n2.static用来放没有npm包的第三方插件，字体文件。 <br>\n3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br>\n<code>\n├── README.md              // 用到的插件和其他项目注意点在这里标明\n├── buil\u001a\u001ad\n│   ├── build.js\n│   ├── check-versions.js\n│   ├── logo.png\n│   ├── utils.js\n│   ├── vue-loader.conf.js\n│   ├── webpack.base.conf.js\n│   ├── webpack.dev.conf.js\n│   └── webpack.prod.conf.js\n├── config\n│   ├── dev.env.js\n│   ├── index.js\n│   └── prod.env.js\n├── index.html\n├── package.json\n├── src\n│   ├── App.vue\n│   ├── api               // 抽出的axios 接口请求配置\n│   ├── assets            //  图片和公用样式\n│   ├── components        //  公用组件\n│   ├── directives        //  vue 指令\n│   ├── filters           //  vue过滤器\n│   ├── main.js\n│   ├── router            //  路由\n│   ├── store\n│   ├── utils             // 工具\n│   └── views             // 业务页面\n└── static                // 没有npm包的第三方插件\n</code></p>\n        </section>\n","slug":"coding-3","published":1,"date":"2019-02-26T09:28:10.710Z","updated":"2019-02-26T09:28:10.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmzfl1o0006h2c54w9ikacs","content":"<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p>\n<section class=\"post-content\"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── buil\u001a\u001ad<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>\n","site":{"data":{}},"excerpt":"","more":"<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p>\n<section class=\"post-content\"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── buil\u001a\u001ad<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>\n"},{"title":"hexo 的介绍和使用","_content":"欢迎来到 [Hexo](https://hexo.io/)! 这是我的第一个发布. 通过观看 [hexo文档](https://hexo.io/docs/) 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 [问题解决](https://hexo.io/docs/troubleshooting.html) 或者你也可以在github寻求帮助 [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post （创建新文章）\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server （运行）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files （生成静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites （部署到远程站点）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo 的介绍和使用\n---\n欢迎来到 [Hexo](https://hexo.io/)! 这是我的第一个发布. 通过观看 [hexo文档](https://hexo.io/docs/) 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 [问题解决](https://hexo.io/docs/troubleshooting.html) 或者你也可以在github寻求帮助 [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post （创建新文章）\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server （运行）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files （生成静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites （部署到远程站点）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-02-26T03:47:54.923Z","updated":"2019-02-26T03:47:54.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmzfl1q0008h2c5nb1ilors","content":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! 这是我的第一个发布. 通过观看 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">问题解决</a> 或者你也可以在github寻求帮助 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-（创建新文章）\"><a href=\"#Create-a-new-post-（创建新文章）\" class=\"headerlink\" title=\"Create a new post （创建新文章）\"></a>Create a new post （创建新文章）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-（运行）\"><a href=\"#Run-server-（运行）\" class=\"headerlink\" title=\"Run server （运行）\"></a>Run server （运行）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-（生成静态文件）\"><a href=\"#Generate-static-files-（生成静态文件）\" class=\"headerlink\" title=\"Generate static files （生成静态文件）\"></a>Generate static files （生成静态文件）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-（部署到远程站点）\"><a href=\"#Deploy-to-remote-sites-（部署到远程站点）\" class=\"headerlink\" title=\"Deploy to remote sites （部署到远程站点）\"></a>Deploy to remote sites （部署到远程站点）</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎来到 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! 这是我的第一个发布. 通过观看 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">问题解决</a> 或者你也可以在github寻求帮助 <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post-（创建新文章）\"><a href=\"#Create-a-new-post-（创建新文章）\" class=\"headerlink\" title=\"Create a new post （创建新文章）\"></a>Create a new post （创建新文章）</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server-（运行）\"><a href=\"#Run-server-（运行）\" class=\"headerlink\" title=\"Run server （运行）\"></a>Run server （运行）</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files-（生成静态文件）\"><a href=\"#Generate-static-files-（生成静态文件）\" class=\"headerlink\" title=\"Generate static files （生成静态文件）\"></a>Generate static files （生成静态文件）</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites-（部署到远程站点）\"><a href=\"#Deploy-to-remote-sites-（部署到远程站点）\" class=\"headerlink\" title=\"Deploy to remote sites （部署到远程站点）\"></a>Deploy to remote sites （部署到远程站点）</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"分分钟教你用node.js写个爬虫","_content":"\n[网络爬虫](https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&fromid=22046949&fromtitle=%E7%88%AC%E8%99%AB)（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），\n是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫\n\n文章转自[分分钟教你用node.js写个爬虫](https://segmentfault.com/a/1190000014811373)\n<div id=\"articleContent\">\n<h3 id=\"一、什么是爬虫\"><a href=\"#一、什么是爬虫\" class=\"headerlink\" title=\"一、什么是爬虫\" target=\"_blank\"></a>一、什么是爬虫</h3><blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在<code>FOAF</code>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">WIKIPEDIA 爬虫介绍</a></p>\n</blockquote>\n<h3 id=\"二、爬虫的分类\"><a href=\"#二、爬虫的分类\" class=\"headerlink\" title=\"二、爬虫的分类\" target=\"_blank\"></a>二、爬虫的分类</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>爬行对象从一些 <code>种子URL</code> 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\" target=\"_blank\"></a>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/1.jpg\"><img src=\"/medias/article/coding/news-spider/1.jpg\" alt=\"通用爬虫工作流程\"></div></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>是 <code>指选择性</code> 地爬行那些与预先定义好的主题相关页面的网络爬虫。 </p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p>指对已下载网页采取增量式更新和 <code>只爬行新产生的或者已经发生变化网页</code> 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>爬行对象是一些在用户填入关键字搜索或登录后才能访问到的<code>深层网页信息</code>的爬虫。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"三、爬虫的爬行策略\"><a href=\"#三、爬虫的爬行策略\" class=\"headerlink\" title=\"三、爬虫的爬行策略\" target=\"_blank\"></a>三、爬虫的爬行策略</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>深度优先策略、广度优先策略</p>\n</blockquote>\n</li>\n</ul>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/2.png\"><img src=\"/medias/article/coding/news-spider/2.png\" alt=\"页面关系模拟树状结构\"></div></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）</p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p> 统一更新法、个体更新法、基于分类的更新法、自适应调频更新法</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>现代的网页爬虫的行为通常是四种策略组合的结果：</strong></p>\n<blockquote>\n<p>选择策略：决定所要下载的页面；<br>重新访问策略：决定什么时候检查页面的更新变化；<br>平衡礼貌策略：指出怎样避免站点超载；<br>并行策略：指出怎么协同达到分布式抓取的效果；</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/3.jpg\"><img src=\"/medias/article/coding/news-spider/3.jpg\" alt=\"现代分布式爬虫系统\"></div></p>\n<h3 id=\"四、写一个简单网页爬虫的流程\"><a href=\"#四、写一个简单网页爬虫的流程\" class=\"headerlink\" title=\"四、写一个简单网页爬虫的流程\" target=\"_blank\"></a>四、写一个简单网页爬虫的流程</h3><ol>\n<li>确定爬取对象（网站/页面）</li>\n<li>分析页面内容（目标数据/DOM结构）</li>\n<li>确定开发语言、框架、工具等</li>\n<li>编码 测试，爬取数据</li>\n<li>优化</li>\n</ol>\n<h3 id=\"一个简单的百度新闻爬虫\"><a href=\"#一个简单的百度新闻爬虫\" class=\"headerlink\" title=\"一个简单的百度新闻爬虫\" target=\"_blank\"></a>一个简单的百度新闻爬虫</h3><h4 id=\"确定爬取对象（网站-页面）\"><a href=\"#确定爬取对象（网站-页面）\" class=\"headerlink\" title=\"确定爬取对象（网站/页面）\" target=\"_blank\"></a>确定爬取对象（网站/页面）</h4><blockquote>\n<p><a href=\"http://news.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度新闻</a> （<a href=\"http://news.baidu.com/）\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/）</a></p>\n</blockquote>\n<h4 id=\"分析页面内容（目标数据-DOM结构）\"><a href=\"#分析页面内容（目标数据-DOM结构）\" class=\"headerlink\" title=\"分析页面内容（目标数据/DOM结构）\" target=\"_blank\"></a>分析页面内容（目标数据/DOM结构）</h4><blockquote>\n<p>······</p>\n</blockquote>\n<h4 id=\"确定开发语言、框架、工具等\"><a href=\"#确定开发语言、框架、工具等\" class=\"headerlink\" title=\"确定开发语言、框架、工具等\" target=\"_blank\"></a>确定开发语言、框架、工具等</h4><blockquote>\n<p><code>node.js (express)</code> + <code>SublimeText 3</code></p>\n</blockquote>\n<h4 id=\"编码，测试，爬取数据\"><a href=\"#编码，测试，爬取数据\" class=\"headerlink\" title=\"编码，测试，爬取数据\" target=\"_blank\"></a>编码，测试，爬取数据</h4><blockquote>\n<p>coding ···</p>\n</blockquote>\n<h3 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\" target=\"_blank\"></a>Let’s start</h3><h4 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\" target=\"_blank\"></a>新建项目目录</h4><blockquote>\n<p>1.在合适的磁盘目录下创建项目目录<code>baiduNews</code>（我的项目目录是：<code>F:\\web\\baiduNews</code>）</p>\n</blockquote>\n<p><strong>注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。</strong></p>\n<h4 id=\"初始化package-json\"><a href=\"#初始化package-json\" class=\"headerlink\" title=\"初始化package.json\" target=\"_blank\"></a>初始化package.json</h4><blockquote>\n<p>1.在DOS命令行中进入项目根目录 <code>baiduNews</code><br>2.执行<code>npm init</code>，初始化<code>package.json</code>文件</p>\n</blockquote>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><blockquote>\n<p><code>express</code> （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的<code>http</code>模块）<br><code>superagent</code> （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）<br><code>cheerio</code> （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）</p>\n</blockquote>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> express</span></code></li><li class=\"L2\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> superagent</span></code></li><li class=\"L3\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> cheerio</span></code></li></ol></pre><p>依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。<br>安装正确后如下图：</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/4.jpg\"><img src=\"/medias/article/coding/news-spider/4.jpg\" alt=\"安装依赖包\"></div></p>\n<h4 id=\"开始coding\"><a href=\"#开始coding\" class=\"headerlink\" title=\"开始coding\" target=\"_blank\"></a>开始coding</h4><p><strong> 一、使用<code>express</code>启动一个简单的本地Http服务器 </strong></p>\n<p>1、在项目根目录下创建<code>index.js</code>文件（后面都会在这个index文件中进行coding）</p>\n<p>2、创建好<code>index.js</code>后，我们首先实例化一个<code>express</code>对象，用它来启动一个本地监听<code>3000</code>端口的Http服务。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> express </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'express'</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> express</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// ...</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"kwd\">let</span><span class=\"pln\"> server </span><span class=\"pun\">=</span><span class=\"pln\"> app</span><span class=\"pun\">.</span><span class=\"pln\">listen</span><span class=\"pun\">(</span><span class=\"lit\">3000</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> host </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">address</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> port </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">port</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">'Your App is running at http://%s:%s'</span><span class=\"pun\">,</span><span class=\"pln\"> host</span><span class=\"pun\">,</span><span class=\"pln\"> port</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。</p>\n<p>3、按照国际惯例，我们希望在访问本机地址<code>http://localhost:3000</code>的时候，这个服务能给我们犯规一个<code>Hello World！</code>在<code>index.js</code>中加入如下代码：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"str\">'Hello World!'</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>此时，在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现页面上显示’Hellow World!’字样。<br>这样，在后面我们获取到百度新闻首页的信息后，就可以在访问<code>http://localhost:3000</code>时看到这些信息。</p>\n</blockquote>\n<p><strong>二、抓取百度新闻首页的新闻信息</strong></p>\n<p>1、 首先，我们先来分析一下百度新闻首页的页面信息。</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/5.jpg\"><img src=\"/medias/article/coding/news-spider/5.jpg\" alt=\"百度新闻首页\"></div></p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/6.jpg\"><img src=\"/medias/article/coding/news-spider/6.jpg\" alt=\"百度新闻首页\"></div></p>\n<blockquote>\n<p>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”……等。这次我们先来尝试抓取左侧<code>“热点新闻”</code>和下方的<code>“本地新闻”</code>两处的新闻数据。</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/7.jpg\"><img src=\"/medias/article/coding/news-spider/7.jpg\" alt=\"热点新闻DOM结构\"></div></p>\n<blockquote>\n<p><code>F12</code>打开<code>Chrome</code>的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在<code>DOM</code>的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在<code>id</code>为<code>#pane-news</code>的<code>&lt;div</code>&gt;下面<code>&lt;ul&gt;</code>下<code>&lt;li&gt;</code>下的<code>&lt;a&gt;</code>标签中。用<code>jQuery</code>的选择器表示为：<code>#pane-news ul li a</code>。</p>\n</blockquote>\n<p>2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> superagent</span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'superagent'</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                                </span><span class=\"com\">// 热点新闻</span></code></li><li class=\"L4\"><code><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                              </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"com\">/**</span></code></li><li class=\"L7\"><code><span class=\"com\"> * index.js</span></code></li><li class=\"L8\"><code><span class=\"com\"> * [description] - 使用superagent.get()方法来访问百度新闻首页</span></code></li><li class=\"L9\"><code><span class=\"com\"> */</span></code></li><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`热点新闻抓取失败 - ${err}`</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res</span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>3、获取页面信息后，我们来定义一个函数<code>getHotNews()</code>来抓取页面内的“热点新闻”数据。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * index.js</span></code></li><li class=\"L2\"><code><span class=\"com\"> * [description] - 抓取热点新闻页面</span></code></li><li class=\"L3\"><code><span class=\"com\"> */</span></code></li><li class=\"L4\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L5\"><code><span class=\"kwd\">const</span><span class=\"pln\"> cheerio </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'cheerio'</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getHotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res.text中。</span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"com\">/* 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数</span></code></li><li class=\"L2\"><code><span class=\"com\">     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素</span></code></li><li class=\"L3\"><code><span class=\"com\">   */</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 找到目标数据所在的页面元素，获取数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'div#pane-news ul li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"com\">// cherrio中$('selector').each()用来遍历所有匹配到的DOM元素</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span><span class=\"pln\">        </span><span class=\"com\">// 获取新闻标题</span></code></li><li class=\"L2\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">)</span><span class=\"pln\">    </span><span class=\"com\">// 获取新闻网页链接</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L4\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span><span class=\"pln\">              </span><span class=\"com\">// 存入最终结果数组</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> hotNews</span></code></li><li class=\"L7\"><code><span class=\"pun\">};</span></code></li></ol></pre><blockquote>\n<p>这里要多说几点：</p>\n<ol>\n<li><code>async/await</code>据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。<code>Promise</code>解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。</li>\n<li><code>superagent</code>模块提供了很多比如<code>get</code>、<code>post</code>、<code>delte</code>等方法，可以很方便地进行Ajax请求操作。在请求结束后执行<code>.end()</code>回调函数。<code>.end()</code>接受一个函数作为参数，该函数又有两个参数<code>error和res</code>。当请求失败，<code>error</code>会包含返回的错误信息，请求成功，<code>error</code>值为<code>null</code>，返回的数据会包含在<code>res</code>参数中。</li>\n<li><code>cheerio</code>模块的<code>.load()</code>方法，将<code>HTML document</code>作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于<code>jQuery</code>中的<code>.each()</code>来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。</li>\n</ol>\n</blockquote>\n<p>4、将抓取的数据返回给前端浏览器</p>\n<blockquote>\n<p>前面，<code>const app = express();</code>实例化了一个<code>express</code>对象<code>app</code>。<br><code>app.get('', async() =&gt; {})</code>接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。</p>\n</blockquote>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 http://localhost:3000时，就会后面的async函数</span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">hotNews</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：<br><strong>注：因为我的<code>Chrome</code><a href=\"https://www.cnblogs.com/whycxb/p/7126116.html\" target=\"_blank\" rel=\"noopener\">安装了JSONView扩展程序</a>，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。</strong></p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/9.jpg\"><img src=\"/medias/article/coding/news-spider/9.jpg\" alt=\"热点新闻抓取结果\"></div></p>\n<p><strong>OK！！这样，一个简单的百度<code>“热点新闻”</code>的爬虫就大功告成啦！！</strong></p>\n<blockquote>\n<p>简单总结一下，其实步骤很简单：</p>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM</code>元素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n<li>返回数据到前端浏览器</li>\n</ol>\n</blockquote>\n<p><strong>现在，继续我们的目标，抓取<code>“本地新闻”</code>数据（编码过程中，我们会遇到一些有意思的问题）</strong><br>有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。<br>1、 分析页面中“本地新闻”部分的<code>DOM</code>结构，如下图：</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/10.jpg\"><img src=\"/medias/article/coding/news-spider/10.jpg\" alt=\"百度新闻本地新闻\"></div></p>\n<blockquote>\n<p><code>F12</code>打开控制台，审查“本地新闻”<code>DOM</code>元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在<code>id</code>为<code>#local_news</code>的<code>div</code>中。“左侧新闻”数据又在<code>id</code>为<code>#localnews-focus</code>的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。“本地资讯”数据又在<code>id</code>为<code>#localnews-zixun</code>的<code>div</code>下的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。</p>\n</blockquote>\n<p>2、OK！分析了<code>DOM</code>结构，确定了数据的位置，接下来和爬取<code>“热点新闻”</code>一样，按部就班，定义一个<code>getLocalNews()</code>函数，爬取这些数据。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 抓取本地新闻页面</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'ul#localnews-focus li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'div#localnews-zixun ul li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">};</span></code></li></ol></pre><p>对应的，在<code>superagent.get()</code>中请求页面后，我们需要调用<code>getLocalNews()</code>函数，来爬去本地新闻数据。<br><code>superagent.get()</code>函数修改为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`热点新闻抓取失败 - ${err}`</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res</span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">   localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>同时，我们要在<code>app.get()</code>路由中也要将数据返回给前端浏览器。<code>app.get()</code>路由代码修改为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 http://localhost:3000时，就会后面的async函数</span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>编码完成，激动不已！！<code>DOS</code>中让项目跑起来，用浏览器访问<code>http://localhost:3000</code></p>\n</blockquote>\n<p><strong>尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组<code>[ ]</code>。检查代码，发现也没有问题，但为什么一直返回的空数组呢？</strong><br><strong>经过一番原因查找，才返现问题出在哪里！！</strong></p>\n<h3 id=\"一个有意思的问题\"><a href=\"#一个有意思的问题\" class=\"headerlink\" title=\"一个有意思的问题\" target=\"_blank\"></a>一个有意思的问题</h3><blockquote>\n<p>为了找到原因，首先，我们看看用<code>superagent.get('http://news.baidu.com/').end((err, res) =&gt; {})</code>请求百度新闻首页在回调函数<code>.end()</code>中的第二个参数res中到底拿到了什么内容？</p>\n</blockquote>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 新定义一个全局变量 pageRes</span></code></li><li class=\"L1\"><code><span class=\"kwd\">let</span><span class=\"pln\"> pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">        </span><span class=\"com\">// supergaent页面返回值</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// superagent.get()中将res存入pageRes</span></code></li><li class=\"L4\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L7\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`热点新闻抓取失败 - ${err}`</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// hotNews = getHotNews(res)</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews = getLocalNews(res)</span></code></li><li class=\"L3\"><code><span class=\"pln\">    pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> res</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code><span class=\"pun\">});</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"com\">// 将pageRes返回给前端浏览器，便于查看</span></code></li><li class=\"L8\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// {}hotNews: hotNews,</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews: localNews,</span></code></li><li class=\"L2\"><code><span class=\"pln\">    pageRes</span><span class=\"pun\">:</span><span class=\"pln\"> pageRes</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/11.jpg\"><img src=\"/medias/article/coding/news-spider/11.jpg\" alt=\"superagent.get()请求返回值\"></div></p>\n<blockquote>\n<p>可以看到，返回值中的<code>text</code>字段应该就是整个页面的<code>HTML</code>代码的字符串格式。为了方便我们观察，可以直接把这个<code>text</code>字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。</p>\n</blockquote>\n<p>修改给前端浏览器的返回值</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">pageRes</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/12.jpg\"><img src=\"/medias/article/coding/news-spider/12.jpg\" alt=\"本地新闻返回页面\"></div></p>\n<blockquote>\n<p>审查元素才发现，原来我们抓取的目标数据所在的<code>DOM</code>元素中是空的，里面没有数据！<br>到这里，一切水落石出！在我们使用<code>superagent.get()</code>访问百度新闻首页时，<code>res</code>中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，<code>DOM</code>节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组<code>[ ]</code>。</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/13.jpg\"><img src=\"/medias/article/coding/news-spider/13.jpg\" alt=\"本地新闻请求接口\"></div></p>\n<blockquote>\n<p>在控制台的<code>Network</code>中我们发现页面请求了一次这样的接口：<br><code>http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917</code>，接口状态 <code>404</code>。<br>这应该就是百度新闻获取<code>“本地新闻”</code>的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用<code>superagent.get()</code>请求的页面再去请求这个接口时，接口<code>URL</code>中<code>hostname</code>部分变成了本地<code>IP</code>地址，而本机上没有这个接口，所以<code>404</code>，请求不到数据。</p>\n</blockquote>\n<p><strong>找到原因，我们来想办法解决这个问题！！</strong></p>\n<blockquote>\n<ol>\n<li>直接使用<code>superagen</code>t访问正确合法的百度<code>“本地新闻”</code>的接口，获取数据后返回给前端浏览器。</li>\n<li>使用第三方<code>npm</code>包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当<code>“本地新闻”</code>加载成功后，抓取数据，返回给前端浏览器。</li>\n</ol>\n</blockquote>\n<p><strong>以上方法均可，我们来试试比较有意思的第二种方法</strong></p>\n<h3 id=\"使用Nightmare自动化测试工具\"><a href=\"#使用Nightmare自动化测试工具\" class=\"headerlink\" title=\"使用Nightmare自动化测试工具\" target=\"_blank\"></a>使用<code>Nightmare</code>自动化测试工具</h3><blockquote>\n<p><code>Electron</code>可以让你使用纯<code>JavaScript</code>调用<code>Chrome</code>丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的<code>Node.js</code>的变体，而不是<code>Web</code>服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互</p>\n</blockquote>\n<blockquote>\n<p><code>Nightmare</code>是一个基于<code>Electron</code>的框架，针对<code>Web</code>自动化测试和爬虫，因为其具有跟<code>PlantomJS</code>一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟<code>Request</code>库一样直接访问<code>URL</code>来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。</p>\n</blockquote>\n<h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 安装nightmare</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> nightmare</span></code></li></ol></pre><h4 id=\"为获取“本地新闻”，继续coding…\"><a href=\"#为获取“本地新闻”，继续coding…\" class=\"headerlink\" title=\"为获取“本地新闻”，继续coding…\" target=\"_blank\"></a>为获取“本地新闻”，继续coding…</h4><p>给<code>index.js</code>中新增如下代码：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'nightmare'</span><span class=\"pun\">);</span><span class=\"pln\">          </span><span class=\"com\">// 自动化测试包，处理动态页面</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> nightmare </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pun\">({</span><span class=\"pln\"> show</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pln\"> </span><span class=\"pun\">});</span><span class=\"pln\">     </span><span class=\"com\">// show:true  显示内置模拟浏览器</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">/**</span></code></li><li class=\"L4\"><code><span class=\"com\"> * [description] - 抓取本地新闻页面</span></code></li><li class=\"L5\"><code><span class=\"com\"> * [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，</span></code></li><li class=\"L6\"><code><span class=\"com\"> * 所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，</span></code></li><li class=\"L7\"><code><span class=\"com\"> * 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取</span></code></li><li class=\"L8\"><code><span class=\"com\"> */</span></code></li><li class=\"L9\"><code><span class=\"com\">// 抓取本地新闻页面</span></code></li><li class=\"L0\"><code><span class=\"pln\">nightmare</span></code></li><li class=\"L1\"><code><span class=\"pun\">.</span><span class=\"kwd\">goto</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">.</span><span class=\"pln\">wait</span><span class=\"pun\">(</span><span class=\"str\">\"div#local_news\"</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"pun\">.</span><span class=\"pln\">evaluate</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">querySelector</span><span class=\"pun\">(</span><span class=\"str\">\"div#local_news\"</span><span class=\"pun\">).</span><span class=\"pln\">innerHTML</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pun\">.</span><span class=\"kwd\">then</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"com\">// 获取本地新闻数据</span></code></li><li class=\"L6\"><code><span class=\"pln\">  localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pun\">})</span></code></li><li class=\"L8\"><code><span class=\"pun\">.</span><span class=\"kwd\">catch</span><span class=\"pun\">(</span><span class=\"pln\">error </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`本地新闻抓取失败 - ${error}`</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pun\">})</span></code></li></ol></pre><p>修改<code>getLocalNews()</code>函数为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description]- 获取本地新闻数据</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'ul#localnews-focus li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'div#localnews-zixun ul li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>修改<code>app.get('/')</code>路由为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 http://localhost:3000时，就会后面的async函数</span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">})</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>此时，<code>DOS</code>命令行中重新让项目跑起来，浏览器访问<code>https://localhost:3000</code>，看看页面展示的信息，看是否抓取到了<code>“本地新闻”</code>数据！</p>\n</blockquote>\n<p><strong>至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！</strong></p>\n<p><strong>最后总结一下，整体思路如下：</strong></p>\n<blockquote>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM元</code>素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li><strong>动态页面（需要加载页面后运行<code>JS</code>或请求接口的页面）可以使用<code>Nightmare</code>模拟浏览器访问</strong></li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n</ol>\n</blockquote>\n<p>###完整代码</p>\n<blockquote>\n<p>爬虫完整代码GitHub地址：<a href=\"https://github.com/webCaolixin/news-Spider\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n</blockquote>\n\n</div>\n","source":"_posts/coding-node.md","raw":"---\ntitle: 分分钟教你用node.js写个爬虫\ntags: Node\ncategories: 编程\n---\n\n[网络爬虫](https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&fromid=22046949&fromtitle=%E7%88%AC%E8%99%AB)（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），\n是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫\n\n文章转自[分分钟教你用node.js写个爬虫](https://segmentfault.com/a/1190000014811373)\n<div id=\"articleContent\">\n<h3 id=\"一、什么是爬虫\"><a href=\"#一、什么是爬虫\" class=\"headerlink\" title=\"一、什么是爬虫\" target=\"_blank\"></a>一、什么是爬虫</h3><blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在<code>FOAF</code>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">WIKIPEDIA 爬虫介绍</a></p>\n</blockquote>\n<h3 id=\"二、爬虫的分类\"><a href=\"#二、爬虫的分类\" class=\"headerlink\" title=\"二、爬虫的分类\" target=\"_blank\"></a>二、爬虫的分类</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>爬行对象从一些 <code>种子URL</code> 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\" target=\"_blank\"></a>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/1.jpg\"><img src=\"/medias/article/coding/news-spider/1.jpg\" alt=\"通用爬虫工作流程\"></div></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>是 <code>指选择性</code> 地爬行那些与预先定义好的主题相关页面的网络爬虫。 </p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p>指对已下载网页采取增量式更新和 <code>只爬行新产生的或者已经发生变化网页</code> 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>爬行对象是一些在用户填入关键字搜索或登录后才能访问到的<code>深层网页信息</code>的爬虫。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"三、爬虫的爬行策略\"><a href=\"#三、爬虫的爬行策略\" class=\"headerlink\" title=\"三、爬虫的爬行策略\" target=\"_blank\"></a>三、爬虫的爬行策略</h3><ul>\n<li>通用网络爬虫（全网爬虫）<blockquote>\n<p>深度优先策略、广度优先策略</p>\n</blockquote>\n</li>\n</ul>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/2.png\"><img src=\"/medias/article/coding/news-spider/2.png\" alt=\"页面关系模拟树状结构\"></div></p>\n<ul>\n<li><p>聚焦网络爬虫（主题网络爬虫）</p>\n<blockquote>\n<p>基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）</p>\n</blockquote>\n</li>\n<li><p>增量式网络爬虫</p>\n<blockquote>\n<p> 统一更新法、个体更新法、基于分类的更新法、自适应调频更新法</p>\n</blockquote>\n</li>\n<li><p>Deep Web 爬虫</p>\n<blockquote>\n<p>Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>现代的网页爬虫的行为通常是四种策略组合的结果：</strong></p>\n<blockquote>\n<p>选择策略：决定所要下载的页面；<br>重新访问策略：决定什么时候检查页面的更新变化；<br>平衡礼貌策略：指出怎样避免站点超载；<br>并行策略：指出怎么协同达到分布式抓取的效果；</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/3.jpg\"><img src=\"/medias/article/coding/news-spider/3.jpg\" alt=\"现代分布式爬虫系统\"></div></p>\n<h3 id=\"四、写一个简单网页爬虫的流程\"><a href=\"#四、写一个简单网页爬虫的流程\" class=\"headerlink\" title=\"四、写一个简单网页爬虫的流程\" target=\"_blank\"></a>四、写一个简单网页爬虫的流程</h3><ol>\n<li>确定爬取对象（网站/页面）</li>\n<li>分析页面内容（目标数据/DOM结构）</li>\n<li>确定开发语言、框架、工具等</li>\n<li>编码 测试，爬取数据</li>\n<li>优化</li>\n</ol>\n<h3 id=\"一个简单的百度新闻爬虫\"><a href=\"#一个简单的百度新闻爬虫\" class=\"headerlink\" title=\"一个简单的百度新闻爬虫\" target=\"_blank\"></a>一个简单的百度新闻爬虫</h3><h4 id=\"确定爬取对象（网站-页面）\"><a href=\"#确定爬取对象（网站-页面）\" class=\"headerlink\" title=\"确定爬取对象（网站/页面）\" target=\"_blank\"></a>确定爬取对象（网站/页面）</h4><blockquote>\n<p><a href=\"http://news.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度新闻</a> （<a href=\"http://news.baidu.com/）\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/）</a></p>\n</blockquote>\n<h4 id=\"分析页面内容（目标数据-DOM结构）\"><a href=\"#分析页面内容（目标数据-DOM结构）\" class=\"headerlink\" title=\"分析页面内容（目标数据/DOM结构）\" target=\"_blank\"></a>分析页面内容（目标数据/DOM结构）</h4><blockquote>\n<p>······</p>\n</blockquote>\n<h4 id=\"确定开发语言、框架、工具等\"><a href=\"#确定开发语言、框架、工具等\" class=\"headerlink\" title=\"确定开发语言、框架、工具等\" target=\"_blank\"></a>确定开发语言、框架、工具等</h4><blockquote>\n<p><code>node.js (express)</code> + <code>SublimeText 3</code></p>\n</blockquote>\n<h4 id=\"编码，测试，爬取数据\"><a href=\"#编码，测试，爬取数据\" class=\"headerlink\" title=\"编码，测试，爬取数据\" target=\"_blank\"></a>编码，测试，爬取数据</h4><blockquote>\n<p>coding ···</p>\n</blockquote>\n<h3 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\" target=\"_blank\"></a>Let’s start</h3><h4 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\" target=\"_blank\"></a>新建项目目录</h4><blockquote>\n<p>1.在合适的磁盘目录下创建项目目录<code>baiduNews</code>（我的项目目录是：<code>F:\\web\\baiduNews</code>）</p>\n</blockquote>\n<p><strong>注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。</strong></p>\n<h4 id=\"初始化package-json\"><a href=\"#初始化package-json\" class=\"headerlink\" title=\"初始化package.json\" target=\"_blank\"></a>初始化package.json</h4><blockquote>\n<p>1.在DOS命令行中进入项目根目录 <code>baiduNews</code><br>2.执行<code>npm init</code>，初始化<code>package.json</code>文件</p>\n</blockquote>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><blockquote>\n<p><code>express</code> （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的<code>http</code>模块）<br><code>superagent</code> （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）<br><code>cheerio</code> （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）</p>\n</blockquote>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> express</span></code></li><li class=\"L2\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> superagent</span></code></li><li class=\"L3\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> cheerio</span></code></li></ol></pre><p>依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。<br>安装正确后如下图：</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/4.jpg\"><img src=\"/medias/article/coding/news-spider/4.jpg\" alt=\"安装依赖包\"></div></p>\n<h4 id=\"开始coding\"><a href=\"#开始coding\" class=\"headerlink\" title=\"开始coding\" target=\"_blank\"></a>开始coding</h4><p><strong> 一、使用<code>express</code>启动一个简单的本地Http服务器 </strong></p>\n<p>1、在项目根目录下创建<code>index.js</code>文件（后面都会在这个index文件中进行coding）</p>\n<p>2、创建好<code>index.js</code>后，我们首先实例化一个<code>express</code>对象，用它来启动一个本地监听<code>3000</code>端口的Http服务。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> express </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'express'</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> express</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// ...</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"kwd\">let</span><span class=\"pln\"> server </span><span class=\"pun\">=</span><span class=\"pln\"> app</span><span class=\"pun\">.</span><span class=\"pln\">listen</span><span class=\"pun\">(</span><span class=\"lit\">3000</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> host </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">address</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> port </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">port</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">'Your App is running at http://%s:%s'</span><span class=\"pun\">,</span><span class=\"pln\"> host</span><span class=\"pun\">,</span><span class=\"pln\"> port</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。</p>\n<p>3、按照国际惯例，我们希望在访问本机地址<code>http://localhost:3000</code>的时候，这个服务能给我们犯规一个<code>Hello World！</code>在<code>index.js</code>中加入如下代码：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"str\">'Hello World!'</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>此时，在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现页面上显示’Hellow World!’字样。<br>这样，在后面我们获取到百度新闻首页的信息后，就可以在访问<code>http://localhost:3000</code>时看到这些信息。</p>\n</blockquote>\n<p><strong>二、抓取百度新闻首页的新闻信息</strong></p>\n<p>1、 首先，我们先来分析一下百度新闻首页的页面信息。</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/5.jpg\"><img src=\"/medias/article/coding/news-spider/5.jpg\" alt=\"百度新闻首页\"></div></p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/6.jpg\"><img src=\"/medias/article/coding/news-spider/6.jpg\" alt=\"百度新闻首页\"></div></p>\n<blockquote>\n<p>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”……等。这次我们先来尝试抓取左侧<code>“热点新闻”</code>和下方的<code>“本地新闻”</code>两处的新闻数据。</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/7.jpg\"><img src=\"/medias/article/coding/news-spider/7.jpg\" alt=\"热点新闻DOM结构\"></div></p>\n<blockquote>\n<p><code>F12</code>打开<code>Chrome</code>的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在<code>DOM</code>的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在<code>id</code>为<code>#pane-news</code>的<code>&lt;div</code>&gt;下面<code>&lt;ul&gt;</code>下<code>&lt;li&gt;</code>下的<code>&lt;a&gt;</code>标签中。用<code>jQuery</code>的选择器表示为：<code>#pane-news ul li a</code>。</p>\n</blockquote>\n<p>2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> superagent</span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'superagent'</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                                </span><span class=\"com\">// 热点新闻</span></code></li><li class=\"L4\"><code><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                              </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"com\">/**</span></code></li><li class=\"L7\"><code><span class=\"com\"> * index.js</span></code></li><li class=\"L8\"><code><span class=\"com\"> * [description] - 使用superagent.get()方法来访问百度新闻首页</span></code></li><li class=\"L9\"><code><span class=\"com\"> */</span></code></li><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`热点新闻抓取失败 - ${err}`</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res</span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>3、获取页面信息后，我们来定义一个函数<code>getHotNews()</code>来抓取页面内的“热点新闻”数据。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * index.js</span></code></li><li class=\"L2\"><code><span class=\"com\"> * [description] - 抓取热点新闻页面</span></code></li><li class=\"L3\"><code><span class=\"com\"> */</span></code></li><li class=\"L4\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L5\"><code><span class=\"kwd\">const</span><span class=\"pln\"> cheerio </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'cheerio'</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getHotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res.text中。</span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"com\">/* 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数</span></code></li><li class=\"L2\"><code><span class=\"com\">     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素</span></code></li><li class=\"L3\"><code><span class=\"com\">   */</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 找到目标数据所在的页面元素，获取数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'div#pane-news ul li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"com\">// cherrio中$('selector').each()用来遍历所有匹配到的DOM元素</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span><span class=\"pln\">        </span><span class=\"com\">// 获取新闻标题</span></code></li><li class=\"L2\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">)</span><span class=\"pln\">    </span><span class=\"com\">// 获取新闻网页链接</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L4\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span><span class=\"pln\">              </span><span class=\"com\">// 存入最终结果数组</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> hotNews</span></code></li><li class=\"L7\"><code><span class=\"pun\">};</span></code></li></ol></pre><blockquote>\n<p>这里要多说几点：</p>\n<ol>\n<li><code>async/await</code>据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。<code>Promise</code>解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。</li>\n<li><code>superagent</code>模块提供了很多比如<code>get</code>、<code>post</code>、<code>delte</code>等方法，可以很方便地进行Ajax请求操作。在请求结束后执行<code>.end()</code>回调函数。<code>.end()</code>接受一个函数作为参数，该函数又有两个参数<code>error和res</code>。当请求失败，<code>error</code>会包含返回的错误信息，请求成功，<code>error</code>值为<code>null</code>，返回的数据会包含在<code>res</code>参数中。</li>\n<li><code>cheerio</code>模块的<code>.load()</code>方法，将<code>HTML document</code>作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于<code>jQuery</code>中的<code>.each()</code>来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。</li>\n</ol>\n</blockquote>\n<p>4、将抓取的数据返回给前端浏览器</p>\n<blockquote>\n<p>前面，<code>const app = express();</code>实例化了一个<code>express</code>对象<code>app</code>。<br><code>app.get('', async() =&gt; {})</code>接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。</p>\n</blockquote>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 http://localhost:3000时，就会后面的async函数</span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">hotNews</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code>http://localhost:3000</code>,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：<br><strong>注：因为我的<code>Chrome</code><a href=\"https://www.cnblogs.com/whycxb/p/7126116.html\" target=\"_blank\" rel=\"noopener\">安装了JSONView扩展程序</a>，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。</strong></p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/9.jpg\"><img src=\"/medias/article/coding/news-spider/9.jpg\" alt=\"热点新闻抓取结果\"></div></p>\n<p><strong>OK！！这样，一个简单的百度<code>“热点新闻”</code>的爬虫就大功告成啦！！</strong></p>\n<blockquote>\n<p>简单总结一下，其实步骤很简单：</p>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM</code>元素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n<li>返回数据到前端浏览器</li>\n</ol>\n</blockquote>\n<p><strong>现在，继续我们的目标，抓取<code>“本地新闻”</code>数据（编码过程中，我们会遇到一些有意思的问题）</strong><br>有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。<br>1、 分析页面中“本地新闻”部分的<code>DOM</code>结构，如下图：</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/10.jpg\"><img src=\"/medias/article/coding/news-spider/10.jpg\" alt=\"百度新闻本地新闻\"></div></p>\n<blockquote>\n<p><code>F12</code>打开控制台，审查“本地新闻”<code>DOM</code>元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在<code>id</code>为<code>#local_news</code>的<code>div</code>中。“左侧新闻”数据又在<code>id</code>为<code>#localnews-focus</code>的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。“本地资讯”数据又在<code>id</code>为<code>#localnews-zixun</code>的<code>div</code>下的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。</p>\n</blockquote>\n<p>2、OK！分析了<code>DOM</code>结构，确定了数据的位置，接下来和爬取<code>“热点新闻”</code>一样，按部就班，定义一个<code>getLocalNews()</code>函数，爬取这些数据。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 抓取本地新闻页面</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'ul#localnews-focus li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'div#localnews-zixun ul li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">};</span></code></li></ol></pre><p>对应的，在<code>superagent.get()</code>中请求页面后，我们需要调用<code>getLocalNews()</code>函数，来爬去本地新闻数据。<br><code>superagent.get()</code>函数修改为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`热点新闻抓取失败 - ${err}`</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res</span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">   localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>同时，我们要在<code>app.get()</code>路由中也要将数据返回给前端浏览器。<code>app.get()</code>路由代码修改为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 http://localhost:3000时，就会后面的async函数</span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>编码完成，激动不已！！<code>DOS</code>中让项目跑起来，用浏览器访问<code>http://localhost:3000</code></p>\n</blockquote>\n<p><strong>尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组<code>[ ]</code>。检查代码，发现也没有问题，但为什么一直返回的空数组呢？</strong><br><strong>经过一番原因查找，才返现问题出在哪里！！</strong></p>\n<h3 id=\"一个有意思的问题\"><a href=\"#一个有意思的问题\" class=\"headerlink\" title=\"一个有意思的问题\" target=\"_blank\"></a>一个有意思的问题</h3><blockquote>\n<p>为了找到原因，首先，我们看看用<code>superagent.get('http://news.baidu.com/').end((err, res) =&gt; {})</code>请求百度新闻首页在回调函数<code>.end()</code>中的第二个参数res中到底拿到了什么内容？</p>\n</blockquote>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 新定义一个全局变量 pageRes</span></code></li><li class=\"L1\"><code><span class=\"kwd\">let</span><span class=\"pln\"> pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">        </span><span class=\"com\">// supergaent页面返回值</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// superagent.get()中将res存入pageRes</span></code></li><li class=\"L4\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L7\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`热点新闻抓取失败 - ${err}`</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 访问成功，请求http://news.baidu.com/页面所返回的数据会包含在res</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// hotNews = getHotNews(res)</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews = getLocalNews(res)</span></code></li><li class=\"L3\"><code><span class=\"pln\">    pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> res</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code><span class=\"pun\">});</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"com\">// 将pageRes返回给前端浏览器，便于查看</span></code></li><li class=\"L8\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// {}hotNews: hotNews,</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews: localNews,</span></code></li><li class=\"L2\"><code><span class=\"pln\">    pageRes</span><span class=\"pun\">:</span><span class=\"pln\"> pageRes</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/11.jpg\"><img src=\"/medias/article/coding/news-spider/11.jpg\" alt=\"superagent.get()请求返回值\"></div></p>\n<blockquote>\n<p>可以看到，返回值中的<code>text</code>字段应该就是整个页面的<code>HTML</code>代码的字符串格式。为了方便我们观察，可以直接把这个<code>text</code>字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。</p>\n</blockquote>\n<p>修改给前端浏览器的返回值</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">pageRes</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>访问浏览器<code>http://localhost:3000</code>，页面展示如下内容：</p>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/12.jpg\"><img src=\"/medias/article/coding/news-spider/12.jpg\" alt=\"本地新闻返回页面\"></div></p>\n<blockquote>\n<p>审查元素才发现，原来我们抓取的目标数据所在的<code>DOM</code>元素中是空的，里面没有数据！<br>到这里，一切水落石出！在我们使用<code>superagent.get()</code>访问百度新闻首页时，<code>res</code>中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，<code>DOM</code>节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组<code>[ ]</code>。</p>\n</blockquote>\n<p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/13.jpg\"><img src=\"/medias/article/coding/news-spider/13.jpg\" alt=\"本地新闻请求接口\"></div></p>\n<blockquote>\n<p>在控制台的<code>Network</code>中我们发现页面请求了一次这样的接口：<br><code>http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917</code>，接口状态 <code>404</code>。<br>这应该就是百度新闻获取<code>“本地新闻”</code>的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用<code>superagent.get()</code>请求的页面再去请求这个接口时，接口<code>URL</code>中<code>hostname</code>部分变成了本地<code>IP</code>地址，而本机上没有这个接口，所以<code>404</code>，请求不到数据。</p>\n</blockquote>\n<p><strong>找到原因，我们来想办法解决这个问题！！</strong></p>\n<blockquote>\n<ol>\n<li>直接使用<code>superagen</code>t访问正确合法的百度<code>“本地新闻”</code>的接口，获取数据后返回给前端浏览器。</li>\n<li>使用第三方<code>npm</code>包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当<code>“本地新闻”</code>加载成功后，抓取数据，返回给前端浏览器。</li>\n</ol>\n</blockquote>\n<p><strong>以上方法均可，我们来试试比较有意思的第二种方法</strong></p>\n<h3 id=\"使用Nightmare自动化测试工具\"><a href=\"#使用Nightmare自动化测试工具\" class=\"headerlink\" title=\"使用Nightmare自动化测试工具\" target=\"_blank\"></a>使用<code>Nightmare</code>自动化测试工具</h3><blockquote>\n<p><code>Electron</code>可以让你使用纯<code>JavaScript</code>调用<code>Chrome</code>丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的<code>Node.js</code>的变体，而不是<code>Web</code>服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互</p>\n</blockquote>\n<blockquote>\n<p><code>Nightmare</code>是一个基于<code>Electron</code>的框架，针对<code>Web</code>自动化测试和爬虫，因为其具有跟<code>PlantomJS</code>一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟<code>Request</code>库一样直接访问<code>URL</code>来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。</p>\n</blockquote>\n<h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 安装nightmare</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> nightmare</span></code></li></ol></pre><h4 id=\"为获取“本地新闻”，继续coding…\"><a href=\"#为获取“本地新闻”，继续coding…\" class=\"headerlink\" title=\"为获取“本地新闻”，继续coding…\" target=\"_blank\"></a>为获取“本地新闻”，继续coding…</h4><p>给<code>index.js</code>中新增如下代码：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">'nightmare'</span><span class=\"pun\">);</span><span class=\"pln\">          </span><span class=\"com\">// 自动化测试包，处理动态页面</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> nightmare </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pun\">({</span><span class=\"pln\"> show</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pln\"> </span><span class=\"pun\">});</span><span class=\"pln\">     </span><span class=\"com\">// show:true  显示内置模拟浏览器</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">/**</span></code></li><li class=\"L4\"><code><span class=\"com\"> * [description] - 抓取本地新闻页面</span></code></li><li class=\"L5\"><code><span class=\"com\"> * [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，</span></code></li><li class=\"L6\"><code><span class=\"com\"> * 所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，</span></code></li><li class=\"L7\"><code><span class=\"com\"> * 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取</span></code></li><li class=\"L8\"><code><span class=\"com\"> */</span></code></li><li class=\"L9\"><code><span class=\"com\">// 抓取本地新闻页面</span></code></li><li class=\"L0\"><code><span class=\"pln\">nightmare</span></code></li><li class=\"L1\"><code><span class=\"pun\">.</span><span class=\"kwd\">goto</span><span class=\"pun\">(</span><span class=\"str\">'http://news.baidu.com/'</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">.</span><span class=\"pln\">wait</span><span class=\"pun\">(</span><span class=\"str\">\"div#local_news\"</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"pun\">.</span><span class=\"pln\">evaluate</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">querySelector</span><span class=\"pun\">(</span><span class=\"str\">\"div#local_news\"</span><span class=\"pun\">).</span><span class=\"pln\">innerHTML</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pun\">.</span><span class=\"kwd\">then</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"com\">// 获取本地新闻数据</span></code></li><li class=\"L6\"><code><span class=\"pln\">  localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pun\">})</span></code></li><li class=\"L8\"><code><span class=\"pun\">.</span><span class=\"kwd\">catch</span><span class=\"pun\">(</span><span class=\"pln\">error </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">`本地新闻抓取失败 - ${error}`</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pun\">})</span></code></li></ol></pre><p>修改<code>getLocalNews()</code>函数为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description]- 获取本地新闻数据</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'ul#localnews-focus li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">'div#localnews-zixun ul li a'</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">'href'</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>修改<code>app.get('/')</code>路由为：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\"> * [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> */</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 http://localhost:3000时，就会后面的async函数</span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">'/'</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">})</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote>\n<p>此时，<code>DOS</code>命令行中重新让项目跑起来，浏览器访问<code>https://localhost:3000</code>，看看页面展示的信息，看是否抓取到了<code>“本地新闻”</code>数据！</p>\n</blockquote>\n<p><strong>至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！</strong></p>\n<p><strong>最后总结一下，整体思路如下：</strong></p>\n<blockquote>\n<ol>\n<li><code>express</code>启动一个简单的<code>Http</code>服务</li>\n<li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM元</code>素</li>\n<li>使用<code>superagent</code>请求目标页面</li>\n<li><strong>动态页面（需要加载页面后运行<code>JS</code>或请求接口的页面）可以使用<code>Nightmare</code>模拟浏览器访问</strong></li>\n<li>使用<code>cheerio</code>获取页面元素，获取目标数据</li>\n</ol>\n</blockquote>\n<p>###完整代码</p>\n<blockquote>\n<p>爬虫完整代码GitHub地址：<a href=\"https://github.com/webCaolixin/news-Spider\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n</blockquote>\n\n</div>\n","slug":"coding-node","published":1,"date":"2019-02-27T09:12:34.652Z","updated":"2019-02-27T09:12:34.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmzfl1r0009h2c5xkv49ile","content":"<p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），<br>是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫</p>\n<p>文章转自<a href=\"https://segmentfault.com/a/1190000014811373\" target=\"_blank\" rel=\"noopener\">分分钟教你用node.js写个爬虫</a></p>\n<div id=\"articleContent\"><br><h3 id=\"一、什么是爬虫\"><a href=\"#一、什么是爬虫\" class=\"headerlink\" title=\"一、什么是爬虫\" target=\"_blank\"></a>一、什么是爬虫</h3><blockquote><br><p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在<code>FOAF</code>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">WIKIPEDIA 爬虫介绍</a></p><br></blockquote><br><h3 id=\"二、爬虫的分类\"><a href=\"#二、爬虫的分类\" class=\"headerlink\" title=\"二、爬虫的分类\" target=\"_blank\"></a>二、爬虫的分类</h3><ul><br><li>通用网络爬虫（全网爬虫）<blockquote><br><p>爬行对象从一些 <code>种子URL</code> 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p><br></blockquote><br></li><br></ul><br><a id=\"more\" target=\"_blank\"></a><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/1.jpg\"><img src=\"/medias/article/coding/news-spider/1.jpg\" alt=\"通用爬虫工作流程\"></div></p><br><ul><br><li><p>聚焦网络爬虫（主题网络爬虫）</p><br><blockquote><br><p>是 <code>指选择性</code> 地爬行那些与预先定义好的主题相关页面的网络爬虫。 </p><br></blockquote><br></li><br><li><p>增量式网络爬虫</p><br><blockquote><br><p>指对已下载网页采取增量式更新和 <code>只爬行新产生的或者已经发生变化网页</code> 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p><br></blockquote><br></li><br><li><p>Deep Web 爬虫</p><br><blockquote><br><p>爬行对象是一些在用户填入关键字搜索或登录后才能访问到的<code>深层网页信息</code>的爬虫。</p><br></blockquote><br></li><br></ul><br><h3 id=\"三、爬虫的爬行策略\"><a href=\"#三、爬虫的爬行策略\" class=\"headerlink\" title=\"三、爬虫的爬行策略\" target=\"_blank\"></a>三、爬虫的爬行策略</h3><ul><br><li>通用网络爬虫（全网爬虫）<blockquote><br><p>深度优先策略、广度优先策略</p><br></blockquote><br></li><br></ul><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/2.png\"><img src=\"/medias/article/coding/news-spider/2.png\" alt=\"页面关系模拟树状结构\"></div></p><br><ul><br><li><p>聚焦网络爬虫（主题网络爬虫）</p><br><blockquote><br><p>基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）</p><br></blockquote><br></li><br><li><p>增量式网络爬虫</p><br><blockquote><br><p> 统一更新法、个体更新法、基于分类的更新法、自适应调频更新法</p><br></blockquote><br></li><br><li><p>Deep Web 爬虫</p><br><blockquote><br><p>Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写</p><br></blockquote><br></li><br></ul><br><p><strong>现代的网页爬虫的行为通常是四种策略组合的结果：</strong></p><br><blockquote><br><p>选择策略：决定所要下载的页面；<br>重新访问策略：决定什么时候检查页面的更新变化；<br>平衡礼貌策略：指出怎样避免站点超载；<br>并行策略：指出怎么协同达到分布式抓取的效果；</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/3.jpg\"><img src=\"/medias/article/coding/news-spider/3.jpg\" alt=\"现代分布式爬虫系统\"></div></p><br><h3 id=\"四、写一个简单网页爬虫的流程\"><a href=\"#四、写一个简单网页爬虫的流程\" class=\"headerlink\" title=\"四、写一个简单网页爬虫的流程\" target=\"_blank\"></a>四、写一个简单网页爬虫的流程</h3><ol><br><li>确定爬取对象（网站/页面）</li><br><li>分析页面内容（目标数据/DOM结构）</li><br><li>确定开发语言、框架、工具等</li><br><li>编码 测试，爬取数据</li><br><li>优化</li><br></ol><br><h3 id=\"一个简单的百度新闻爬虫\"><a href=\"#一个简单的百度新闻爬虫\" class=\"headerlink\" title=\"一个简单的百度新闻爬虫\" target=\"_blank\"></a>一个简单的百度新闻爬虫</h3><h4 id=\"确定爬取对象（网站-页面）\"><a href=\"#确定爬取对象（网站-页面）\" class=\"headerlink\" title=\"确定爬取对象（网站/页面）\" target=\"_blank\"></a>确定爬取对象（网站/页面）</h4><blockquote><br><p><a href=\"http://news.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度新闻</a> （<a href=\"http://news.baidu.com/）\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/）</a></p><br></blockquote><br><h4 id=\"分析页面内容（目标数据-DOM结构）\"><a href=\"#分析页面内容（目标数据-DOM结构）\" class=\"headerlink\" title=\"分析页面内容（目标数据/DOM结构）\" target=\"_blank\"></a>分析页面内容（目标数据/DOM结构）</h4><blockquote><br><p>······</p><br></blockquote><br><h4 id=\"确定开发语言、框架、工具等\"><a href=\"#确定开发语言、框架、工具等\" class=\"headerlink\" title=\"确定开发语言、框架、工具等\" target=\"_blank\"></a>确定开发语言、框架、工具等</h4><blockquote><br><p><code>node.js (express)</code> + <code>SublimeText 3</code></p><br></blockquote><br><h4 id=\"编码，测试，爬取数据\"><a href=\"#编码，测试，爬取数据\" class=\"headerlink\" title=\"编码，测试，爬取数据\" target=\"_blank\"></a>编码，测试，爬取数据</h4><blockquote><br><p>coding ···</p><br></blockquote><br><h3 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\" target=\"_blank\"></a>Let’s start</h3><h4 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\" target=\"_blank\"></a>新建项目目录</h4><blockquote><br><p>1.在合适的磁盘目录下创建项目目录<code>baiduNews</code>（我的项目目录是：<code>F:\\web\\baiduNews</code>）</p><br></blockquote><br><p><strong>注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。</strong></p><br><h4 id=\"初始化package-json\"><a href=\"#初始化package-json\" class=\"headerlink\" title=\"初始化package.json\" target=\"_blank\"></a>初始化package.json</h4><blockquote><br><p>1.在DOS命令行中进入项目根目录 <code>baiduNews</code><br>2.执行<code>npm init</code>，初始化<code>package.json</code>文件</p><br></blockquote><br><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><blockquote><br><p><code>express</code> （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的<code>http</code>模块）<br><code>superagent</code> （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）<br><code>cheerio</code> （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）</p><br></blockquote><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> express</span></code></li><li class=\"L2\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> superagent</span></code></li><li class=\"L3\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> cheerio</span></code></li></ol></pre><p>依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。<br>安装正确后如下图：</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/4.jpg\"><img src=\"/medias/article/coding/news-spider/4.jpg\" alt=\"安装依赖包\"></div></p><br><h4 id=\"开始coding\"><a href=\"#开始coding\" class=\"headerlink\" title=\"开始coding\" target=\"_blank\"></a>开始coding</h4><p><strong> 一、使用<code>express</code>启动一个简单的本地Http服务器 </strong></p><br><p>1、在项目根目录下创建<code>index.js</code>文件（后面都会在这个index文件中进行coding）</p><br><p>2、创建好<code>index.js</code>后，我们首先实例化一个<code>express</code>对象，用它来启动一个本地监听<code>3000</code>端口的Http服务。</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> express </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘express’</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> express</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// …</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"kwd\">let</span><span class=\"pln\"> server </span><span class=\"pun\">=</span><span class=\"pln\"> app</span><span class=\"pun\">.</span><span class=\"pln\">listen</span><span class=\"pun\">(</span><span class=\"lit\">3000</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> host </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">address</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> port </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">port</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">‘Your App is running at http://%s:%s’</span><span class=\"pun\">,</span><span class=\"pln\"> host</span><span class=\"pun\">,</span><span class=\"pln\"> port</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。</p><br><p>3、按照国际惯例，我们希望在访问本机地址<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>的时候，这个服务能给我们犯规一个<code>Hello World！</code>在<code>index.js</code>中加入如下代码：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"str\">‘Hello World!’</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>此时，在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>,你就会发现页面上显示’Hellow World!’字样。<br>这样，在后面我们获取到百度新闻首页的信息后，就可以在访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>时看到这些信息。</p><br></blockquote><br><p><strong>二、抓取百度新闻首页的新闻信息</strong></p><br><p>1、 首先，我们先来分析一下百度新闻首页的页面信息。</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/5.jpg\"><img src=\"/medias/article/coding/news-spider/5.jpg\" alt=\"百度新闻首页\"></div></p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/6.jpg\"><img src=\"/medias/article/coding/news-spider/6.jpg\" alt=\"百度新闻首页\"></div></p><br><blockquote><br><p>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”……等。这次我们先来尝试抓取左侧<code>“热点新闻”</code>和下方的<code>“本地新闻”</code>两处的新闻数据。</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/7.jpg\"><img src=\"/medias/article/coding/news-spider/7.jpg\" alt=\"热点新闻DOM结构\"></div></p><br><blockquote><br><p><code>F12</code>打开<code>Chrome</code>的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在<code>DOM</code>的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在<code>id</code>为<code>#pane-news</code>的<code>&lt;div</code>&gt;下面<code>&lt;ul&gt;</code>下<code>&lt;li&gt;</code>下的<code>&lt;a&gt;</code>标签中。用<code>jQuery</code>的选择器表示为：<code>#pane-news ul li a</code>。</p><br></blockquote><br><p>2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> superagent</span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘superagent’</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                                </span><span class=\"com\">// 热点新闻</span></code></li><li class=\"L4\"><code><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                              </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"com\">/<strong></strong></span></code></li><li class=\"L7\"><code><span class=\"com\"> <em> index.js</em></span></code></li><li class=\"L8\"><code><span class=\"com\">  [description] - 使用superagent.get()方法来访问百度新闻首页</span></code></li><li class=\"L9\"><code><span class=\"com\"> */</span></code></li><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>热点新闻抓取失败 - ${err}</code></span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res</a></span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>3、获取页面信息后，我们来定义一个函数<code>getHotNews()</code>来抓取页面内的“热点新闻”数据。</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/</span></code></li><li class=\"L1\"><code><span class=\"com\"> <em> index.js</em></span></code></li><li class=\"L2\"><code><span class=\"com\">  [description] - 抓取热点新闻页面</span></code></li><li class=\"L3\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L4\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L5\"><code><span class=\"kwd\">const</span><span class=\"pln\"> cheerio </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘cheerio’</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getHotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res.text中。\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res.text中。</a></span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"com\">/ 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数</span></code></li><li class=\"L2\"><code><span class=\"com\">     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素</span></code></li><li class=\"L3\"><code><span class=\"com\">   <em>/</em></span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 找到目标数据所在的页面元素，获取数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘div#pane-news ul li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"com\">// cherrio中$(‘selector’).each()用来遍历所有匹配到的DOM元素</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span><span class=\"pln\">        </span><span class=\"com\">// 获取新闻标题</span></code></li><li class=\"L2\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">)</span><span class=\"pln\">    </span><span class=\"com\">// 获取新闻网页链接</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L4\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span><span class=\"pln\">              </span><span class=\"com\">// 存入最终结果数组</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> hotNews</span></code></li><li class=\"L7\"><code><span class=\"pun\">};</span></code></li></ol></pre><blockquote><br><p>这里要多说几点：</p><br><ol><br><li><code>async/await</code>据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。<code>Promise</code>解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。</li><br><li><code>superagent</code>模块提供了很多比如<code>get</code>、<code>post</code>、<code>delte</code>等方法，可以很方便地进行Ajax请求操作。在请求结束后执行<code>.end()</code>回调函数。<code>.end()</code>接受一个函数作为参数，该函数又有两个参数<code>error和res</code>。当请求失败，<code>error</code>会包含返回的错误信息，请求成功，<code>error</code>值为<code>null</code>，返回的数据会包含在<code>res</code>参数中。</li><br><li><code>cheerio</code>模块的<code>.load()</code>方法，将<code>HTML document</code>作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于<code>jQuery</code>中的<code>.each()</code>来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。</li><br></ol><br></blockquote><br><p>4、将抓取的数据返回给前端浏览器</p><br><blockquote><br><p>前面，<code>const app = express();</code>实例化了一个<code>express</code>对象<code>app</code>。<br><code>app.get(‘’, async() =&gt; {})</code>接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。</p><br></blockquote><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\">  [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 <a href=\"http://localhost:3000时，就会后面的async函数\" target=\"_blank\" rel=\"noopener\">http://localhost:3000时，就会后面的async函数</a></span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">hotNews</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：<br><strong>注：因为我的<code>Chrome</code><a href=\"https://www.cnblogs.com/whycxb/p/7126116.html\" target=\"_blank\" rel=\"noopener\">安装了JSONView扩展程序</a>，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。</strong></p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/9.jpg\"><img src=\"/medias/article/coding/news-spider/9.jpg\" alt=\"热点新闻抓取结果\"></div></p><br><p><strong>OK！！这样，一个简单的百度<code>“热点新闻”</code>的爬虫就大功告成啦！！</strong></p><br><blockquote><br><p>简单总结一下，其实步骤很简单：</p><br><ol><br><li><code>express</code>启动一个简单的<code>Http</code>服务</li><br><li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM</code>元素</li><br><li>使用<code>superagent</code>请求目标页面</li><br><li>使用<code>cheerio</code>获取页面元素，获取目标数据</li><br><li>返回数据到前端浏览器</li><br></ol><br></blockquote><br><p><strong>现在，继续我们的目标，抓取<code>“本地新闻”</code>数据（编码过程中，我们会遇到一些有意思的问题）</strong><br>有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。<br>1、 分析页面中“本地新闻”部分的<code>DOM</code>结构，如下图：</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/10.jpg\"><img src=\"/medias/article/coding/news-spider/10.jpg\" alt=\"百度新闻本地新闻\"></div></p><br><blockquote><br><p><code>F12</code>打开控制台，审查“本地新闻”<code>DOM</code>元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在<code>id</code>为<code>#local_news</code>的<code>div</code>中。“左侧新闻”数据又在<code>id</code>为<code>#localnews-focus</code>的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。“本地资讯”数据又在<code>id</code>为<code>#localnews-zixun</code>的<code>div</code>下的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。</p><br></blockquote><br><p>2、OK！分析了<code>DOM</code>结构，确定了数据的位置，接下来和爬取<code>“热点新闻”</code>一样，按部就班，定义一个<code>getLocalNews()</code>函数，爬取这些数据。</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\">  [description] - 抓取本地新闻页面</span></code></li><li class=\"L2\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘ul#localnews-focus li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘div#localnews-zixun ul li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">};</span></code></li></ol></pre><p>对应的，在<code>superagent.get()</code>中请求页面后，我们需要调用<code>getLocalNews()</code>函数，来爬去本地新闻数据。<br><code>superagent.get()</code>函数修改为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>热点新闻抓取失败 - ${err}</code></span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res</a></span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">   localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>同时，我们要在<code>app.get()</code>路由中也要将数据返回给前端浏览器。<code>app.get()</code>路由代码修改为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\">  [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 <a href=\"http://localhost:3000时，就会后面的async函数\" target=\"_blank\" rel=\"noopener\">http://localhost:3000时，就会后面的async函数</a></span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>编码完成，激动不已！！<code>DOS</code>中让项目跑起来，用浏览器访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code></p><br></blockquote><br><p><strong>尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组<code>[ ]</code>。检查代码，发现也没有问题，但为什么一直返回的空数组呢？</strong><br><strong>经过一番原因查找，才返现问题出在哪里！！</strong></p><br><h3 id=\"一个有意思的问题\"><a href=\"#一个有意思的问题\" class=\"headerlink\" title=\"一个有意思的问题\" target=\"_blank\"></a>一个有意思的问题</h3><blockquote><br><p>为了找到原因，首先，我们看看用<code>superagent.get(‘<a href=\"http://news.baidu.com/&#39;).end\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;).end</a>((err, res) =&gt; {})</code>请求百度新闻首页在回调函数<code>.end()</code>中的第二个参数res中到底拿到了什么内容？</p><br></blockquote><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 新定义一个全局变量 pageRes</span></code></li><li class=\"L1\"><code><span class=\"kwd\">let</span><span class=\"pln\"> pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">        </span><span class=\"com\">// supergaent页面返回值</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// superagent.get()中将res存入pageRes</span></code></li><li class=\"L4\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L7\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>热点新闻抓取失败 - ${err}</code></span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res</a></span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// hotNews = getHotNews(res)</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews = getLocalNews(res)</span></code></li><li class=\"L3\"><code><span class=\"pln\">    pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> res</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code><span class=\"pun\">});</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"com\">// 将pageRes返回给前端浏览器，便于查看</span></code></li><li class=\"L8\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// {}hotNews: hotNews,</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews: localNews,</span></code></li><li class=\"L2\"><code><span class=\"pln\">    pageRes</span><span class=\"pun\">:</span><span class=\"pln\"> pageRes</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>访问浏览器<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>，页面展示如下内容：</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/11.jpg\"><img src=\"/medias/article/coding/news-spider/11.jpg\" alt=\"superagent.get()请求返回值\"></div></p><br><blockquote><br><p>可以看到，返回值中的<code>text</code>字段应该就是整个页面的<code>HTML</code>代码的字符串格式。为了方便我们观察，可以直接把这个<code>text</code>字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。</p><br></blockquote><br><p>修改给前端浏览器的返回值</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">pageRes</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>访问浏览器<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>，页面展示如下内容：</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/12.jpg\"><img src=\"/medias/article/coding/news-spider/12.jpg\" alt=\"本地新闻返回页面\"></div></p><br><blockquote><br><p>审查元素才发现，原来我们抓取的目标数据所在的<code>DOM</code>元素中是空的，里面没有数据！<br>到这里，一切水落石出！在我们使用<code>superagent.get()</code>访问百度新闻首页时，<code>res</code>中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，<code>DOM</code>节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组<code>[ ]</code>。</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/13.jpg\"><img src=\"/medias/article/coding/news-spider/13.jpg\" alt=\"本地新闻请求接口\"></div></p><br><blockquote><br><p>在控制台的<code>Network</code>中我们发现页面请求了一次这样的接口：<br><code><a href=\"http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917</a></code>，接口状态 <code>404</code>。<br>这应该就是百度新闻获取<code>“本地新闻”</code>的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用<code>superagent.get()</code>请求的页面再去请求这个接口时，接口<code>URL</code>中<code>hostname</code>部分变成了本地<code>IP</code>地址，而本机上没有这个接口，所以<code>404</code>，请求不到数据。</p><br></blockquote><br><p><strong>找到原因，我们来想办法解决这个问题！！</strong></p><br><blockquote><br><ol><br><li>直接使用<code>superagen</code>t访问正确合法的百度<code>“本地新闻”</code>的接口，获取数据后返回给前端浏览器。</li><br><li>使用第三方<code>npm</code>包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当<code>“本地新闻”</code>加载成功后，抓取数据，返回给前端浏览器。</li><br></ol><br></blockquote><br><p><strong>以上方法均可，我们来试试比较有意思的第二种方法</strong></p><br><h3 id=\"使用Nightmare自动化测试工具\"><a href=\"#使用Nightmare自动化测试工具\" class=\"headerlink\" title=\"使用Nightmare自动化测试工具\" target=\"_blank\"></a>使用<code>Nightmare</code>自动化测试工具</h3><blockquote><br><p><code>Electron</code>可以让你使用纯<code>JavaScript</code>调用<code>Chrome</code>丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的<code>Node.js</code>的变体，而不是<code>Web</code>服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互</p><br></blockquote><br><blockquote><br><p><code>Nightmare</code>是一个基于<code>Electron</code>的框架，针对<code>Web</code>自动化测试和爬虫，因为其具有跟<code>PlantomJS</code>一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟<code>Request</code>库一样直接访问<code>URL</code>来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。</p><br></blockquote><br><h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 安装nightmare</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> nightmare</span></code></li></ol></pre><h4 id=\"为获取“本地新闻”，继续coding…\"><a href=\"#为获取“本地新闻”，继续coding…\" class=\"headerlink\" title=\"为获取“本地新闻”，继续coding…\" target=\"_blank\"></a>为获取“本地新闻”，继续coding…</h4><p>给<code>index.js</code>中新增如下代码：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘nightmare’</span><span class=\"pun\">);</span><span class=\"pln\">          </span><span class=\"com\">// 自动化测试包，处理动态页面</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> nightmare </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pun\">({</span><span class=\"pln\"> show</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pln\"> </span><span class=\"pun\">});</span><span class=\"pln\">     </span><span class=\"com\">// show:true  显示内置模拟浏览器</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">/**</span></code></li><li class=\"L4\"><code><span class=\"com\">  [description] - 抓取本地新闻页面</span></code></li><li class=\"L5\"><code><span class=\"com\"> <em> [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，</em></span></code></li><li class=\"L6\"><code><span class=\"com\">  所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，</span></code></li><li class=\"L7\"><code><span class=\"com\"> <em> 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取</em></span></code></li><li class=\"L8\"><code><span class=\"com\"> /</span></code></li><li class=\"L9\"><code><span class=\"com\">// 抓取本地新闻页面</span></code></li><li class=\"L0\"><code><span class=\"pln\">nightmare</span></code></li><li class=\"L1\"><code><span class=\"pun\">.</span><span class=\"kwd\">goto</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">.</span><span class=\"pln\">wait</span><span class=\"pun\">(</span><span class=\"str\">“div#local_news”</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"pun\">.</span><span class=\"pln\">evaluate</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">querySelector</span><span class=\"pun\">(</span><span class=\"str\">“div#local_news”</span><span class=\"pun\">).</span><span class=\"pln\">innerHTML</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pun\">.</span><span class=\"kwd\">then</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"com\">// 获取本地新闻数据</span></code></li><li class=\"L6\"><code><span class=\"pln\">  localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pun\">})</span></code></li><li class=\"L8\"><code><span class=\"pun\">.</span><span class=\"kwd\">catch</span><span class=\"pun\">(</span><span class=\"pln\">error </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>本地新闻抓取失败 - ${error}</code></span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pun\">})</span></code></li></ol></pre><p>修改<code>getLocalNews()</code>函数为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/<strong></strong></span></code></li><li class=\"L1\"><code><span class=\"com\"> <em> [description]- 获取本地新闻数据</em></span></code></li><li class=\"L2\"><code><span class=\"com\"> /</span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘ul#localnews-focus li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘div#localnews-zixun ul li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>修改<code>app.get(‘/‘)</code>路由为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/</span></code></li><li class=\"L1\"><code><span class=\"com\"> <em> [description] - 跟路由</em></span></code></li><li class=\"L2\"><code><span class=\"com\"> /</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 <a href=\"http://localhost:3000时，就会后面的async函数\" target=\"_blank\" rel=\"noopener\">http://localhost:3000时，就会后面的async函数</a></span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">})</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>此时，<code>DOS</code>命令行中重新让项目跑起来，浏览器访问<code><a href=\"https://localhost:3000\" target=\"_blank\" rel=\"noopener\">https://localhost:3000</a></code>，看看页面展示的信息，看是否抓取到了<code>“本地新闻”</code>数据！</p><br></blockquote><br><p><strong>至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！</strong></p><br><p><strong>最后总结一下，整体思路如下：</strong></p><br><blockquote><br><ol><br><li><code>express</code>启动一个简单的<code>Http</code>服务</li><br><li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM元</code>素</li><br><li>使用<code>superagent</code>请求目标页面</li><br><li><strong>动态页面（需要加载页面后运行<code>JS</code>或请求接口的页面）可以使用<code>Nightmare</code>模拟浏览器访问</strong></li><br><li>使用<code>cheerio</code>获取页面元素，获取目标数据</li><br></ol><br></blockquote><br><p>###完整代码</p><br><blockquote><br><p>爬虫完整代码GitHub地址：<a href=\"https://github.com/webCaolixin/news-Spider\" target=\"_blank\" rel=\"noopener\">完整代码</a></p><br></blockquote><br><br></div>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），<br>是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫</p>\n<p>文章转自<a href=\"https://segmentfault.com/a/1190000014811373\" target=\"_blank\" rel=\"noopener\">分分钟教你用node.js写个爬虫</a></p>\n<div id=\"articleContent\"><br><h3 id=\"一、什么是爬虫\"><a href=\"#一、什么是爬虫\" class=\"headerlink\" title=\"一、什么是爬虫\" target=\"_blank\"></a>一、什么是爬虫</h3><blockquote><br><p><a href=\"https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/5162711?fr=aladdin&amp;fromid=22046949&amp;fromtitle=%E7%88%AC%E8%99%AB\" target=\"_blank\" rel=\"noopener\">网络爬虫</a>（又被称为网页蜘蛛，网络机器人，在<code>FOAF</code>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。<br><a href=\"https://en.wikipedia.org/wiki/Web_crawler\" target=\"_blank\" rel=\"noopener\">WIKIPEDIA 爬虫介绍</a></p><br></blockquote><br><h3 id=\"二、爬虫的分类\"><a href=\"#二、爬虫的分类\" class=\"headerlink\" title=\"二、爬虫的分类\" target=\"_blank\"></a>二、爬虫的分类</h3><ul><br><li>通用网络爬虫（全网爬虫）<blockquote><br><p>爬行对象从一些 <code>种子URL</code> 扩充到整个 Web，主要为门户站点搜索引擎和大型 Web 服务提供商采集数据。</p><br></blockquote><br></li><br></ul><br><a id=\"more\" target=\"_blank\"></a><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/1.jpg\"><img src=\"/medias/article/coding/news-spider/1.jpg\" alt=\"通用爬虫工作流程\"></div></p><br><ul><br><li><p>聚焦网络爬虫（主题网络爬虫）</p><br><blockquote><br><p>是 <code>指选择性</code> 地爬行那些与预先定义好的主题相关页面的网络爬虫。 </p><br></blockquote><br></li><br><li><p>增量式网络爬虫</p><br><blockquote><br><p>指对已下载网页采取增量式更新和 <code>只爬行新产生的或者已经发生变化网页</code> 的爬虫，它能够在一定程度上保证所爬行的页面是尽可能新的页面。</p><br></blockquote><br></li><br><li><p>Deep Web 爬虫</p><br><blockquote><br><p>爬行对象是一些在用户填入关键字搜索或登录后才能访问到的<code>深层网页信息</code>的爬虫。</p><br></blockquote><br></li><br></ul><br><h3 id=\"三、爬虫的爬行策略\"><a href=\"#三、爬虫的爬行策略\" class=\"headerlink\" title=\"三、爬虫的爬行策略\" target=\"_blank\"></a>三、爬虫的爬行策略</h3><ul><br><li>通用网络爬虫（全网爬虫）<blockquote><br><p>深度优先策略、广度优先策略</p><br></blockquote><br></li><br></ul><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/2.png\"><img src=\"/medias/article/coding/news-spider/2.png\" alt=\"页面关系模拟树状结构\"></div></p><br><ul><br><li><p>聚焦网络爬虫（主题网络爬虫）</p><br><blockquote><br><p>基于内容评价的爬行策略（内容相关性），基于链接结构评价的爬行策略、基于增强学习的爬行策略（链接重要性），基于语境图的爬行策略（距离，图论中两节点间边的权重）</p><br></blockquote><br></li><br><li><p>增量式网络爬虫</p><br><blockquote><br><p> 统一更新法、个体更新法、基于分类的更新法、自适应调频更新法</p><br></blockquote><br></li><br><li><p>Deep Web 爬虫</p><br><blockquote><br><p>Deep Web 爬虫爬行过程中最重要部分就是表单填写，包含两种类型：基于领域知识的表单填写、基于网页结构分析的表单填写</p><br></blockquote><br></li><br></ul><br><p><strong>现代的网页爬虫的行为通常是四种策略组合的结果：</strong></p><br><blockquote><br><p>选择策略：决定所要下载的页面；<br>重新访问策略：决定什么时候检查页面的更新变化；<br>平衡礼貌策略：指出怎样避免站点超载；<br>并行策略：指出怎么协同达到分布式抓取的效果；</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/3.jpg\"><img src=\"/medias/article/coding/news-spider/3.jpg\" alt=\"现代分布式爬虫系统\"></div></p><br><h3 id=\"四、写一个简单网页爬虫的流程\"><a href=\"#四、写一个简单网页爬虫的流程\" class=\"headerlink\" title=\"四、写一个简单网页爬虫的流程\" target=\"_blank\"></a>四、写一个简单网页爬虫的流程</h3><ol><br><li>确定爬取对象（网站/页面）</li><br><li>分析页面内容（目标数据/DOM结构）</li><br><li>确定开发语言、框架、工具等</li><br><li>编码 测试，爬取数据</li><br><li>优化</li><br></ol><br><h3 id=\"一个简单的百度新闻爬虫\"><a href=\"#一个简单的百度新闻爬虫\" class=\"headerlink\" title=\"一个简单的百度新闻爬虫\" target=\"_blank\"></a>一个简单的百度新闻爬虫</h3><h4 id=\"确定爬取对象（网站-页面）\"><a href=\"#确定爬取对象（网站-页面）\" class=\"headerlink\" title=\"确定爬取对象（网站/页面）\" target=\"_blank\"></a>确定爬取对象（网站/页面）</h4><blockquote><br><p><a href=\"http://news.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度新闻</a> （<a href=\"http://news.baidu.com/）\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/）</a></p><br></blockquote><br><h4 id=\"分析页面内容（目标数据-DOM结构）\"><a href=\"#分析页面内容（目标数据-DOM结构）\" class=\"headerlink\" title=\"分析页面内容（目标数据/DOM结构）\" target=\"_blank\"></a>分析页面内容（目标数据/DOM结构）</h4><blockquote><br><p>······</p><br></blockquote><br><h4 id=\"确定开发语言、框架、工具等\"><a href=\"#确定开发语言、框架、工具等\" class=\"headerlink\" title=\"确定开发语言、框架、工具等\" target=\"_blank\"></a>确定开发语言、框架、工具等</h4><blockquote><br><p><code>node.js (express)</code> + <code>SublimeText 3</code></p><br></blockquote><br><h4 id=\"编码，测试，爬取数据\"><a href=\"#编码，测试，爬取数据\" class=\"headerlink\" title=\"编码，测试，爬取数据\" target=\"_blank\"></a>编码，测试，爬取数据</h4><blockquote><br><p>coding ···</p><br></blockquote><br><h3 id=\"Let’s-start\"><a href=\"#Let’s-start\" class=\"headerlink\" title=\"Let’s start\" target=\"_blank\"></a>Let’s start</h3><h4 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\" target=\"_blank\"></a>新建项目目录</h4><blockquote><br><p>1.在合适的磁盘目录下创建项目目录<code>baiduNews</code>（我的项目目录是：<code>F:\\web\\baiduNews</code>）</p><br></blockquote><br><p><strong>注：因为在写这篇文章的时候用的电脑真心比较渣。安装WebStorm或者VsCode跑项目有些吃力。所以后面的命令行操作我都是在Window自带的DOS命令行窗口中执行的。</strong></p><br><h4 id=\"初始化package-json\"><a href=\"#初始化package-json\" class=\"headerlink\" title=\"初始化package.json\" target=\"_blank\"></a>初始化package.json</h4><blockquote><br><p>1.在DOS命令行中进入项目根目录 <code>baiduNews</code><br>2.执行<code>npm init</code>，初始化<code>package.json</code>文件</p><br></blockquote><br><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><blockquote><br><p><code>express</code> （使用express来搭建一个简单的Http服务器。当然，你也可以使用node中自带的<code>http</code>模块）<br><code>superagent</code> （superagent是node里一个非常方便的、轻量的、渐进式的第三方客户端请求代理模块，用他来请求目标页面）<br><code>cheerio</code> （cheerio相当于node版的jQuery，用过jQuery的同学会非常容易上手。它主要是用来获取抓取到的页面元素和其中的数据信息）</p><br></blockquote><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 个人比较喜欢使用yarn来安装依赖包,当然你也可以使用 npm install 来安装依赖，看个人习惯。</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> express</span></code></li><li class=\"L2\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> superagent</span></code></li><li class=\"L3\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> cheerio</span></code></li></ol></pre><p>依赖安装完成后你可以在package.json中查看刚才安装的依赖是否成功。<br>安装正确后如下图：</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/4.jpg\"><img src=\"/medias/article/coding/news-spider/4.jpg\" alt=\"安装依赖包\"></div></p><br><h4 id=\"开始coding\"><a href=\"#开始coding\" class=\"headerlink\" title=\"开始coding\" target=\"_blank\"></a>开始coding</h4><p><strong> 一、使用<code>express</code>启动一个简单的本地Http服务器 </strong></p><br><p>1、在项目根目录下创建<code>index.js</code>文件（后面都会在这个index文件中进行coding）</p><br><p>2、创建好<code>index.js</code>后，我们首先实例化一个<code>express</code>对象，用它来启动一个本地监听<code>3000</code>端口的Http服务。</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> express </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘express’</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> express</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// …</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"kwd\">let</span><span class=\"pln\"> server </span><span class=\"pun\">=</span><span class=\"pln\"> app</span><span class=\"pun\">.</span><span class=\"pln\">listen</span><span class=\"pun\">(</span><span class=\"lit\">3000</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> host </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">address</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> port </span><span class=\"pun\">=</span><span class=\"pln\"> server</span><span class=\"pun\">.</span><span class=\"pln\">address</span><span class=\"pun\">().</span><span class=\"pln\">port</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\">‘Your App is running at http://%s:%s’</span><span class=\"pun\">,</span><span class=\"pln\"> host</span><span class=\"pun\">,</span><span class=\"pln\"> port</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>对，就是这么简单，不到10行代码，搭建启动一个简单的本地Http服务。</p><br><p>3、按照国际惯例，我们希望在访问本机地址<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>的时候，这个服务能给我们犯规一个<code>Hello World！</code>在<code>index.js</code>中加入如下代码：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"str\">‘Hello World!’</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>此时，在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>,你就会发现页面上显示’Hellow World!’字样。<br>这样，在后面我们获取到百度新闻首页的信息后，就可以在访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>时看到这些信息。</p><br></blockquote><br><p><strong>二、抓取百度新闻首页的新闻信息</strong></p><br><p>1、 首先，我们先来分析一下百度新闻首页的页面信息。</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/5.jpg\"><img src=\"/medias/article/coding/news-spider/5.jpg\" alt=\"百度新闻首页\"></div></p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/6.jpg\"><img src=\"/medias/article/coding/news-spider/6.jpg\" alt=\"百度新闻首页\"></div></p><br><blockquote><br><p>百度新闻首页大体上分为“热点新闻”、“本地新闻”、“国内新闻”、“国际新闻”……等。这次我们先来尝试抓取左侧<code>“热点新闻”</code>和下方的<code>“本地新闻”</code>两处的新闻数据。</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/7.jpg\"><img src=\"/medias/article/coding/news-spider/7.jpg\" alt=\"热点新闻DOM结构\"></div></p><br><blockquote><br><p><code>F12</code>打开<code>Chrome</code>的控制台，审查页面元素，经过查看左侧“热点新闻”信息所在<code>DOM</code>的结构，我们发现所有的“热点新闻”信息（包括新闻标题和新闻页面链接）都在<code>id</code>为<code>#pane-news</code>的<code>&lt;div</code>&gt;下面<code>&lt;ul&gt;</code>下<code>&lt;li&gt;</code>下的<code>&lt;a&gt;</code>标签中。用<code>jQuery</code>的选择器表示为：<code>#pane-news ul li a</code>。</p><br></blockquote><br><p>2、为了爬取新闻数据，首先我们要用superagent请求目标页面，获取整个新闻首页信息</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> superagent</span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘superagent’</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                                </span><span class=\"com\">// 热点新闻</span></code></li><li class=\"L4\"><code><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span><span class=\"pln\">                              </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"com\">/<strong></strong></span></code></li><li class=\"L7\"><code><span class=\"com\"> <em> index.js</em></span></code></li><li class=\"L8\"><code><span class=\"com\">  [description] - 使用superagent.get()方法来访问百度新闻首页</span></code></li><li class=\"L9\"><code><span class=\"com\"> */</span></code></li><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>热点新闻抓取失败 - ${err}</code></span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res</a></span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>3、获取页面信息后，我们来定义一个函数<code>getHotNews()</code>来抓取页面内的“热点新闻”数据。</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/</span></code></li><li class=\"L1\"><code><span class=\"com\"> <em> index.js</em></span></code></li><li class=\"L2\"><code><span class=\"com\">  [description] - 抓取热点新闻页面</span></code></li><li class=\"L3\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L4\"><code><span class=\"com\">// 引入所需要的第三方包</span></code></li><li class=\"L5\"><code><span class=\"kwd\">const</span><span class=\"pln\"> cheerio </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘cheerio’</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getHotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res.text中。\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res.text中。</a></span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"com\">/ 使用cheerio模块的cherrio.load()方法，将HTMLdocument作为参数传入函数</span></code></li><li class=\"L2\"><code><span class=\"com\">     以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素</span></code></li><li class=\"L3\"><code><span class=\"com\">   <em>/</em></span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 找到目标数据所在的页面元素，获取数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘div#pane-news ul li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"com\">// cherrio中$(‘selector’).each()用来遍历所有匹配到的DOM元素</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 参数idx是当前遍历的元素的索引，ele就是当前便利的DOM元素</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span><span class=\"pln\">        </span><span class=\"com\">// 获取新闻标题</span></code></li><li class=\"L2\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">)</span><span class=\"pln\">    </span><span class=\"com\">// 获取新闻网页链接</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L4\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span><span class=\"pln\">              </span><span class=\"com\">// 存入最终结果数组</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> hotNews</span></code></li><li class=\"L7\"><code><span class=\"pun\">};</span></code></li></ol></pre><blockquote><br><p>这里要多说几点：</p><br><ol><br><li><code>async/await</code>据说是异步编程的终级解决方案,它可以让我们以同步的思维方式来进行异步编程。<code>Promise</code>解决了异步编程的“回调地狱”，async/await同时使异步流程控制变得友好而有清晰，有兴趣的同学可以去了解学习一下，真的很好用。</li><br><li><code>superagent</code>模块提供了很多比如<code>get</code>、<code>post</code>、<code>delte</code>等方法，可以很方便地进行Ajax请求操作。在请求结束后执行<code>.end()</code>回调函数。<code>.end()</code>接受一个函数作为参数，该函数又有两个参数<code>error和res</code>。当请求失败，<code>error</code>会包含返回的错误信息，请求成功，<code>error</code>值为<code>null</code>，返回的数据会包含在<code>res</code>参数中。</li><br><li><code>cheerio</code>模块的<code>.load()</code>方法，将<code>HTML document</code>作为参数传入函数，以后就可以使用类似jQuery的$(selectior)的方式来获取页面元素。同时可以使用类似于<code>jQuery</code>中的<code>.each()</code>来遍历元素。此外，还有很多方法，大家可以自行Google/Baidu。</li><br></ol><br></blockquote><br><p>4、将抓取的数据返回给前端浏览器</p><br><blockquote><br><p>前面，<code>const app = express();</code>实例化了一个<code>express</code>对象<code>app</code>。<br><code>app.get(‘’, async() =&gt; {})</code>接受两个参数，第一个参数接受一个String类型的路由路径，表示Ajax的请求路径。第二个参数接受一个函数Function，当请求此路径时就会执行这个函数中的代码。</p><br></blockquote><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\">  [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 <a href=\"http://localhost:3000时，就会后面的async函数\" target=\"_blank\" rel=\"noopener\">http://localhost:3000时，就会后面的async函数</a></span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">hotNews</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>在DOS中项目根目录<code>baiduNews</code>下执行<code>node index.js</code>,让项目跑起来。之后，打开浏览器，访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>,你就会发现抓取到的数据返回到了前端页面。我运行代码后浏览器展示的返回信息如下：<br><strong>注：因为我的<code>Chrome</code><a href=\"https://www.cnblogs.com/whycxb/p/7126116.html\" target=\"_blank\" rel=\"noopener\">安装了JSONView扩展程序</a>，所以返回的数据在页面展示的时候会被自动格式化为结构性的JSON格式，方便查看。</strong></p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/9.jpg\"><img src=\"/medias/article/coding/news-spider/9.jpg\" alt=\"热点新闻抓取结果\"></div></p><br><p><strong>OK！！这样，一个简单的百度<code>“热点新闻”</code>的爬虫就大功告成啦！！</strong></p><br><blockquote><br><p>简单总结一下，其实步骤很简单：</p><br><ol><br><li><code>express</code>启动一个简单的<code>Http</code>服务</li><br><li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM</code>元素</li><br><li>使用<code>superagent</code>请求目标页面</li><br><li>使用<code>cheerio</code>获取页面元素，获取目标数据</li><br><li>返回数据到前端浏览器</li><br></ol><br></blockquote><br><p><strong>现在，继续我们的目标，抓取<code>“本地新闻”</code>数据（编码过程中，我们会遇到一些有意思的问题）</strong><br>有了前面的基础，我们自然而然的会想到利用和上面相同的方法“本地新闻”数据。<br>1、 分析页面中“本地新闻”部分的<code>DOM</code>结构，如下图：</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/10.jpg\"><img src=\"/medias/article/coding/news-spider/10.jpg\" alt=\"百度新闻本地新闻\"></div></p><br><blockquote><br><p><code>F12</code>打开控制台，审查“本地新闻”<code>DOM</code>元素，我们发现，“本地新闻”分为两个主要部分，“左侧新闻”和右侧的“新闻资讯”。这所有目标数据都在<code>id</code>为<code>#local_news</code>的<code>div</code>中。“左侧新闻”数据又在<code>id</code>为<code>#localnews-focus</code>的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。“本地资讯”数据又在<code>id</code>为<code>#localnews-zixun</code>的<code>div</code>下的<code>ul</code>标签下的<code>li</code>标签下的<code>a</code>标签中，包括新闻标题和页面链接。</p><br></blockquote><br><p>2、OK！分析了<code>DOM</code>结构，确定了数据的位置，接下来和爬取<code>“热点新闻”</code>一样，按部就班，定义一个<code>getLocalNews()</code>函数，爬取这些数据。</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\">  [description] - 抓取本地新闻页面</span></code></li><li class=\"L2\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘ul#localnews-focus li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘div#localnews-zixun ul li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">};</span></code></li></ol></pre><p>对应的，在<code>superagent.get()</code>中请求页面后，我们需要调用<code>getLocalNews()</code>函数，来爬去本地新闻数据。<br><code>superagent.get()</code>函数修改为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L3\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>热点新闻抓取失败 - ${err}</code></span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">   </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res</a></span></code></li><li class=\"L6\"><code><span class=\"pln\">   </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L7\"><code><span class=\"pln\">   hotNews </span><span class=\"pun\">=</span><span class=\"pln\"> getHotNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">   localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">res</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pun\">});</span></code></li></ol></pre><p>同时，我们要在<code>app.get()</code>路由中也要将数据返回给前端浏览器。<code>app.get()</code>路由代码修改为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/**</span></code></li><li class=\"L1\"><code><span class=\"com\">  [description] - 跟路由</span></code></li><li class=\"L2\"><code><span class=\"com\"> <em>/</em></span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 <a href=\"http://localhost:3000时，就会后面的async函数\" target=\"_blank\" rel=\"noopener\">http://localhost:3000时，就会后面的async函数</a></span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>编码完成，激动不已！！<code>DOS</code>中让项目跑起来，用浏览器访问<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code></p><br></blockquote><br><p><strong>尴尬的事情发生了！！返回的数据只有热点新闻，而本地新闻返回一个空数组<code>[ ]</code>。检查代码，发现也没有问题，但为什么一直返回的空数组呢？</strong><br><strong>经过一番原因查找，才返现问题出在哪里！！</strong></p><br><h3 id=\"一个有意思的问题\"><a href=\"#一个有意思的问题\" class=\"headerlink\" title=\"一个有意思的问题\" target=\"_blank\"></a>一个有意思的问题</h3><blockquote><br><p>为了找到原因，首先，我们看看用<code>superagent.get(‘<a href=\"http://news.baidu.com/&#39;).end\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;).end</a>((err, res) =&gt; {})</code>请求百度新闻首页在回调函数<code>.end()</code>中的第二个参数res中到底拿到了什么内容？</p><br></blockquote><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 新定义一个全局变量 pageRes</span></code></li><li class=\"L1\"><code><span class=\"kwd\">let</span><span class=\"pln\"> pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{};</span><span class=\"pln\">        </span><span class=\"com\">// supergaent页面返回值</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">// superagent.get()中将res存入pageRes</span></code></li><li class=\"L4\"><code><span class=\"pln\">superagent</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">).</span><span class=\"kwd\">end</span><span class=\"pun\">((</span><span class=\"pln\">err</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">err</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"com\">// 如果访问失败或者出错，会这行这里</span></code></li><li class=\"L7\"><code><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>热点新闻抓取失败 - ${err}</code></span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"com\">// 访问成功，请求<a href=\"http://news.baidu.com/页面所返回的数据会包含在res\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/页面所返回的数据会包含在res</a></span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// 抓取热点新闻数据</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// hotNews = getHotNews(res)</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews = getLocalNews(res)</span></code></li><li class=\"L3\"><code><span class=\"pln\">    pageRes </span><span class=\"pun\">=</span><span class=\"pln\"> res</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code><span class=\"pun\">});</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"com\">// 将pageRes返回给前端浏览器，便于查看</span></code></li><li class=\"L8\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"com\">// {}hotNews: hotNews,</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"com\">// localNews: localNews,</span></code></li><li class=\"L2\"><code><span class=\"pln\">    pageRes</span><span class=\"pun\">:</span><span class=\"pln\"> pageRes</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>访问浏览器<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>，页面展示如下内容：</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/11.jpg\"><img src=\"/medias/article/coding/news-spider/11.jpg\" alt=\"superagent.get()请求返回值\"></div></p><br><blockquote><br><p>可以看到，返回值中的<code>text</code>字段应该就是整个页面的<code>HTML</code>代码的字符串格式。为了方便我们观察，可以直接把这个<code>text</code>字段值返回给前端浏览器，这样我们就能够清晰地看到经过浏览器渲染后的页面。</p><br></blockquote><br><p>修改给前端浏览器的返回值</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">(</span><span class=\"pln\">pageRes</span><span class=\"pun\">.</span><span class=\"pln\">text</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>访问浏览器<code><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></code>，页面展示如下内容：</p><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/12.jpg\"><img src=\"/medias/article/coding/news-spider/12.jpg\" alt=\"本地新闻返回页面\"></div></p><br><blockquote><br><p>审查元素才发现，原来我们抓取的目标数据所在的<code>DOM</code>元素中是空的，里面没有数据！<br>到这里，一切水落石出！在我们使用<code>superagent.get()</code>访问百度新闻首页时，<code>res</code>中包含的获取的页面内容中，我们想要的“本地新闻”数据还没有生成，<code>DOM</code>节点元素是空的，所以出现前面的情况！抓取后返回的数据一直是空数组<code>[ ]</code>。</p><br></blockquote><br><p><div class=\"img-item\" data-src=\"/medias/article/coding/news-spider/13.jpg\"><img src=\"/medias/article/coding/news-spider/13.jpg\" alt=\"本地新闻请求接口\"></div></p><br><blockquote><br><p>在控制台的<code>Network</code>中我们发现页面请求了一次这样的接口：<br><code><a href=\"http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/widget?id=LocalNews&amp;ajax=json&amp;t=1526295667917</a></code>，接口状态 <code>404</code>。<br>这应该就是百度新闻获取<code>“本地新闻”</code>的接口，到这里一切都明白了！“本地新闻”是在页面加载后动态请求上面这个接口获取的，所以我们用<code>superagent.get()</code>请求的页面再去请求这个接口时，接口<code>URL</code>中<code>hostname</code>部分变成了本地<code>IP</code>地址，而本机上没有这个接口，所以<code>404</code>，请求不到数据。</p><br></blockquote><br><p><strong>找到原因，我们来想办法解决这个问题！！</strong></p><br><blockquote><br><ol><br><li>直接使用<code>superagen</code>t访问正确合法的百度<code>“本地新闻”</code>的接口，获取数据后返回给前端浏览器。</li><br><li>使用第三方<code>npm</code>包，模拟浏览器访问百度新闻首页，在这个模拟浏览器中当<code>“本地新闻”</code>加载成功后，抓取数据，返回给前端浏览器。</li><br></ol><br></blockquote><br><p><strong>以上方法均可，我们来试试比较有意思的第二种方法</strong></p><br><h3 id=\"使用Nightmare自动化测试工具\"><a href=\"#使用Nightmare自动化测试工具\" class=\"headerlink\" title=\"使用Nightmare自动化测试工具\" target=\"_blank\"></a>使用<code>Nightmare</code>自动化测试工具</h3><blockquote><br><p><code>Electron</code>可以让你使用纯<code>JavaScript</code>调用<code>Chrome</code>丰富的原生的接口来创造桌面应用。你可以把它看作一个专注于桌面应用的<code>Node.js</code>的变体，而不是<code>Web</code>服务器。其基于浏览器的应用方式可以极方便的做各种响应式的交互</p><br></blockquote><br><blockquote><br><p><code>Nightmare</code>是一个基于<code>Electron</code>的框架，针对<code>Web</code>自动化测试和爬虫，因为其具有跟<code>PlantomJS</code>一样的自动化测试的功能可以在页面上模拟用户的行为触发一些异步数据加载，也可以跟<code>Request</code>库一样直接访问<code>URL</code>来抓取数据，并且可以设置页面的延迟时间，所以无论是手动触发脚本还是行为触发脚本都是轻而易举的。</p><br></blockquote><br><h4 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\" target=\"_blank\"></a>安装依赖</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// 安装nightmare</span></code></li><li class=\"L1\"><code><span class=\"pln\">yarn </span><span class=\"kwd\">add</span><span class=\"pln\"> nightmare</span></code></li></ol></pre><h4 id=\"为获取“本地新闻”，继续coding…\"><a href=\"#为获取“本地新闻”，继续coding…\" class=\"headerlink\" title=\"为获取“本地新闻”，继续coding…\" target=\"_blank\"></a>为获取“本地新闻”，继续coding…</h4><p>给<code>index.js</code>中新增如下代码：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">require</span><span class=\"pun\">(</span><span class=\"str\">‘nightmare’</span><span class=\"pun\">);</span><span class=\"pln\">          </span><span class=\"com\">// 自动化测试包，处理动态页面</span></code></li><li class=\"L1\"><code><span class=\"kwd\">const</span><span class=\"pln\"> nightmare </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Nightmare</span><span class=\"pun\">({</span><span class=\"pln\"> show</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">true</span><span class=\"pln\"> </span><span class=\"pun\">});</span><span class=\"pln\">     </span><span class=\"com\">// show:true  显示内置模拟浏览器</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"com\">/**</span></code></li><li class=\"L4\"><code><span class=\"com\">  [description] - 抓取本地新闻页面</span></code></li><li class=\"L5\"><code><span class=\"com\"> <em> [nremark] - 百度本地新闻在访问页面后加载js定位IP位置后获取对应新闻，</em></span></code></li><li class=\"L6\"><code><span class=\"com\">  所以抓取本地新闻需要使用 nightmare 一类的自动化测试工具，</span></code></li><li class=\"L7\"><code><span class=\"com\"> <em> 模拟浏览器环境访问页面，使js运行，生成动态页面再抓取</em></span></code></li><li class=\"L8\"><code><span class=\"com\"> /</span></code></li><li class=\"L9\"><code><span class=\"com\">// 抓取本地新闻页面</span></code></li><li class=\"L0\"><code><span class=\"pln\">nightmare</span></code></li><li class=\"L1\"><code><span class=\"pun\">.</span><span class=\"kwd\">goto</span><span class=\"pun\">(</span><span class=\"str\">‘<a href=\"http://news.baidu.com/&#39;\" target=\"_blank\" rel=\"noopener\">http://news.baidu.com/&#39;</a></span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code><span class=\"pun\">.</span><span class=\"pln\">wait</span><span class=\"pun\">(</span><span class=\"str\">“div#local_news”</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code><span class=\"pun\">.</span><span class=\"pln\">evaluate</span><span class=\"pun\">(()</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> document</span><span class=\"pun\">.</span><span class=\"pln\">querySelector</span><span class=\"pun\">(</span><span class=\"str\">“div#local_news”</span><span class=\"pun\">).</span><span class=\"pln\">innerHTML</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pun\">.</span><span class=\"kwd\">then</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"com\">// 获取本地新闻数据</span></code></li><li class=\"L6\"><code><span class=\"pln\">  localNews </span><span class=\"pun\">=</span><span class=\"pln\"> getLocalNews</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pun\">})</span></code></li><li class=\"L8\"><code><span class=\"pun\">.</span><span class=\"kwd\">catch</span><span class=\"pun\">(</span><span class=\"pln\">error </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">  console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"str\"><code>本地新闻抓取失败 - ${error}</code></span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pun\">})</span></code></li></ol></pre><p>修改<code>getLocalNews()</code>函数为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/<strong></strong></span></code></li><li class=\"L1\"><code><span class=\"com\"> <em> [description]- 获取本地新闻数据</em></span></code></li><li class=\"L2\"><code><span class=\"com\"> /</span></code></li><li class=\"L3\"><code><span class=\"kwd\">let</span><span class=\"pln\"> getLocalNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> localNews </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[];</span></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">let</span><span class=\"pln\"> $ </span><span class=\"pun\">=</span><span class=\"pln\"> cheerio</span><span class=\"pun\">.</span><span class=\"pln\">load</span><span class=\"pun\">(</span><span class=\"pln\">htmlStr</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地新闻</span></code></li><li class=\"L8\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘ul#localnews-focus li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">idx</span><span class=\"pun\">,</span><span class=\"pln\"> ele</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L1\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">ele</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">),</span></code></li><li class=\"L2\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L3\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"com\">// 本地资讯</span></code></li><li class=\"L7\"><code><span class=\"pln\">  $</span><span class=\"pun\">(</span><span class=\"str\">‘div#localnews-zixun ul li a’</span><span class=\"pun\">).</span><span class=\"pln\">each</span><span class=\"pun\">((</span><span class=\"pln\">index</span><span class=\"pun\">,</span><span class=\"pln\"> item</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">let</span><span class=\"pln\"> news </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">      title</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">text</span><span class=\"pun\">(),</span></code></li><li class=\"L0\"><code><span class=\"pln\">      href</span><span class=\"pun\">:</span><span class=\"pln\"> $</span><span class=\"pun\">(</span><span class=\"pln\">item</span><span class=\"pun\">).</span><span class=\"pln\">attr</span><span class=\"pun\">(</span><span class=\"str\">‘href’</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"pun\">};</span></code></li><li class=\"L2\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">.</span><span class=\"pln\">push</span><span class=\"pun\">(</span><span class=\"pln\">news</span><span class=\"pun\">);</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"pun\">});</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">  </span><span class=\"kwd\">return</span><span class=\"pln\"> localNews</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>修改<code>app.get(‘/‘)</code>路由为：</p><br><pre class=\"prettyprint linenums prettyprinted\" style=\"overflow: auto;\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">/</span></code></li><li class=\"L1\"><code><span class=\"com\"> <em> [description] - 跟路由</em></span></code></li><li class=\"L2\"><code><span class=\"com\"> /</span></code></li><li class=\"L3\"><code><span class=\"com\">// 当一个get请求 <a href=\"http://localhost:3000时，就会后面的async函数\" target=\"_blank\" rel=\"noopener\">http://localhost:3000时，就会后面的async函数</a></span></code></li><li class=\"L4\"><code><span class=\"pln\">app</span><span class=\"pun\">.</span><span class=\"kwd\">get</span><span class=\"pun\">(</span><span class=\"str\">‘/‘</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">async</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">req</span><span class=\"pun\">,</span><span class=\"pln\"> res</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">next</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">  res</span><span class=\"pun\">.</span><span class=\"pln\">send</span><span class=\"pun\">({</span></code></li><li class=\"L6\"><code><span class=\"pln\">    hotNews</span><span class=\"pun\">:</span><span class=\"pln\"> hotNews</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code><span class=\"pln\">    localNews</span><span class=\"pun\">:</span><span class=\"pln\"> localNews</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"pun\">})</span></code></li><li class=\"L9\"><code><span class=\"pun\">});</span></code></li></ol></pre><blockquote><br><p>此时，<code>DOS</code>命令行中重新让项目跑起来，浏览器访问<code><a href=\"https://localhost:3000\" target=\"_blank\" rel=\"noopener\">https://localhost:3000</a></code>，看看页面展示的信息，看是否抓取到了<code>“本地新闻”</code>数据！</p><br></blockquote><br><p><strong>至此，一个简单而又完整的抓取百度新闻页面“热点新闻”和“本地新闻”的爬虫就大功告成啦！！</strong></p><br><p><strong>最后总结一下，整体思路如下：</strong></p><br><blockquote><br><ol><br><li><code>express</code>启动一个简单的<code>Http</code>服务</li><br><li>分析目标页面<code>DOM</code>结构，找到所要抓取的信息的相关<code>DOM元</code>素</li><br><li>使用<code>superagent</code>请求目标页面</li><br><li><strong>动态页面（需要加载页面后运行<code>JS</code>或请求接口的页面）可以使用<code>Nightmare</code>模拟浏览器访问</strong></li><br><li>使用<code>cheerio</code>获取页面元素，获取目标数据</li><br></ol><br></blockquote><br><p>###完整代码</p><br><blockquote><br><p>爬虫完整代码GitHub地址：<a href=\"https://github.com/webCaolixin/news-Spider\" target=\"_blank\" rel=\"noopener\">完整代码</a></p><br></blockquote><br><br></div>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjsmzfl1g0000h2c59hage4dz","category_id":"cjsmzfl1m0004h2c5e2g86zbp","_id":"cjsmzfl1u000dh2c50e3mk02g"},{"post_id":"cjsmzfl1r0009h2c5xkv49ile","category_id":"cjsmzfl1m0004h2c5e2g86zbp","_id":"cjsmzfl1v000fh2c55z5p342m"},{"post_id":"cjsmzfl1k0002h2c5e7vwmbil","category_id":"cjsmzfl1m0004h2c5e2g86zbp","_id":"cjsmzfl1v000hh2c53s9suin7"}],"PostTag":[{"post_id":"cjsmzfl1g0000h2c59hage4dz","tag_id":"cjsmzfl1o0005h2c5ydqmw5ll","_id":"cjsmzfl1u000ch2c5fj1ahoet"},{"post_id":"cjsmzfl1k0002h2c5e7vwmbil","tag_id":"cjsmzfl1s000bh2c58gehlm2a","_id":"cjsmzfl1v000gh2c5b7s1tp96"},{"post_id":"cjsmzfl1r0009h2c5xkv49ile","tag_id":"cjsmzfl1v000eh2c52gfebn9w","_id":"cjsmzfl1v000ih2c5xr5df2dm"}],"Tag":[{"name":"CSS","_id":"cjsmzfl1o0005h2c5ydqmw5ll"},{"name":"Vue","_id":"cjsmzfl1s000bh2c58gehlm2a"},{"name":"Node","_id":"cjsmzfl1v000eh2c52gfebn9w"}]}}