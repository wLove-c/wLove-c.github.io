<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>干货学习</title>
      <link href="/2019/03/29/coding-5/"/>
      <url>/2019/03/29/coding-5/</url>
      
        <content type="html"><![CDATA[<p>websocket/JS的类型/S中的typeof能得到的那些类型/js中有哪些内置函数 9 种</p><div class="article fmt article__content" data-id="1190000018628100" data-license><br><br><h1 id="articleHeader0">websocket</h1><br><p>Websocket同http一样都是是基于tcp的,可靠性的双向通信协议，是建立在tcp之上的，并且是持久化的协议。</p><br><h3 id="articleHeader1">websocket 和http区别？</h3><br><ul><br><li><br><p>相同点</p><br><ul><br><li>都是应用层的协议</li><br><li>都是基于tcp,可靠的协议</li><br></ul><br></li><br><li><br><p>不同点</p><br><ul><br><li>websocket是持久化的协议.</li><br><li>websocket是双向通信协议，模拟socket协议,可以双向发送信息，而HTTP是单向的</li><br><li>websocket可以在服务器端主动向客户端发送信息，而http的服务端,只能通过客户端主动请求</li><br></ul><br></li><br></ul><br><h3 id="articleHeader2">请描述一下cookie、sessionStorage和localStorage的区别？</h3><br><ul><br><li>相同点：都存储在客户端</li><br><li><br><p>不同点</p><br><ol><br><li>存储大小<br> cookie数据大小不能超过4k。<br> sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><br><li>有效时间<br>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>sessionStorage 数据在当前浏览器窗口关闭后自动删除。<br>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li><br><li>数据与服务器之间的交互方式<br>cookie的数据会自动的传递到服务器，服务器端也可以写cookie到客户端<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</li><br></ol><br></li><br></ul><br><h3 id="articleHeader3">JS的类型？</h3><br><ul><br><li><br><p>基本类型</p><br><ul><br><li>undefined</li><br><li>null</li><br><li>Number</li><br><li>String</li><br><li>Boolean</li><br></ul><br></li><br><li><br><p>复杂类型</p><br><ul><li>Object</li></ul><br></li><br></ul><br><h3 id="articleHeader4">js变量按照存储方式区分，有哪些类型，并表述其特点</h3><br><ul><br><li><br><p>值类型：</p><br><ul><br><li>undefined string number Boolean</li><br><li>拷贝形式,</li><br></ul><br></li><br><li><br><p>引用类型：</p><br><ul><br><li>array , function</li><br><li>指针指向，共用空间</li><br><li>可无限扩展属性，极大节省命名空间。</li><br></ul><br></li><br><li><br><p>特殊引用类型：function</p><br><ul><br><li>同引用类型↑</li><br><li>特殊引用类型只有function，由于function的特殊性，使得它有点不同</li><br></ul><br></li><br></ul><br><h3 id="articleHeader5">JS中的typeof能得到的那些类型？ 6种</h3><br><ul><br><li>number</li><br><li>string</li><br><li>undefined</li><br><li>object :  null和数组 都是object</li><br><li>function</li><br><li>boolean</li><br></ul><br><p>注意：typeof无法详细区分引用类型的类型，除了function. 只能准确区分值类型的类型<br>比如：</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" typeof {} //object typeof [] //object typeof null //object typeof console.log // function " title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code> <span class="hljs-keyword">typeof</span> {} <span class="hljs-comment">//object</span><br> <span class="hljs-keyword">typeof</span> [] <span class="hljs-comment">//object</span><br> <span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> <span class="hljs-comment">//object</span><br> <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">console</span>.log <span class="hljs-comment">// function </span></code></pre><br><p>function是一个比较特殊的类型，所以typeof能够区分</p><br><h3 id="articleHeader6">何时使用===何时使用==？</h3><br><ul><br><li><br><p>尽可能使用 === 原因如下</p><br><ul><br><li>一致性:使用 ==对一致性没有任何好处，所以提前避免</li><br><li>一般来说,===是最简单的操作符，因为它不用类型转换，所以相对来说，速度也会更快。</li><br><li>== 会进行类型转换，很容易懵逼</li><br></ul><br></li><br><li><br><p>== 的使用情况,可参考</p><br><ul><li>判断对象的属性是否存在</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="    var obj = {};    if( obj.a == null ){        //这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法    }" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs scala"><code>    <span class="hljs-keyword">var</span> obj = {};<br>    <span class="hljs-keyword">if</span>( obj.a == <span class="hljs-literal">null</span> ){<br>        <span class="hljs-comment">//这里相对于：obj.a === null || obj.a === undefined 的简写形式，JQ源码的推荐写法</span><br>    }</code></pre><br><ul><li>判断函数的参数是否存在</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="    function fn( a, b){        if( b == null ){            //这里相当于 b===null || b === undefined 的简写        }    }" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs actionscript"><code>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">( a, b)</span></span>{<br>        <span class="hljs-keyword">if</span>( b == <span class="hljs-literal">null</span> ){<br>            <span class="hljs-comment">//这里相当于 b===null || b === undefined 的简写</span><br>        }<br>    }</code></pre><br></li><br></ul><br><h3 id="articleHeader7">如何理解JSON？</h3><br><ul><br><li><br><p>从纯JS的角度看，JSON就是对象，并且只有两个API</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="   JSON.stringify({a:10,b:30}) //将对象转为字符串   JSON.parse('{&quot;a&quot;:10,&quot;b&quot;:30}') //将JSON格式的字符串转为 对象" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code>   <span class="hljs-built_in">JSON</span>.stringify({a:<span class="hljs-number">10</span>,b:<span class="hljs-number">30</span>}) <span class="hljs-comment">//将对象转为字符串</span><br>   <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">‘{“a”:10,”b”:30}’</span>) <span class="hljs-comment">//将JSON格式的字符串转为 对象</span></code></pre><br></li><br><li>JSON也是一种轻量级的文本数据交换格式.</li><br></ul><br><h3 id="articleHeader8">js中有哪些内置函数 9 种</h3><br><ul><br><li>Object</li><br><li>Array</li><br><li>Boolean</li><br><li>Number</li><br><li>String</li><br><li>Function</li><br><li>Date</li><br><li>RegExp</li><br><li>Error</li><br></ul><br><h3 id="articleHeader9">判断一个变量会被当做 true 还是 false</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var a = 100; console.log( !!a ); //true" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code style="word-break: break-word; white-space: initial;"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>; <span class="hljs-built_in">console</span>.log( !!a ); <span class="hljs-comment">//true</span></code></pre><br><h3 id="articleHeader10">window.onload和DOMContentLoaded的区别？</h3><br><ul><br><li>window.onload: 页面中所有数据加载完成后，才会执行，包括图片，css等</li><br><li>DOMContentLoaded: DOM结构加载完成后执行，需要等待图片等其他资源加载完成</li><br></ul><br><h3 id="articleHeader11">简述如何实现一个模块加载器，实现类似requires.js的基本功能</h3><br><p>可参看这篇博文：<a href="https://github.com/youngwind/blog/issues/98" rel="nofollow noreferrer" target="_blank">https://github.com/youngwind/…</a></p><br><h3 id="articleHeader12">实现数组的随机排序</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现 arr.sort(function () {      return Math.random() - 0.5;   });" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs lua"><code> //该方法最简单，效果一般，每个元素仍然有很大机率在它原来的位置附近出现<br> arr.<span class="hljs-built_in">sort</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span> {<br>      <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">random</span>() - <span class="hljs-number">0.5</span>;<br>   });<br></code></pre><br><p>//Fisher–Yates shuffle费雪耶兹随机置乱算法) ！！！推荐</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="    //算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。   var arr = [5,8,59,56];   function shuffle(arr) {    var i = arr.length, t, j;    while (i)    {        j = Math.floor(Math.random() * i--);        t= arr[i];        arr[i] = arr[j];        arr[j]= t;    }}shuffle(arr)console.log(arr);//[56, 8, 5, 59]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><br>    <span class="hljs-comment">//算法思想：从0~i（i的变化为 n-1到0递减）中随机取得一个下标，和最后一个元素（i）交换。</span><br>   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">59</span>,<span class="hljs-number">56</span>];<br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shuffle</span>(<span class="hljs-params">arr</span>) </span>{<br>    <span class="hljs-keyword">var</span> i = arr.length, t, j;<br>    <span class="hljs-keyword">while</span> (i)<br>    {<br>        j = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * i–);<br>        t= arr[i];<br>        arr[i] = arr[j];<br>        arr[j]= t;<br>    }<br>}<br>shuffle(arr)<br><span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[56, 8, 5, 59]</span></code></pre><br><h1 id="articleHeader13">原型和原型链</h1><br><h3 id="articleHeader14">什么叫原型链</h3><br><p>原型链是针对构造函数的，比如我创建了一个函数并通过变量new了一个函数，那这个函数就会继承创建处理函数的属性，如果访问这个函数的属性时，并没有在new处理的变量中写该属性，那么就会往上,根据protype逐级向上查找，这个查找的过程就叫原型链。</p><br><h3 id="articleHeader15">原型规则</h3><br><ol><br><li>所有的引用类型（数组，对象，函数），都具有对象的特殊，即可自由扩展属性（除了Null，纯属意外）</li><br><li>所有的引用类型（数组，对象，函数），都有一个<strong>proto</strong>属性，也可以称为隐式原型，属性值是一个普通的对象</li><br><li>所有的函数，都有一个prototype属性，也可称之为显式原型，属性值是一个普通的对象</li><br><li>所有的引用类型（数组，对象，函数），<strong>proto</strong>属性值指向它的构造函数的prototype属性值</li><br><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>中去找。</li><br></ol><br><p>由于它的隐式原型等于它的显式原型，所以也会去 prototype 中去找。</p><br><h3 id="articleHeader16">构造函数</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function Foo(name,age){    this.name = name;    this.age = age;}var foo = new Foo('h1',25);var foo2 = new Foo('h1',250);console.log(foo,foo2);//循环对象自身的属性var item;for( item in foo){    //只遍历对象自身的属性，过滤掉该对象的显式原型    if(foo.hasOwnProperty(item))    {        console.log(item)    }}" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params">name,age</span>)</span>{<br>    <span class="hljs-keyword">this</span>.name = name;<br>    <span class="hljs-keyword">this</span>.age = age;<br>}<br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> Foo(<span class="hljs-string">‘h1’</span>,<span class="hljs-number">25</span>);<br><span class="hljs-keyword">var</span> foo2 = <span class="hljs-keyword">new</span> Foo(<span class="hljs-string">‘h1’</span>,<span class="hljs-number">250</span>);<br><span class="hljs-built_in">console</span>.log(foo,foo2);<br><br><span class="hljs-comment">//循环对象自身的属性</span><br><span class="hljs-keyword">var</span> item;<br><span class="hljs-keyword">for</span>( item <span class="hljs-keyword">in</span> foo)<br>{<br>    <span class="hljs-comment">//只遍历对象自身的属性，过滤掉该对象的显式原型</span><br>    <span class="hljs-keyword">if</span>(foo.hasOwnProperty(item))<br>    {<br>        <span class="hljs-built_in">console</span>.log(item)<br>    }<br><br>}<br></code></pre><br><h3 id="articleHeader17">描述new一个对象的过程</h3><br><ol><br><li>创建一个对象</li><br><li>this指向这个新对象</li><br><li>执行代码，即对this赋值</li><br><li>return this。 默认有return，不用写</li><br></ol><br><h3 id="articleHeader18">如何判断一个变量是数组类型</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var arr = [1,2,3];console.log(Array.isArray(arr)); //true//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置console.log( arr instanceof Array) //true" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs typescript"><code><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr)); <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</span><br><span class="hljs-built_in">console</span>.log( arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) <span class="hljs-comment">//true</span></code></pre><br><h3 id="articleHeader19">写一个原型继承的例子</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function Elem(id){    this.dom = document.getElementById(id);}Elem.prototype.html = function(val){    var dom = this.dom;    if(val){        dom.innerHTML = val;        return this; //用来链式调用    }else{        return dom.innerHTML;    }}Elem.prototype.on = function(type ,fn){    var dom = this.dom;    dom.addEventListener( type , fn);}var h1 = new Elem('h1');h1.html(&quot;你被修改了&quot;).on('click', function(){    console.log(this)})" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Elem</span>(<span class="hljs-params">id</span>)</span>{<br>    <span class="hljs-keyword">this</span>.dom = <span class="hljs-built_in">document</span>.getElementById(id);<br>}<br><br>Elem.prototype.html = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>{<br>    <span class="hljs-keyword">var</span> dom = <span class="hljs-keyword">this</span>.dom;<br>    <span class="hljs-keyword">if</span>(val){<br>        dom.innerHTML = val;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>; <span class="hljs-comment">//用来链式调用</span><br>    }<span class="hljs-keyword">else</span>{<br>        <span class="hljs-keyword">return</span> dom.innerHTML;<br><br>    }<br>}<br><br>Elem.prototype.on = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type ,fn</span>)</span>{<br>    <span class="hljs-keyword">var</span> dom = <span class="hljs-keyword">this</span>.dom;<br>    dom.addEventListener( type , fn);<br><br>}<br><span class="hljs-keyword">var</span> h1 = <span class="hljs-keyword">new</span> Elem(<span class="hljs-string">‘h1’</span>);<br>h1.html(<span class="hljs-string">“你被修改了”</span>).on(<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)<br>})<br></code></pre><br><h1 id="articleHeader20">作用域和闭包</h1><br><h3 id="articleHeader21">什么叫作用域？</h3><br><p><code>作用域是针对变量的，比如我创建了一个函数，这个函数中包含了另外一个函数。那么该变量中就有3个作用域&lt;br&gt;全局作用域》函数作用域》内层函数的作用域&lt;br&gt;作用域的特点就是，先在自己的变量范围中查找，如果找不到，就会沿着作用域往上找。&lt;br&gt;</code></p><br><h3 id="articleHeader22">变量提升的理解</h3><br><ul><br><li>变量定义</li><br><li>函数声明（注意和函数表达式的区别）</li><br><li>预解析</li><br></ul><br><h3 id="articleHeader23">this的使用场景</h3><br><p>注意：this要在执行时才能确认值，定义时无法确认</p><br><ul><br><li>作为构造函数执行</li><br><li>作为对象属性执行</li><br><li>作为普通函数执行</li><br><li>call apply bind</li><br></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function f1(name,age){    console.log(name,age)    console.log(this); //this为x对象 }f1.apply({x:'我是this'}, [&quot;seek&quot;,20]);f1.call({x:'我是this'}, &quot;seek&quot;,20);//使用bind改变this时，需用函数表达式var f1 = function (name,age){    console.log(name,age)    console.log(this); //this为x对象}.bind('我是被绑定的this')f1(&quot;seek&quot;,20)" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">name,age</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(name,age)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//this为x对象</span><br> }<br><br>f1.apply({<span class="hljs-attr">x</span>:<span class="hljs-string">‘我是this’</span>}, [<span class="hljs-string">“seek”</span>,<span class="hljs-number">20</span>]);<br>f1.call({<span class="hljs-attr">x</span>:<span class="hljs-string">‘我是this’</span>}, <span class="hljs-string">“seek”</span>,<span class="hljs-number">20</span>);<br><br><br><span class="hljs-comment">//使用bind改变this时，需用函数表达式</span><br><span class="hljs-keyword">var</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name,age</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(name,age)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//this为x对象</span><br>}.bind(<span class="hljs-string">‘我是被绑定的this’</span>)<br><br>f1(<span class="hljs-string">“seek”</span>,<span class="hljs-number">20</span>)<br></code></pre><br><h3 id="articleHeader24">闭包</h3><br><p><code>当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，&lt;br&gt;如果返回的这个函数在外部被执行，就产生了闭包。&lt;br&gt;表现形式：使函数外部能够调用函数内部定义的变量。</code></p><br><ul><li><br><p>闭包的使用场景</p><br><ol><br><li><br><p>函数作为返回值</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function fn(){    var a = 10;    return function(){        console.log(a); //a是自由变量，从父作用域开始找。    }}var f1 =  fn();var a = 20;f1(); //10" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//a是自由变量，从父作用域开始找。</span><br>    }<br>}<br><span class="hljs-keyword">var</span> f1 =  fn();<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br>f1(); <span class="hljs-comment">//10</span></code></pre><br></li><br><li><br><p>函数作为参数来传递</p><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="function fn(){    var a = 10;    return function(){        console.log(a);        }}var fn1 = fn();function fn2(fn){    var a =20;    fn();}fn2(fn1); //10" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(a);<br>        }<br>}<br><span class="hljs-keyword">var</span> fn1 = fn();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params">fn</span>)</span>{<br>    <span class="hljs-keyword">var</span> a =<span class="hljs-number">20</span>;<br>    fn();<br>}<br>fn2(fn1); <span class="hljs-comment">//10</span></code></pre><br></li><br></ol><br></li></ul><br><h3 id="articleHeader25">如何理解作用域？</h3><br><ul><br><li>自由变量</li><br><li>作用域链，即自由变量的查找</li><br><li>闭包的两个场景</li><br></ul><br><h3 id="articleHeader26">JS创建10个a标签，点击时弹出对应的序号 （考点：作用域)</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var str,a;for( a=0; a<10;a++){    str = document.createElement(&quot;a&quot;);    str.innerHTML = a + &quot;点我&quot; + &quot;<br/>&quot;;    document.body.appendChild(str);    (function(a){        str.addEventListener(&quot;click&quot;,function(e){            e.preventDefault();            console.log(a)        })    })(a)}" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-keyword">var</span> str,a;<br><span class="hljs-keyword">for</span>( a=<span class="hljs-number">0</span>; a&lt;<span class="hljs-number">10</span>;a++){<br>    str = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">“a”</span>);<br>    str.innerHTML = a + <span class="hljs-string">“点我”</span> + <span class="hljs-string">“&lt;br/&gt;”</span>;<br><br>    <span class="hljs-built_in">document</span>.body.appendChild(str);<br><br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)</span>{<br>        str.addEventListener(<span class="hljs-string">“click”</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{<br>            e.preventDefault();<br>            <span class="hljs-built_in">console</span>.log(a)<br>        })<br>    })(a)<br>}</code></pre><br><h3 id="articleHeader27">什么叫异步,什么叫同步？</h3><br><p>同步是阻塞模式，异步是非阻塞模式。</p><br><ul><br><li>异步：不需要等操作做完，就响应用户请求. 比如：ajax，img的加载，setTimeout,setInterval</li><br><li>同步：必须等待操作做完，才返回结果.</li><br></ul><br><h3 id="articleHeader28">数组API</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var arr= [2,3,9,0];" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs scala"><code style="word-break: break-word; white-space: initial;"> <span class="hljs-keyword">var</span> arr= [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>];</code></pre><br><ul><li>forEach 遍历所有元素</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="  arr.forEach(function(item,index){        console.log(item) // 2390        console.log(index) //0123    })" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code>  arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(item) <span class="hljs-comment">// 2390</span><br>        <span class="hljs-built_in">console</span>.log(index) <span class="hljs-comment">//0123</span><br><br>    })</code></pre><br><ul><li>every 判断所有元素是否都符合条件</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="  var result = arr.every(function(item,index){        if(item < 4)        {          return true;        }    })  console.log(result); //false， 因为9并不小于4" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code>  <span class="hljs-keyword">var</span> result = arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>        <span class="hljs-keyword">if</span>(item &lt; <span class="hljs-number">4</span>)<br>        {<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        }<br>    })<br>  <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//false， 因为9并不小于4</span></code></pre><br><ul><li>some 判断是否有至少一个元素符合条件</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var result =  arr.some(function(item,index){        if(item < 4)        {          return true;        }      })console.log(result); //true 因为2,3,0小于4" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-keyword">var</span> result =  arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>        <span class="hljs-keyword">if</span>(item &lt; <span class="hljs-number">4</span>)<br>        {<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        }<br>      })<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">//true 因为2,3,0小于4</span></code></pre><br><ul><li>sort 排序</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var result =  arr.sort(function(a,b){          // return a-b; //正序          return b-a; // 倒序        // return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐      })console.log(result); // &nbsp;[9, 3, 2, 0]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-keyword">var</span> result =  arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>{<br>          <span class="hljs-comment">// return a-b; //正序</span><br>          <span class="hljs-keyword">return</span> b-a; <span class="hljs-comment">// 倒序</span><br>        <span class="hljs-comment">// return return Math.random() - 0.5; //最简单的随机数组排序，并不推荐</span><br><br>      })<br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// &nbsp;[9, 3, 2, 0]</span></code></pre><br><ul><li>map 对元素重新组装，生成新数组</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="//map适用范围还是较广的，学会思考 var result =  arr.map(function(item,index){            return '<h1>' + item + '</h1>';      })console.log(result);   //  [&quot;<h1>2</h1>&quot;, &quot;<h1>3</h1>&quot;, &quot;<h1>9</h1>&quot;, &quot;<h1>0</h1>&quot;]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs lua"><code>//map适用范围还是较广的，学会思考<br> var result =  arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item,index)</span></span>{<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">‘&lt;h1&gt;’</span> + item + <span class="hljs-string">‘&lt;/h1&gt;’</span>;<br>      })<br>console.<span class="hljs-built_in">log</span>(result);   //  [<span class="hljs-string">“&lt;h1&gt;2&lt;/h1&gt;”</span>, <span class="hljs-string">“&lt;h1&gt;3&lt;/h1&gt;”</span>, <span class="hljs-string">“&lt;h1&gt;9&lt;/h1&gt;”</span>, <span class="hljs-string">“&lt;h1&gt;0&lt;/h1&gt;”</span>]</code></pre><br><ul><li>filter 过滤符合条件的元素,较为常用</li></ul><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="var result =  arr.filter(function(item,index){            if(item >=3){              return true;            }      })console.log(result);   // [3, 9]" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-keyword">var</span> result =  arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>{<br>            <span class="hljs-keyword">if</span>(item &gt;=<span class="hljs-number">3</span>){<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br>      })<br><span class="hljs-built_in">console</span>.log(result);   <span class="hljs-comment">// [3, 9]</span></code></pre><br><h3 id="articleHeader29">获取 2019-03-23格式的日期</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="   function formatDate(dt) {        if (!dt) {            //如果不传参数，则默认为当前时间            dt = new Date();        }        var year = dt.getFullYear();        var month = dt.getMonth() + 1;        var day = dt.getDate();        if (month <= 10) {            month = '0' + month;        }        if (day <= 10) {            day = '0' + day;        }        return year + '-' + month + '-' + day;    }    var date = formatDate();    console.log(date); //2019-03-23" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatDate</span>(<span class="hljs-params">dt</span>) </span>{<br>        <span class="hljs-keyword">if</span> (!dt) {<br>            <span class="hljs-comment">//如果不传参数，则默认为当前时间</span><br>            dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>        }<br><br>        <span class="hljs-keyword">var</span> year = dt.getFullYear();<br>        <span class="hljs-keyword">var</span> month = dt.getMonth() + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">var</span> day = dt.getDate();<br><br>        <span class="hljs-keyword">if</span> (month &lt;= <span class="hljs-number">10</span>) {<br>            month = <span class="hljs-string">‘0’</span> + month;<br>        }<br><br>        <span class="hljs-keyword">if</span> (day &lt;= <span class="hljs-number">10</span>) {<br>            day = <span class="hljs-string">‘0’</span> + day;<br>        }<br><br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">‘-‘</span> + month + <span class="hljs-string">‘-‘</span> + day;<br>    }<br><br>    <span class="hljs-keyword">var</span> date = formatDate();<br>    <span class="hljs-built_in">console</span>.log(date); <span class="hljs-comment">//2019-03-23</span><br></code></pre><br><h3 id="articleHeader30">获取随机数，要求长度一致的字符串格式</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" var random = Math.random();    random = random + '0'.repeat(10); //repeat 重复10个0, 防止随机数出现少于10位数的情况    random = random.slice(0,10)    console.log(random); //0.70728618  每次返回的只有10位数的字符串" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs lua"><code> var <span class="hljs-built_in">random</span> = Math.<span class="hljs-built_in">random</span>();<br>    <span class="hljs-built_in">random</span> = <span class="hljs-built_in">random</span> + <span class="hljs-string">‘0’</span>.<span class="hljs-keyword">repeat</span>(<span class="hljs-number">10</span>); //<span class="hljs-keyword">repeat</span> 重复<span class="hljs-number">10</span>个<span class="hljs-number">0</span>, 防止随机数出现少于<span class="hljs-number">10</span>位数的情况<br>    <span class="hljs-built_in">random</span> = <span class="hljs-built_in">random</span>.slice(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">random</span>); //<span class="hljs-number">0.70728618</span>  每次返回的只有<span class="hljs-number">10</span>位数的字符串</code></pre><br><h3 id="articleHeader31">写一个能遍历对象和数组的foreach函数</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="function foreach(info, fn){        //数组处理        if(info instanceof Array)        {          info.forEach(fn)        }else{           //对象处理           for( key in obj){              fn(key, obj[key])            }        }}//使用方法  var obj = {x: '我是x',y: '我是y'};   foreach(obj, function(key,value){    console.log(value); //我是x,我是y  })  var arr = [5,8,9];  foreach(arr, function(elem,index){    console.log(elem);//5,8,9  })" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foreach</span>(<span class="hljs-params">info, fn</span>)<br></span>{<br>        <span class="hljs-comment">//数组处理</span><br>        <span class="hljs-keyword">if</span>(info <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>)<br>        {<br>          info.forEach(fn)<br>        }<span class="hljs-keyword">else</span>{<br>           <span class="hljs-comment">//对象处理</span><br>           <span class="hljs-keyword">for</span>( key <span class="hljs-keyword">in</span> obj){<br>              fn(key, obj[key])<br>            }<br>        }<br><br>}<br><br><span class="hljs-comment">//使用方法</span><br>  <span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">x</span>: <span class="hljs-string">‘我是x’</span>,<span class="hljs-attr">y</span>: <span class="hljs-string">‘我是y’</span>};<br>   foreach(obj, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key,value</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(value); <span class="hljs-comment">//我是x,我是y</span><br>  })<br><br><br>  <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>];<br>  foreach(arr, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem,index</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(elem);<span class="hljs-comment">//5,8,9</span><br>  })<br></code></pre><br><h1 id="articleHeader32">Web_API</h1><br><h3 id="articleHeader33">编写一个通用的事件监听函数</h3><br><div class="widget-codetool" style="display: none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text=" function bindEvent(elem,type,fn){           elem.addEventListener( type ,fn) } //使用方法 bindEvent(id,'click', function(e){    console.log(e) }) bindEvent(a,'click', function(e){    e.preventDefault(); //阻止默认事件 })" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs javascript"><code> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bindEvent</span>(<span class="hljs-params">elem,type,fn</span>)</span>{<br>           elem.addEventListener( type ,fn)<br> }<br> <span class="hljs-comment">//使用方法</span><br> bindEvent(id,<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(e)<br> })<br><br> bindEvent(a,<span class="hljs-string">‘click’</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{<br>    e.preventDefault(); <span class="hljs-comment">//阻止默认事件</span><br> })</code></pre><br><h3 id="articleHeader34">对于一个无限加载流的页面，如何给每个特定的标签添加事件</h3><br><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//使用代理，由父级帮忙去做<br><br> <div id="&quot;div1&quot;"><br>    <a href="&quot;#&quot;">a1</a><br>    <a href="&quot;#&quot;">a2</a><br>    <span>ddd</span><br>    <a href="&quot;#&quot;">a5</a><br>    <!-- 动态加载更多 --><br></div><p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == &quot;A&quot;){<br>        alert(e.target.innerHTML)<br>    }<br>})” title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class="hljs xml"><code>//使用代理，由父级帮忙去做<p></p><p> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“div1”</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“#”</span>&gt;</span>a1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“#”</span>&gt;</span>a2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ddd<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“#”</span>&gt;</span>a5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!– 动态加载更多 –&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></p><p>div1.addEventListener(‘click’, function(e){<br>    if (e.target.nodeName == “A”){<br>        alert(e.target.innerHTML)<br>    }<br>})</p></code></pre><p></p><p></p><h3 id="articleHeader35">完善通用绑定事件的函数，包括代理</h3><p></p><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      &lt;span type=”button” class=”copyCode code-tool” data-toggle=”tooltip” data-placement=”top” data-clipboard-text=”//HTML结构<br> <div id="&quot;div1&quot;"><br>    <a href="&quot;#&quot;">a1</a><br>    <a href="&quot;#&quot;">a2</a><br>    <span>ddd</span><br>    <a href="&quot;#&quot;">a5</a><br>    <!-- 动态加载更多 --><br></div><div id="&quot;div2&quot;">不使用代理</div><p>//<br>function bindEvent(elem,type,selector, fn){<br>    if(fn == null){<br>        fn=selector;<br>        selector =null;<br>    }<br>    elem.addEventListener( type ,function(e){<br>        var target;<br>        if(selector){<br>            target = e.target;<br>            //matches() 方法用于检测字符串是否匹配给定的正则表达式。<br>            if(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }else{<br>            fn.call(e);<br>        }<br>    })<br>}</p><p>//使用代理<br>bindEvent(div1,’click’,’a’,function(e){<br>    console.log(this)<br>})<br>//不使用代理<br>bindEvent(div2,’click’,function(e){<br>    //call改变了this指向为e<br>    console.log(this.toElement.innerHTML)<br>})<br>“ title=”” data-original-title=”复制”&gt;<br>      </p></div><br>      </div><pre class="hljs actionscript"><code><span class="hljs-comment">//HTML结构</span><br> &lt;div id=<span class="hljs-string">“div1”</span>&gt;<br>    &lt;a href=<span class="hljs-string">“#”</span>&gt;a1&lt;/a&gt;<br>    &lt;a href=<span class="hljs-string">“#”</span>&gt;a2&lt;/a&gt;<br>    &lt;span&gt;ddd&lt;/span&gt;<br>    &lt;a href=<span class="hljs-string">“#”</span>&gt;a5&lt;/a&gt;<br>    &lt;!– 动态加载更多 –&gt;<br>&lt;/div&gt;<p></p><p>&lt;div id=<span class="hljs-string">“div2”</span>&gt;不使用代理&lt;/div&gt;</p><p><span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bindEvent</span><span class="hljs-params">(elem,type,selector, fn)</span></span>{<br>    <span class="hljs-keyword">if</span>(fn == <span class="hljs-literal">null</span>){<br>        fn=selector;<br>        selector =<span class="hljs-literal">null</span>;<br>    }<br>    elem.addEventListener( type ,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>{<br>        <span class="hljs-keyword">var</span> target;<br>        <span class="hljs-keyword">if</span>(selector){<br>            target = e.target;<br>            <span class="hljs-comment">//matches() 方法用于检测字符串是否匹配给定的正则表达式。</span><br>            <span class="hljs-keyword">if</span>(target.matches(selector)){<br>                fn.call(target,e);<br>            }<br>        }<span class="hljs-keyword">else</span>{<br>            fn.call(e);<br>        }<br>    })<br>}</p><p><span class="hljs-comment">//使用代理</span><br>bindEvent(div1,<span class="hljs-string">‘click’</span>,<span class="hljs-string">‘a’</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>{<br>    console.log(<span class="hljs-keyword">this</span>)<br>})<br><span class="hljs-comment">//不使用代理</span><br>bindEvent(div2,<span class="hljs-string">‘click’</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span></span>{<br>    <span class="hljs-comment">//call改变了this指向为e</span><br>    console.log(<span class="hljs-keyword">this</span>.toElement.innerHTML)<br>})<br></p></code></pre><p></p><p></p><h3 id="articleHeader36">可以跨域的三个标签</h3><p></p><div class="widget-codetool" style="display:none;"><br>      <div class="widget-codetool--inner"><br>      <span class="selectCode code-tool" data-toggle="tooltip" data-placement="top" title data-original-title="全选"></span><br>      <span type="button" class="copyCode code-tool" data-toggle="tooltip" data-placement="top" data-clipboard-text="<img src=&quot;&quot; alt=&quot;&quot;> //用于打点统计<link rel=&quot;stylesheet&quot; href=&quot;&quot;> //使用CDN<script></script> // 使用JSONP" title data-original-title="复制"></span><br>      </div><br>      </div><pre class="hljs xml"><code><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">“”</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">“”</span>&gt;</span> //用于打点统计<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">“stylesheet”</span> <span class="hljs-attr">href</span>=<span class="hljs-string">“”</span>&gt;</span> //使用CDN<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> // 使用JSONP</code></pre><br><h1 id="articleHeader37">3月10日面试</h1><br><h3 id="articleHeader38">闭包的优缺点</h3><br><p>JS中，在函数外部无法访问函数内部的值，使用闭包就可以做到。</p><br><ul><br><li><br><p>优点：</p><br><ol><br><li>使用闭包能够让局部变量模拟全局变量一样,但是，只能被特定函数调用。</li><br><li>全局变量可能会造成命名冲突，使用闭包不用担心这个问题，因为它是私有化，加强了封装性。</li><br></ol><br></li><br><li><br><p>缺点</p><br><ol><li>由于闭包是驻留在内存中的,会增大内存使用量，使用不当很容易造成内存泄露,降低程序的性能。</li></ol><br></li><br></ul><br><h3 id="articleHeader39">按需引入，模块引入的实现？</h3><br><h3 id="articleHeader40">http请求缓存头详解</h3><br><ol><br><li>Expires: http1.0 推出的，指服务器返回的文件有效期，但其实这是有缺陷的，如果把本地的时间改为2118年，那Expires的时间怎么都会过期。</li><br><li>Last-Modified: http1.0推出的，指服务器文件的最后修改时间，浏览器会带上If-Modified-Since向服务器发送请求，与服务器文件修改时间Last-Modified做对比，如果时间不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存。</li><br><li><br><p>Cache-Control: http1.1推出，指文件缓存的有效期。</p><br><ul><br><li>.max-age:单位是s，设置文件最大缓存时间，用得最多。</li><br><li>public:缓存可以被多用户共享，例如360浏览器可以登录不同账号，电脑系统可以切换不同账号</li><br><li>private:仅单用户私有，不被多用户共享</li><br><li>no-cache:不会被缓存。</li><br><li>no-store:不允许被存储</li><br></ul><br></li><br><li>ETag: http1.1推出，该版本号是由服务端随机生成的，浏览器会带上If-None-Match向服务器发送请求，与服务器文件修改版本ETag做对比，如果版本号不同，则获取数据返回200，否则返回304后调用浏览器本地硬盘的缓存，这种方式比Last-Modified靠谱。</li><br></ol><br><br></div><p>尊重原著:文章转载于@<a href="https://segmentfault.com/a/1190000018628100" target="_blank" rel="noopener">史燕斌</a>.</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法的扩展:array.every()和array.some()</title>
      <link href="/2019/03/29/cosing-4/"/>
      <url>/2019/03/29/cosing-4/</url>
      
        <content type="html"><![CDATA[<p>从字面认知:every是每一个都，some是都有一些就~~<br>即:</p><ol><li>every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；</li><li>some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；</li></ol><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false,且程序不会继续往下执行；</span>array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array）<span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// item:当前元素的值；</span>                 <span class="token comment" spellcheck="true">// index:当前元素的索引；</span>                 <span class="token comment" spellcheck="true">// array:当前元素的数组对象；</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//es6</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 所有都满足才会返回true,否则返回false;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[10,20,30,40,50,22,26]</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es5</span><span class="token comment" spellcheck="true">// let result = age.every(function(item,index,array){</span><span class="token comment" spellcheck="true">//     return item > 22;</span><span class="token comment" spellcheck="true">//     })</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// some():方法用于检测数组中是否有元素符合指定条件，若有符合的返回true，且程序不会继续往下执行；否则返回false；</span>array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array）<span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// item:当前元素的值；</span>                 <span class="token comment" spellcheck="true">// index:当前元素的索引；</span>                 <span class="token comment" spellcheck="true">// array:当前元素的数组对象；</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子:"></a>例子:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//es6</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 所有都满足才会返回true,否则返回false;</span> <span class="token keyword">let</span> result <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10 20 30</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0 1 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[10,20,30,40,50,22,26]</span>     <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es5</span><span class="token comment" spellcheck="true">// let result = age.some(function(item,index,array){</span><span class="token comment" spellcheck="true">//     return item > 22;</span><span class="token comment" spellcheck="true">//     })</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue前端代码规范</title>
      <link href="/2019/02/26/coding-3/"/>
      <url>/2019/02/26/coding-3/</url>
      
        <content type="html"><![CDATA[<p>使用vue的这两年中，除了部分公司有比较好的代码规范外，也形成了一套自己的编程习惯；<br>持续更新</p><section class="post-content"><br>            <p><strong>一、JavaScript命名规范</strong></p><br><br><pre><code>1､命名统一使用语义化的驼峰命名法，能表达出该命名的用义<br></code></pre><br><br><p>例：主页的头部命名组件为header,列表详情下抽出的用户头部，应以userHeader命名，不能叫header </p><br><br><p><strong>二、CSS命名规范</strong></p><br><br><pre><code>1.命名统一使用语义化的驼峰命名法，对于过长的双或多英文单词组成的命名， 使用“-”链接，实在太长的，取每个单词的前3字母 + “-”链接（不绝对取前3 字母，根据语义取字母）。<br>2.设置相同属性的，使用面向属性命名方法，如：都是设置字体相关属性的，以该属性命名<br>     .fs {<br>            font: italic bold 12px/24px “Microsoft YaHei”;<br>    }<br>3.共用，又设置了不同属性的。以public的pub开头 + 语义化名称，如：页面 有多个店铺icon图标，有共同的和不同的样式，共同（重用）的样式命名方法为：<br>      .pub-shopIcon {<br>                   width:12px;<br>                   height:12px;<br>                   float:left;<br>                   position:relative;<br>                   left:0;<br>                   top:0;<br>               }<br></code></pre><br><br><p><strong>三、 Vue 目录结构</strong></p><br><br><p>1.assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。 <br><br>2.static用来放没有npm包的第三方插件，字体文件。 <br><br>3.assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/wapFront <br><br><code><br>├── README.md              // 用到的插件和其他项目注意点在这里标明<br>├── build<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── logo.png<br>│   ├── utils.js<br>│   ├── vue-loader.conf.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── index.html<br>├── package.json<br>├── src<br>│   ├── App.vue<br>│   ├── api               // 抽出的axios 接口请求配置<br>│   ├── assets            //  图片和公用样式<br>│   ├── components        //  公用组件<br>│   ├── directives        //  vue 指令<br>│   ├── filters           //  vue过滤器<br>│   ├── main.js<br>│   ├── router            //  路由<br>│   ├── store<br>│   ├── utils             // 工具<br>│   └── views             // 业务页面<br>└── static                // 没有npm包的第三方插件<br></code></p><br>        </section>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 的介绍和使用</title>
      <link href="/2019/02/26/hello-world/"/>
      <url>/2019/02/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! 这是我的第一个发布. 通过观看 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo文档</a> 获取更多信息. 如果你在使用hexo的过程中遇到什么问题, 你可以从这里找到一些答案 <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">问题解决</a> 或者你也可以在github寻求帮助 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-（创建新文章）"><a href="#Create-a-new-post-（创建新文章）" class="headerlink" title="Create a new post （创建新文章）"></a>Create a new post （创建新文章）</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server-（运行）"><a href="#Run-server-（运行）" class="headerlink" title="Run server （运行）"></a>Run server （运行）</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files-（生成静态文件）"><a href="#Generate-static-files-（生成静态文件）" class="headerlink" title="Generate static files （生成静态文件）"></a>Generate static files （生成静态文件）</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-（部署到远程站点）"><a href="#Deploy-to-remote-sites-（部署到远程站点）" class="headerlink" title="Deploy to remote sites （部署到远程站点）"></a>Deploy to remote sites （部署到远程站点）</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS垂直居中的几种方法</title>
      <link href="/2019/02/26/coding-1/"/>
      <url>/2019/02/26/coding-1/</url>
      
        <content type="html"><![CDATA[<p>CSS垂直居中的几种方法</p><p>@<a href="CSS垂直居中的几种方法">TOC</a></p><h3 id="假设HTML如下"><a href="#假设HTML如下" class="headerlink" title="假设HTML如下:"></a>假设HTML如下:</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="1-兼容性最好的方法-IE7以上"><a href="#1-兼容性最好的方法-IE7以上" class="headerlink" title="1. 兼容性最好的方法 IE7以上"></a>1. 兼容性最好的方法 IE7以上</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>     width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>     height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>     background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     position<span class="token punctuation">:</span>relative<span class="token punctuation">;</span> <span class="token punctuation">}</span>#content <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>pink<span class="token punctuation">;</span>    position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    top<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    right<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    bottom<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    margin<span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-transform进行元素偏移-IE8以上"><a href="#2-transform进行元素偏移-IE8以上" class="headerlink" title="2. transform进行元素偏移 IE8以上"></a>2. transform进行元素偏移 IE8以上</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    position<span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token punctuation">}</span>#content<span class="token punctuation">{</span>    position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    left<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    top<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    transform<span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-弹性盒模型进行布局-IE兼容性差"><a href="#3-弹性盒模型进行布局-IE兼容性差" class="headerlink" title="3. 弹性盒模型进行布局 IE兼容性差"></a>3. 弹性盒模型进行布局 IE兼容性差</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">:</span>box<span class="token punctuation">;</span>    box<span class="token operator">-</span>pack<span class="token punctuation">:</span>center<span class="token punctuation">;</span>    box<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span>    display<span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>flexbox<span class="token punctuation">;</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>pack<span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>align<span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">}</span>#content <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-flex布局-不兼容IE9以下"><a href="#4-flex布局-不兼容IE9以下" class="headerlink" title="4. flex布局 不兼容IE9以下"></a>4. flex布局 不兼容IE9以下</h3><pre class=" language-javascript"><code class="language-javascript">body<span class="token punctuation">,</span>html <span class="token punctuation">{</span> margin<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span> width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>#box <span class="token punctuation">{</span>    width<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">:</span>flex<span class="token punctuation">;</span>    display<span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>flex<span class="token punctuation">;</span>     justify<span class="token operator">-</span>content<span class="token punctuation">:</span>center<span class="token punctuation">;</span>     align<span class="token operator">-</span>items<span class="token punctuation">:</span>center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>#content <span class="token punctuation">{</span>    position<span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    width<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token punctuation">:</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    background<span class="token punctuation">:</span>blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h5 id="言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔"><a href="#言-以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔" class="headerlink" title="言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔"></a>言: 以上就是博主目前用的比较多的方法啦，如果有什么更好的方法，可以多多交流喔</h5>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法</title>
      <link href="/2019/02/26/coding-2/"/>
      <url>/2019/02/26/coding-2/</url>
      
        <content type="html"><![CDATA[<p>vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法<br>@<a href="vue项目下props传进去的数据,生命周期勾子函数包括watch不触发的解决办法">TOC</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p> 在深层props过程中，props的数据传到了目标文件 但却没有触发数据更新及页面更新；<br> watch代码如下：</p><pre class=" language-javascript"><code class="language-javascript">  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">uploaConfig</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>moreList <span class="token operator">=</span> newVal<span class="token punctuation">.</span>moreList          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>vue-devToola数据传递结果如下<br><img src="https://img-blog.csdnimg.cn/20190131173426486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="方案解决过程一"><a href="#方案解决过程一" class="headerlink" title="方案解决过程一"></a>方案解决过程一</h4><p>考虑到使用了对象传递 watch可能无法检测到深层key属性变化，代码改成如下:</p><pre class=" language-javascript"><code class="language-javascript"> watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'uploaConfig.moreList'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          handler <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>moreList <span class="token operator">=</span> newVal<span class="token punctuation">.</span>moreList              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          deep<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>结果显而易见 还是不行；</p><h4 id="方案解决过程二"><a href="#方案解决过程二" class="headerlink" title="方案解决过程二"></a>方案解决过程二</h4><p>查阅: <a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener">vue官方文档</a>.得知如果是想watch检测到值变化并且立刻使用则需要加上 immediate: true,</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'uploaConfig.moreList'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          handler <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uploadConfig<span class="token punctuation">.</span>moreList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>moreList <span class="token operator">=</span> newVal<span class="token punctuation">.</span>moreList              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>最后博主问题终于得到解决了<br><img src="https://img-blog.csdnimg.cn/20190131175046627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDc1NTY4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>出现问题尽量先找官网 首先确定是自己没有了解到官方api的正确使用或者是一些特定解决方案，如若对您有帮助，麻烦点个赞吧~</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢~"></a>感谢~</h2><p>谢谢大家 麻烦给个关注 ^ _ ^</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
